!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARCHITECTURE_ARM	src/utils.h	/^    ARCHITECTURE_ARM,$/;"	e	enum:Architecture
ARCHITECTURE_ARM64	src/utils.h	/^    ARCHITECTURE_ARM64,$/;"	e	enum:Architecture
ARCHITECTURE_COUNT	src/utils.h	/^    ARCHITECTURE_COUNT$/;"	e	enum:Architecture
ARCHITECTURE_NULL	src/utils.h	/^    ARCHITECTURE_NULL,$/;"	e	enum:Architecture
ARCHITECTURE_X64	src/utils.h	/^    ARCHITECTURE_X64,$/;"	e	enum:Architecture
ARCHITECTURE_X86	src/utils.h	/^    ARCHITECTURE_X86,$/;"	e	enum:Architecture
ARCH_ARM	src/utils.h	/^#define ARCH_ARM /;"	d
ARCH_ARM	src/utils.h	/^#undef ARCH_ARM$/;"	d
ARCH_ARM64	src/utils.h	/^#define ARCH_ARM64 /;"	d
ARCH_ARM64	src/utils.h	/^#undef ARCH_ARM64$/;"	d
ARCH_X64	src/utils.h	/^#define ARCH_X64 /;"	d
ARCH_X64	src/utils.h	/^#define ARCH_X64$/;"	d
ARCH_X64	src/utils.h	/^#undef ARCH_X64$/;"	d
ARCH_X86	src/utils.h	/^#define ARCH_X86 /;"	d
ARCH_X86	src/utils.h	/^#undef ARCH_X86$/;"	d
ARENA_PUSH_ARRAY	src/og_allocators.h	/^#define ARENA_PUSH_ARRAY(/;"	d
ARENA_PUSH_ARRAYALIGNED	src/og_allocators.h	/^#define ARENA_PUSH_ARRAYALIGNED(/;"	d
ARENA_PUSH_STRUCT	src/og_allocators.h	/^#define ARENA_PUSH_STRUCT(/;"	d
ARENA_PUSH_STRUCTALIGNED	src/og_allocators.h	/^#define ARENA_PUSH_STRUCTALIGNED(/;"	d
ARRAY_COUNT	src/utils.h	/^#define ARRAY_COUNT(/;"	d
ASSERT	src/utils.h	/^#define ASSERT(/;"	d
ASSERT	src/utils.h	/^#undef ASSERT$/;"	d
ASSERT_BREAK	src/utils.h	/^#define ASSERT_BREAK(/;"	d
AXIS_W	src/utils.h	/^    AXIS_W$/;"	e	enum:Axis
AXIS_Y	src/utils.h	/^    AXIS_Y,$/;"	e	enum:Axis
AXIS_Z	src/utils.h	/^    AXIS_Z,$/;"	e	enum:Axis
AXIX_X	src/utils.h	/^    AXIX_X,$/;"	e	enum:Axis
Architecture	src/utils.h	/^typedef enum Architecture {$/;"	g
Architecture	src/utils.h	/^} Architecture;$/;"	t	typeref:enum:Architecture
Arena	src/og_allocators.h	/^} Arena;$/;"	t	typeref:struct:__anon32
Arena	src/utils.h	/^typedef struct Arena {$/;"	s
Arena	src/utils.h	/^} Arena;$/;"	t	typeref:struct:Arena
Axis	src/utils.h	/^typedef enum Axis {$/;"	g
Axis	src/utils.h	/^} Axis;$/;"	t	typeref:enum:Axis
Big	include/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	s	struct:nk_alignof
CC	makefile	/^CC = clang$/;"	m
CFLAGS	makefile	/^CFLAGS = `sdl2-config --cflags --libs` $(INCLUDE) $(WARNINGS) src\/sdl2_main.c -g$/;"	m
CLAMP	src/utils.h	/^#define CLAMP(/;"	d
CLAMP_BOT	src/utils.h	/^#define CLAMP_BOT(/;"	d
CLAMP_TOP	src/utils.h	/^#define CLAMP_TOP(/;"	d
COMPILER_CL	src/utils.h	/^#define COMPILER_CL /;"	d
COMPILER_CL	src/utils.h	/^#undef COMPILER_CL$/;"	d
COMPILER_CLANG	src/utils.h	/^#define COMPILER_CLANG /;"	d
COMPILER_CLANG	src/utils.h	/^#undef COMPILER_CLANG$/;"	d
COMPILER_GCC	src/utils.h	/^#define COMPILER_GCC /;"	d
COMPILER_GCC	src/utils.h	/^#undef COMPILER_GCC$/;"	d
DAY_OF_WEEK_FRI	src/utils.h	/^    DAY_OF_WEEK_FRI,$/;"	e	enum:DayOfWeek
DAY_OF_WEEK_MON	src/utils.h	/^    DAY_OF_WEEK_MON,$/;"	e	enum:DayOfWeek
DAY_OF_WEEK_SAT	src/utils.h	/^    DAY_OF_WEEK_SAT,$/;"	e	enum:DayOfWeek
DAY_OF_WEEK_SUN	src/utils.h	/^    DAY_OF_WEEK_SUN,$/;"	e	enum:DayOfWeek
DAY_OF_WEEK_THU	src/utils.h	/^    DAY_OF_WEEK_THU,$/;"	e	enum:DayOfWeek
DAY_OF_WEEK_TUE	src/utils.h	/^    DAY_OF_WEEK_TUE,$/;"	e	enum:DayOfWeek
DAY_OF_WEEK_WED	src/utils.h	/^    DAY_OF_WEEK_WED,$/;"	e	enum:DayOfWeek
DEFAULT_ARENA_ALIGNMENT	src/og_allocators.h	/^#define DEFAULT_ARENA_ALIGNMENT /;"	d
DLL_PUSH_BACK	src/utils.h	/^#define DLL_PUSH_BACK(/;"	d
DLL_PUSH_BACK_NP	src/utils.h	/^#define DLL_PUSH_BACK_NP(/;"	d
DLL_PUSH_FRONT	src/utils.h	/^#define DLL_PUSH_FRONT(/;"	d
DLL_REMOVE	src/utils.h	/^#define DLL_REMOVE(/;"	d
DLL_REMOVE_NP	src/utils.h	/^#define DLL_REMOVE_NP(/;"	d
DayOfWeek	src/utils.h	/^typedef enum DayOfWeek {$/;"	g
DayOfWeek	src/utils.h	/^} DayOfWeek;$/;"	t	typeref:enum:DayOfWeek
GAME_H	src/game.h	/^#define GAME_H$/;"	d
GAME_IMPLEMENTATION	src/game.h	/^#undef GAME_IMPLEMENTATION$/;"	d
GAME_IMPLEMENTATION	src/sdl2_main.c	/^#define GAME_IMPLEMENTATION$/;"	d	file:
GB	src/utils.h	/^#define GB(/;"	d
GLUE	src/utils.h	/^#define GLUE(/;"	d
GLUE_	src/utils.h	/^#define GLUE_(/;"	d
Game	src/game.h	/^typedef struct Game {$/;"	s
Game	src/game.h	/^} Game; $/;"	t	typeref:struct:Game
INCLUDE	makefile	/^INCLUDE = -I.\/include\/ $/;"	m
IS_POWER_OF_2	src/utils.h	/^#define IS_POWER_OF_2(/;"	d
JAI_UTILS_IMPLEMENTATION	src/sdl2_main.c	/^#define JAI_UTILS_IMPLEMENTATION$/;"	d	file:
JAI_UTILS_IMPLEMENTATION	src/utils.h	/^#undef JAI_UTILS_IMPLEMENTATION$/;"	d
KB	src/utils.h	/^#define KB(/;"	d
LFLAGS	makefile	/^LFLAGS = -lm$/;"	m
MAX	src/utils.h	/^#define MAX(/;"	d
MB	src/utils.h	/^#define MB(/;"	d
MEMBER	src/utils.h	/^#define MEMBER(/;"	d
MEMORY_COPY	src/utils.h	/^#define MEMORY_COPY(/;"	d
MEMORY_COPY_ARRAY	src/utils.h	/^#define MEMORY_COPY_ARRAY(/;"	d
MEMORY_COPY_STRUCT	src/utils.h	/^#define MEMORY_COPY_STRUCT(/;"	d
MEMORY_COPY_TYPED	src/utils.h	/^#define MEMORY_COPY_TYPED(/;"	d
MEMORY_MATCH	src/utils.h	/^#define MEMORY_MATCH(/;"	d
MEMORY_ZERO	src/utils.h	/^#define MEMORY_ZERO(/;"	d
MEMORY_ZERO_ARRAY	src/utils.h	/^#define MEMORY_ZERO_ARRAY(/;"	d
MEMORY_ZERO_STRUCT	src/utils.h	/^#define MEMORY_ZERO_STRUCT(/;"	d
MEMORY_ZERO_TYPED	src/utils.h	/^#define MEMORY_ZERO_TYPED(/;"	d
MIN	src/utils.h	/^#define MIN(/;"	d
MONTH_APR	src/utils.h	/^    MONTH_APR,$/;"	e	enum:Month
MONTH_AUG	src/utils.h	/^    MONTH_AUG,$/;"	e	enum:Month
MONTH_DEC	src/utils.h	/^    MONTH_DEC,$/;"	e	enum:Month
MONTH_FEB	src/utils.h	/^    MONTH_FEB,$/;"	e	enum:Month
MONTH_JAN	src/utils.h	/^    MONTH_JAN,$/;"	e	enum:Month
MONTH_JUL	src/utils.h	/^    MONTH_JUL,$/;"	e	enum:Month
MONTH_JUN	src/utils.h	/^    MONTH_JUN,$/;"	e	enum:Month
MONTH_MAR	src/utils.h	/^    MONTH_MAR,$/;"	e	enum:Month
MONTH_MAY	src/utils.h	/^    MONTH_MAY,$/;"	e	enum:Month
MONTH_NOV	src/utils.h	/^    MONTH_NOV,$/;"	e	enum:Month
MONTH_OCT	src/utils.h	/^    MONTH_OCT,$/;"	e	enum:Month
MONTH_SEP	src/utils.h	/^    MONTH_SEP,$/;"	e	enum:Month
Month	src/utils.h	/^typedef enum Month {$/;"	g
Month	src/utils.h	/^} Month;$/;"	t	typeref:enum:Month
NK_ABS	include/nuklear.h	/^#define NK_ABS(/;"	d
NK_ADJACENCY_BONUS	include/nuklear.h	/^    #define NK_ADJACENCY_BONUS /;"	d
NK_ALIGNOF	include/nuklear.h	/^#define NK_ALIGNOF(/;"	d
NK_ALIGN_PTR	include/nuklear.h	/^#define NK_ALIGN_PTR(/;"	d
NK_ALIGN_PTR_BACK	include/nuklear.h	/^#define NK_ALIGN_PTR_BACK(/;"	d
NK_ANTI_ALIASING_OFF	include/nuklear.h	/^enum nk_anti_aliasing {NK_ANTI_ALIASING_OFF, NK_ANTI_ALIASING_ON};$/;"	e	enum:nk_anti_aliasing
NK_ANTI_ALIASING_ON	include/nuklear.h	/^enum nk_anti_aliasing {NK_ANTI_ALIASING_OFF, NK_ANTI_ALIASING_ON};$/;"	e	enum:nk_anti_aliasing
NK_API	include/nuklear.h	/^      #define NK_API /;"	d
NK_API	include/nuklear.h	/^    #define NK_API /;"	d
NK_ASSERT	include/nuklear.h	/^#define NK_ASSERT(/;"	d
NK_BETWEEN	include/nuklear.h	/^#define NK_BETWEEN(/;"	d
NK_BUFFER_BACK	include/nuklear.h	/^    NK_BUFFER_BACK,$/;"	e	enum:nk_buffer_allocation_type
NK_BUFFER_DEFAULT_INITIAL_SIZE	include/nuklear.h	/^#define NK_BUFFER_DEFAULT_INITIAL_SIZE /;"	d
NK_BUFFER_DYNAMIC	include/nuklear.h	/^    NK_BUFFER_DYNAMIC$/;"	e	enum:nk_allocation_type
NK_BUFFER_FIXED	include/nuklear.h	/^    NK_BUFFER_FIXED,$/;"	e	enum:nk_allocation_type
NK_BUFFER_FRONT	include/nuklear.h	/^    NK_BUFFER_FRONT,$/;"	e	enum:nk_buffer_allocation_type
NK_BUFFER_MAX	include/nuklear.h	/^    NK_BUFFER_MAX$/;"	e	enum:nk_buffer_allocation_type
NK_BUTTON_BEHAVIOR_STACK_SIZE	include/nuklear.h	/^#define NK_BUTTON_BEHAVIOR_STACK_SIZE /;"	d
NK_BUTTON_DEFAULT	include/nuklear.h	/^enum nk_button_behavior {NK_BUTTON_DEFAULT, NK_BUTTON_REPEATER};$/;"	e	enum:nk_button_behavior
NK_BUTTON_DOUBLE	include/nuklear.h	/^    NK_BUTTON_DOUBLE,$/;"	e	enum:nk_buttons
NK_BUTTON_LEFT	include/nuklear.h	/^    NK_BUTTON_LEFT,$/;"	e	enum:nk_buttons
NK_BUTTON_MAX	include/nuklear.h	/^    NK_BUTTON_MAX$/;"	e	enum:nk_buttons
NK_BUTTON_MIDDLE	include/nuklear.h	/^    NK_BUTTON_MIDDLE,$/;"	e	enum:nk_buttons
NK_BUTTON_REPEATER	include/nuklear.h	/^enum nk_button_behavior {NK_BUTTON_DEFAULT, NK_BUTTON_REPEATER};$/;"	e	enum:nk_button_behavior
NK_BUTTON_RIGHT	include/nuklear.h	/^    NK_BUTTON_RIGHT,$/;"	e	enum:nk_buttons
NK_CAMEL_BONUS	include/nuklear.h	/^    #define NK_CAMEL_BONUS /;"	d
NK_CHART_CLICKED	include/nuklear.h	/^enum nk_chart_event     {NK_CHART_HOVERING = 0x01, NK_CHART_CLICKED = 0x02};$/;"	e	enum:nk_chart_event
NK_CHART_COLUMN	include/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	e	enum:nk_chart_type
NK_CHART_HOVERING	include/nuklear.h	/^enum nk_chart_event     {NK_CHART_HOVERING = 0x01, NK_CHART_CLICKED = 0x02};$/;"	e	enum:nk_chart_event
NK_CHART_LINES	include/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	e	enum:nk_chart_type
NK_CHART_MAX	include/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	e	enum:nk_chart_type
NK_CHART_MAX_SLOT	include/nuklear.h	/^#define NK_CHART_MAX_SLOT /;"	d
NK_CLAMP	include/nuklear.h	/^#define NK_CLAMP(/;"	d
NK_CLIPPING_OFF	include/nuklear.h	/^    NK_CLIPPING_OFF = nk_false,$/;"	e	enum:nk_command_clipping
NK_CLIPPING_ON	include/nuklear.h	/^    NK_CLIPPING_ON = nk_true$/;"	e	enum:nk_command_clipping
NK_COLOR	include/nuklear.h	/^#define NK_COLOR(/;"	d
NK_COLOR	include/nuklear.h	/^#undef NK_COLOR$/;"	d
NK_COLOR_BORDER	include/nuklear.h	/^    NK_COLOR_BORDER,$/;"	e	enum:nk_style_colors
NK_COLOR_BUTTON	include/nuklear.h	/^    NK_COLOR_BUTTON,$/;"	e	enum:nk_style_colors
NK_COLOR_BUTTON_ACTIVE	include/nuklear.h	/^    NK_COLOR_BUTTON_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_BUTTON_HOVER	include/nuklear.h	/^    NK_COLOR_BUTTON_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_CHART	include/nuklear.h	/^    NK_COLOR_CHART,$/;"	e	enum:nk_style_colors
NK_COLOR_CHART_COLOR	include/nuklear.h	/^    NK_COLOR_CHART_COLOR,$/;"	e	enum:nk_style_colors
NK_COLOR_CHART_COLOR_HIGHLIGHT	include/nuklear.h	/^    NK_COLOR_CHART_COLOR_HIGHLIGHT,$/;"	e	enum:nk_style_colors
NK_COLOR_COMBO	include/nuklear.h	/^    NK_COLOR_COMBO,$/;"	e	enum:nk_style_colors
NK_COLOR_COUNT	include/nuklear.h	/^    NK_COLOR_COUNT$/;"	e	enum:nk_style_colors
NK_COLOR_EDIT	include/nuklear.h	/^    NK_COLOR_EDIT,$/;"	e	enum:nk_style_colors
NK_COLOR_EDIT_CURSOR	include/nuklear.h	/^    NK_COLOR_EDIT_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_HEADER	include/nuklear.h	/^    NK_COLOR_HEADER,$/;"	e	enum:nk_style_colors
NK_COLOR_MAP	include/nuklear.h	/^#define NK_COLOR_MAP(/;"	d
NK_COLOR_PROPERTY	include/nuklear.h	/^    NK_COLOR_PROPERTY,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR	include/nuklear.h	/^    NK_COLOR_SCROLLBAR,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR_CURSOR	include/nuklear.h	/^    NK_COLOR_SCROLLBAR_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR_CURSOR_ACTIVE	include/nuklear.h	/^    NK_COLOR_SCROLLBAR_CURSOR_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_SCROLLBAR_CURSOR_HOVER	include/nuklear.h	/^    NK_COLOR_SCROLLBAR_CURSOR_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_SELECT	include/nuklear.h	/^    NK_COLOR_SELECT,$/;"	e	enum:nk_style_colors
NK_COLOR_SELECT_ACTIVE	include/nuklear.h	/^    NK_COLOR_SELECT_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER	include/nuklear.h	/^    NK_COLOR_SLIDER,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER_CURSOR	include/nuklear.h	/^    NK_COLOR_SLIDER_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER_CURSOR_ACTIVE	include/nuklear.h	/^    NK_COLOR_SLIDER_CURSOR_ACTIVE,$/;"	e	enum:nk_style_colors
NK_COLOR_SLIDER_CURSOR_HOVER	include/nuklear.h	/^    NK_COLOR_SLIDER_CURSOR_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_STACK_SIZE	include/nuklear.h	/^#define NK_COLOR_STACK_SIZE /;"	d
NK_COLOR_TAB_HEADER	include/nuklear.h	/^    NK_COLOR_TAB_HEADER,$/;"	e	enum:nk_style_colors
NK_COLOR_TEXT	include/nuklear.h	/^    NK_COLOR_TEXT,$/;"	e	enum:nk_style_colors
NK_COLOR_TOGGLE	include/nuklear.h	/^    NK_COLOR_TOGGLE,$/;"	e	enum:nk_style_colors
NK_COLOR_TOGGLE_CURSOR	include/nuklear.h	/^    NK_COLOR_TOGGLE_CURSOR,$/;"	e	enum:nk_style_colors
NK_COLOR_TOGGLE_HOVER	include/nuklear.h	/^    NK_COLOR_TOGGLE_HOVER,$/;"	e	enum:nk_style_colors
NK_COLOR_WINDOW	include/nuklear.h	/^    NK_COLOR_WINDOW,$/;"	e	enum:nk_style_colors
NK_COMMAND_ARC	include/nuklear.h	/^    NK_COMMAND_ARC,$/;"	e	enum:nk_command_type
NK_COMMAND_ARC_FILLED	include/nuklear.h	/^    NK_COMMAND_ARC_FILLED,$/;"	e	enum:nk_command_type
NK_COMMAND_CIRCLE	include/nuklear.h	/^    NK_COMMAND_CIRCLE,$/;"	e	enum:nk_command_type
NK_COMMAND_CIRCLE_FILLED	include/nuklear.h	/^    NK_COMMAND_CIRCLE_FILLED,$/;"	e	enum:nk_command_type
NK_COMMAND_CURVE	include/nuklear.h	/^    NK_COMMAND_CURVE,$/;"	e	enum:nk_command_type
NK_COMMAND_CUSTOM	include/nuklear.h	/^    NK_COMMAND_CUSTOM$/;"	e	enum:nk_command_type
NK_COMMAND_IMAGE	include/nuklear.h	/^    NK_COMMAND_IMAGE,$/;"	e	enum:nk_command_type
NK_COMMAND_LINE	include/nuklear.h	/^    NK_COMMAND_LINE,$/;"	e	enum:nk_command_type
NK_COMMAND_NOP	include/nuklear.h	/^    NK_COMMAND_NOP,$/;"	e	enum:nk_command_type
NK_COMMAND_POLYGON	include/nuklear.h	/^    NK_COMMAND_POLYGON,$/;"	e	enum:nk_command_type
NK_COMMAND_POLYGON_FILLED	include/nuklear.h	/^    NK_COMMAND_POLYGON_FILLED,$/;"	e	enum:nk_command_type
NK_COMMAND_POLYLINE	include/nuklear.h	/^    NK_COMMAND_POLYLINE,$/;"	e	enum:nk_command_type
NK_COMMAND_RECT	include/nuklear.h	/^    NK_COMMAND_RECT,$/;"	e	enum:nk_command_type
NK_COMMAND_RECT_FILLED	include/nuklear.h	/^    NK_COMMAND_RECT_FILLED,$/;"	e	enum:nk_command_type
NK_COMMAND_RECT_MULTI_COLOR	include/nuklear.h	/^    NK_COMMAND_RECT_MULTI_COLOR,$/;"	e	enum:nk_command_type
NK_COMMAND_SCISSOR	include/nuklear.h	/^    NK_COMMAND_SCISSOR,$/;"	e	enum:nk_command_type
NK_COMMAND_TEXT	include/nuklear.h	/^    NK_COMMAND_TEXT,$/;"	e	enum:nk_command_type
NK_COMMAND_TRIANGLE	include/nuklear.h	/^    NK_COMMAND_TRIANGLE,$/;"	e	enum:nk_command_type
NK_COMMAND_TRIANGLE_FILLED	include/nuklear.h	/^    NK_COMMAND_TRIANGLE_FILLED,$/;"	e	enum:nk_command_type
NK_CONFIGURATION_STACK_TYPE	include/nuklear.h	/^#define NK_CONFIGURATION_STACK_TYPE(/;"	d
NK_CONFIG_STACK	include/nuklear.h	/^#define NK_CONFIG_STACK(/;"	d
NK_CONTAINER_OF	include/nuklear.h	/^#define NK_CONTAINER_OF(/;"	d
NK_CONTAINS	include/nuklear.h	/^#define NK_CONTAINS(/;"	d
NK_CONVERT_COMMAND_BUFFER_FULL	include/nuklear.h	/^    NK_CONVERT_COMMAND_BUFFER_FULL = NK_FLAG(1),$/;"	e	enum:nk_convert_result
NK_CONVERT_ELEMENT_BUFFER_FULL	include/nuklear.h	/^    NK_CONVERT_ELEMENT_BUFFER_FULL = NK_FLAG(3)$/;"	e	enum:nk_convert_result
NK_CONVERT_INVALID_PARAM	include/nuklear.h	/^    NK_CONVERT_INVALID_PARAM = 1,$/;"	e	enum:nk_convert_result
NK_CONVERT_SUCCESS	include/nuklear.h	/^    NK_CONVERT_SUCCESS = 0,$/;"	e	enum:nk_convert_result
NK_CONVERT_VERTEX_BUFFER_FULL	include/nuklear.h	/^    NK_CONVERT_VERTEX_BUFFER_FULL = NK_FLAG(2),$/;"	e	enum:nk_convert_result
NK_COORD_PIXEL	include/nuklear.h	/^    NK_COORD_PIXEL \/* texture coordinates inside font glyphs are in absolute pixel *\/$/;"	e	enum:nk_font_coord_type
NK_COORD_UV	include/nuklear.h	/^    NK_COORD_UV, \/* texture coordinates inside font glyphs are clamped between 0-1 *\/$/;"	e	enum:nk_font_coord_type
NK_COS	include/nuklear.h	/^#define NK_COS /;"	d
NK_CURSOR_ARROW	include/nuklear.h	/^    NK_CURSOR_ARROW,$/;"	e	enum:nk_style_cursor
NK_CURSOR_COUNT	include/nuklear.h	/^    NK_CURSOR_COUNT$/;"	e	enum:nk_style_cursor
NK_CURSOR_DATA_H	include/nuklear.h	/^#define NK_CURSOR_DATA_H /;"	d
NK_CURSOR_DATA_W	include/nuklear.h	/^#define NK_CURSOR_DATA_W /;"	d
NK_CURSOR_MOVE	include/nuklear.h	/^    NK_CURSOR_MOVE,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_HORIZONTAL	include/nuklear.h	/^    NK_CURSOR_RESIZE_HORIZONTAL,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT	include/nuklear.h	/^    NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT	include/nuklear.h	/^    NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT,$/;"	e	enum:nk_style_cursor
NK_CURSOR_RESIZE_VERTICAL	include/nuklear.h	/^    NK_CURSOR_RESIZE_VERTICAL,$/;"	e	enum:nk_style_cursor
NK_CURSOR_TEXT	include/nuklear.h	/^    NK_CURSOR_TEXT,$/;"	e	enum:nk_style_cursor
NK_DEFAULT	include/nuklear.h	/^#define NK_DEFAULT /;"	d
NK_DEFAULT_COMMAND_BUFFER_SIZE	include/nuklear.h	/^#define NK_DEFAULT_COMMAND_BUFFER_SIZE /;"	d
NK_DOWN	include/nuklear.h	/^enum nk_heading         {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
NK_DO_NOT_STOP_ON_NEW_LINE	include/nuklear.h	/^enum {NK_DO_NOT_STOP_ON_NEW_LINE, NK_STOP_ON_NEW_LINE};$/;"	e	enum:__anon6
NK_DTOA	include/nuklear.h	/^#define NK_DTOA /;"	d
NK_DYNAMIC	include/nuklear.h	/^enum nk_layout_format   {NK_DYNAMIC, NK_STATIC};$/;"	e	enum:nk_layout_format
NK_EDIT_ACTIVATED	include/nuklear.h	/^    NK_EDIT_ACTIVATED   = NK_FLAG(2), \/* edit widget went from state inactive to state active *\/$/;"	e	enum:nk_edit_events
NK_EDIT_ACTIVE	include/nuklear.h	/^    NK_EDIT_ACTIVE      = NK_FLAG(0), \/* edit widget is currently being modified *\/$/;"	e	enum:nk_edit_events
NK_EDIT_ALLOW_TAB	include/nuklear.h	/^    NK_EDIT_ALLOW_TAB               = NK_FLAG(3),$/;"	e	enum:nk_edit_flags
NK_EDIT_ALWAYS_INSERT_MODE	include/nuklear.h	/^    NK_EDIT_ALWAYS_INSERT_MODE      = NK_FLAG(9),$/;"	e	enum:nk_edit_flags
NK_EDIT_AUTO_SELECT	include/nuklear.h	/^    NK_EDIT_AUTO_SELECT             = NK_FLAG(1),$/;"	e	enum:nk_edit_flags
NK_EDIT_BOX	include/nuklear.h	/^    NK_EDIT_BOX     = NK_EDIT_ALWAYS_INSERT_MODE| NK_EDIT_SELECTABLE| NK_EDIT_MULTILINE|NK_EDIT_ALLOW_TAB|NK_EDIT_CLIPBOARD,$/;"	e	enum:nk_edit_types
NK_EDIT_CLIPBOARD	include/nuklear.h	/^    NK_EDIT_CLIPBOARD               = NK_FLAG(6),$/;"	e	enum:nk_edit_flags
NK_EDIT_COMMITED	include/nuklear.h	/^    NK_EDIT_COMMITED    = NK_FLAG(4) \/* edit widget has received an enter and lost focus *\/$/;"	e	enum:nk_edit_events
NK_EDIT_CTRL_ENTER_NEWLINE	include/nuklear.h	/^    NK_EDIT_CTRL_ENTER_NEWLINE      = NK_FLAG(7),$/;"	e	enum:nk_edit_flags
NK_EDIT_DEACTIVATED	include/nuklear.h	/^    NK_EDIT_DEACTIVATED = NK_FLAG(3), \/* edit widget went from state active to state inactive *\/$/;"	e	enum:nk_edit_events
NK_EDIT_DEFAULT	include/nuklear.h	/^    NK_EDIT_DEFAULT                 = 0,$/;"	e	enum:nk_edit_flags
NK_EDIT_EDITOR	include/nuklear.h	/^    NK_EDIT_EDITOR  = NK_EDIT_SELECTABLE|NK_EDIT_MULTILINE|NK_EDIT_ALLOW_TAB| NK_EDIT_CLIPBOARD$/;"	e	enum:nk_edit_types
NK_EDIT_FIELD	include/nuklear.h	/^    NK_EDIT_FIELD   = NK_EDIT_SIMPLE|NK_EDIT_SELECTABLE|NK_EDIT_CLIPBOARD,$/;"	e	enum:nk_edit_types
NK_EDIT_GOTO_END_ON_ACTIVATE	include/nuklear.h	/^    NK_EDIT_GOTO_END_ON_ACTIVATE    = NK_FLAG(11)$/;"	e	enum:nk_edit_flags
NK_EDIT_INACTIVE	include/nuklear.h	/^    NK_EDIT_INACTIVE    = NK_FLAG(1), \/* edit widget is not active and is not being modified *\/$/;"	e	enum:nk_edit_events
NK_EDIT_MULTILINE	include/nuklear.h	/^    NK_EDIT_MULTILINE               = NK_FLAG(10),$/;"	e	enum:nk_edit_flags
NK_EDIT_NO_CURSOR	include/nuklear.h	/^    NK_EDIT_NO_CURSOR               = NK_FLAG(4),$/;"	e	enum:nk_edit_flags
NK_EDIT_NO_HORIZONTAL_SCROLL	include/nuklear.h	/^    NK_EDIT_NO_HORIZONTAL_SCROLL    = NK_FLAG(8),$/;"	e	enum:nk_edit_flags
NK_EDIT_READ_ONLY	include/nuklear.h	/^    NK_EDIT_READ_ONLY               = NK_FLAG(0),$/;"	e	enum:nk_edit_flags
NK_EDIT_SELECTABLE	include/nuklear.h	/^    NK_EDIT_SELECTABLE              = NK_FLAG(5),$/;"	e	enum:nk_edit_flags
NK_EDIT_SIG_ENTER	include/nuklear.h	/^    NK_EDIT_SIG_ENTER               = NK_FLAG(2),$/;"	e	enum:nk_edit_flags
NK_EDIT_SIMPLE	include/nuklear.h	/^    NK_EDIT_SIMPLE  = NK_EDIT_ALWAYS_INSERT_MODE,$/;"	e	enum:nk_edit_types
NK_FILE_LINE	include/nuklear.h	/^  #define NK_FILE_LINE /;"	d
NK_FILTER_FLOAT	include/nuklear.h	/^    NK_FILTER_FLOAT$/;"	e	enum:nk_property_filter
NK_FILTER_INT	include/nuklear.h	/^    NK_FILTER_INT,$/;"	e	enum:nk_property_filter
NK_FIXED	include/nuklear.h	/^enum nk_modify          {NK_FIXED = nk_false, NK_MODIFIABLE = nk_true};$/;"	e	enum:nk_modify
NK_FLAG	include/nuklear.h	/^#define NK_FLAG(/;"	d
NK_FLAGS_STACK_SIZE	include/nuklear.h	/^#define NK_FLAGS_STACK_SIZE /;"	d
NK_FLOAT_PRECISION	include/nuklear.h	/^#define NK_FLOAT_PRECISION /;"	d
NK_FLOAT_STACK_SIZE	include/nuklear.h	/^#define NK_FLOAT_STACK_SIZE /;"	d
NK_FONT_ATLAS_ALPHA8	include/nuklear.h	/^    NK_FONT_ATLAS_ALPHA8,$/;"	e	enum:nk_font_atlas_format
NK_FONT_ATLAS_RGBA32	include/nuklear.h	/^    NK_FONT_ATLAS_RGBA32$/;"	e	enum:nk_font_atlas_format
NK_FONT_STACK_SIZE	include/nuklear.h	/^#define NK_FONT_STACK_SIZE /;"	d
NK_FORMAT_B8G8R8A8	include/nuklear.h	/^    NK_FORMAT_B8G8R8A8,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_COLOR_BEGIN	include/nuklear.h	/^NK_FORMAT_COLOR_BEGIN,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_COLOR_END	include/nuklear.h	/^NK_FORMAT_COLOR_END = NK_FORMAT_RGBA32,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_COUNT	include/nuklear.h	/^    NK_FORMAT_COUNT$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_DOUBLE	include/nuklear.h	/^    NK_FORMAT_DOUBLE,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_FLOAT	include/nuklear.h	/^    NK_FORMAT_FLOAT,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_R16G15B16	include/nuklear.h	/^    NK_FORMAT_R16G15B16,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_R16G15B16A16	include/nuklear.h	/^    NK_FORMAT_R16G15B16A16,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_R32G32B32	include/nuklear.h	/^    NK_FORMAT_R32G32B32,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_R32G32B32A32	include/nuklear.h	/^    NK_FORMAT_R32G32B32A32,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_R32G32B32A32_DOUBLE	include/nuklear.h	/^    NK_FORMAT_R32G32B32A32_DOUBLE,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_R32G32B32A32_FLOAT	include/nuklear.h	/^    NK_FORMAT_R32G32B32A32_FLOAT,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_R8G8B8	include/nuklear.h	/^    NK_FORMAT_R8G8B8 = NK_FORMAT_COLOR_BEGIN,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_R8G8B8A8	include/nuklear.h	/^    NK_FORMAT_R8G8B8A8,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_RGB32	include/nuklear.h	/^    NK_FORMAT_RGB32,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_RGBA32	include/nuklear.h	/^    NK_FORMAT_RGBA32,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_SCHAR	include/nuklear.h	/^    NK_FORMAT_SCHAR,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_SINT	include/nuklear.h	/^    NK_FORMAT_SINT,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_SSHORT	include/nuklear.h	/^    NK_FORMAT_SSHORT,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_UCHAR	include/nuklear.h	/^    NK_FORMAT_UCHAR,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_UINT	include/nuklear.h	/^    NK_FORMAT_UINT,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FORMAT_USHORT	include/nuklear.h	/^    NK_FORMAT_USHORT,$/;"	e	enum:nk_draw_vertex_layout_format
NK_FRAC	include/nuklear.h	/^    #define NK_FRAC(/;"	d
NK_FRAC	include/nuklear.h	/^    #undef NK_FRAC$/;"	d
NK_GLOBAL	include/nuklear.h	/^#define NK_GLOBAL /;"	d
NK_HEADER_LEFT	include/nuklear.h	/^    NK_HEADER_LEFT,$/;"	e	enum:nk_style_header_align
NK_HEADER_RIGHT	include/nuklear.h	/^    NK_HEADER_RIGHT$/;"	e	enum:nk_style_header_align
NK_HIDDEN	include/nuklear.h	/^enum nk_show_states     {NK_HIDDEN = nk_false, NK_SHOWN = nk_true};$/;"	e	enum:nk_show_states
NK_HORIZONTAL	include/nuklear.h	/^enum nk_orientation     {NK_VERTICAL, NK_HORIZONTAL};$/;"	e	enum:nk_orientation
NK_IMPLEMENTATION	src/sdl2_main.c	/^#define NK_IMPLEMENTATION$/;"	d	file:
NK_INBOX	include/nuklear.h	/^#define NK_INBOX(/;"	d
NK_INPUT_MAX	include/nuklear.h	/^  #define NK_INPUT_MAX /;"	d
NK_INSERT_BACK	include/nuklear.h	/^    NK_INSERT_BACK, \/* inserts window into the back of list (front of screen) *\/$/;"	e	enum:nk_window_insert_location
NK_INSERT_FRONT	include/nuklear.h	/^    NK_INSERT_FRONT \/* inserts window into the front of list (back of screen) *\/$/;"	e	enum:nk_window_insert_location
NK_INT16	include/nuklear.h	/^    #define NK_INT16 /;"	d
NK_INT16	include/nuklear.h	/^ #define NK_INT16 /;"	d
NK_INT32	include/nuklear.h	/^      #define NK_INT32 /;"	d
NK_INT32	include/nuklear.h	/^ #define NK_INT32 /;"	d
NK_INT8	include/nuklear.h	/^    #define NK_INT8 /;"	d
NK_INT8	include/nuklear.h	/^ #define NK_INT8 /;"	d
NK_INTERN	include/nuklear.h	/^#define NK_INTERN /;"	d
NK_INTERNAL_H	include/nuklear.h	/^#define NK_INTERNAL_H$/;"	d
NK_INTERSECT	include/nuklear.h	/^#define NK_INTERSECT(/;"	d
NK_KEY_BACKSPACE	include/nuklear.h	/^    NK_KEY_BACKSPACE,$/;"	e	enum:nk_keys
NK_KEY_COPY	include/nuklear.h	/^    NK_KEY_COPY,$/;"	e	enum:nk_keys
NK_KEY_CTRL	include/nuklear.h	/^    NK_KEY_CTRL,$/;"	e	enum:nk_keys
NK_KEY_CUT	include/nuklear.h	/^    NK_KEY_CUT,$/;"	e	enum:nk_keys
NK_KEY_DEL	include/nuklear.h	/^    NK_KEY_DEL,$/;"	e	enum:nk_keys
NK_KEY_DOWN	include/nuklear.h	/^    NK_KEY_DOWN,$/;"	e	enum:nk_keys
NK_KEY_ENTER	include/nuklear.h	/^    NK_KEY_ENTER,$/;"	e	enum:nk_keys
NK_KEY_LEFT	include/nuklear.h	/^    NK_KEY_LEFT,$/;"	e	enum:nk_keys
NK_KEY_MAX	include/nuklear.h	/^    NK_KEY_MAX$/;"	e	enum:nk_keys
NK_KEY_NONE	include/nuklear.h	/^    NK_KEY_NONE,$/;"	e	enum:nk_keys
NK_KEY_PASTE	include/nuklear.h	/^    NK_KEY_PASTE,$/;"	e	enum:nk_keys
NK_KEY_RIGHT	include/nuklear.h	/^    NK_KEY_RIGHT,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_DOWN	include/nuklear.h	/^    NK_KEY_SCROLL_DOWN,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_END	include/nuklear.h	/^    NK_KEY_SCROLL_END,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_START	include/nuklear.h	/^    NK_KEY_SCROLL_START,$/;"	e	enum:nk_keys
NK_KEY_SCROLL_UP	include/nuklear.h	/^    NK_KEY_SCROLL_UP,$/;"	e	enum:nk_keys
NK_KEY_SHIFT	include/nuklear.h	/^    NK_KEY_SHIFT,$/;"	e	enum:nk_keys
NK_KEY_TAB	include/nuklear.h	/^    NK_KEY_TAB,$/;"	e	enum:nk_keys
NK_KEY_TEXT_END	include/nuklear.h	/^    NK_KEY_TEXT_END,$/;"	e	enum:nk_keys
NK_KEY_TEXT_INSERT_MODE	include/nuklear.h	/^    NK_KEY_TEXT_INSERT_MODE,$/;"	e	enum:nk_keys
NK_KEY_TEXT_LINE_END	include/nuklear.h	/^    NK_KEY_TEXT_LINE_END,$/;"	e	enum:nk_keys
NK_KEY_TEXT_LINE_START	include/nuklear.h	/^    NK_KEY_TEXT_LINE_START,$/;"	e	enum:nk_keys
NK_KEY_TEXT_REDO	include/nuklear.h	/^    NK_KEY_TEXT_REDO,$/;"	e	enum:nk_keys
NK_KEY_TEXT_REPLACE_MODE	include/nuklear.h	/^    NK_KEY_TEXT_REPLACE_MODE,$/;"	e	enum:nk_keys
NK_KEY_TEXT_RESET_MODE	include/nuklear.h	/^    NK_KEY_TEXT_RESET_MODE,$/;"	e	enum:nk_keys
NK_KEY_TEXT_SELECT_ALL	include/nuklear.h	/^    NK_KEY_TEXT_SELECT_ALL,$/;"	e	enum:nk_keys
NK_KEY_TEXT_START	include/nuklear.h	/^    NK_KEY_TEXT_START,$/;"	e	enum:nk_keys
NK_KEY_TEXT_UNDO	include/nuklear.h	/^    NK_KEY_TEXT_UNDO,$/;"	e	enum:nk_keys
NK_KEY_TEXT_WORD_LEFT	include/nuklear.h	/^    NK_KEY_TEXT_WORD_LEFT,$/;"	e	enum:nk_keys
NK_KEY_TEXT_WORD_RIGHT	include/nuklear.h	/^    NK_KEY_TEXT_WORD_RIGHT,$/;"	e	enum:nk_keys
NK_KEY_UP	include/nuklear.h	/^    NK_KEY_UP,$/;"	e	enum:nk_keys
NK_LAYOUT_COUNT	include/nuklear.h	/^    NK_LAYOUT_COUNT$/;"	e	enum:nk_panel_row_layout_type
NK_LAYOUT_DYNAMIC	include/nuklear.h	/^    NK_LAYOUT_DYNAMIC,$/;"	e	enum:nk_panel_row_layout_type
NK_LAYOUT_DYNAMIC_FIXED	include/nuklear.h	/^    NK_LAYOUT_DYNAMIC_FIXED = 0,$/;"	e	enum:nk_panel_row_layout_type
NK_LAYOUT_DYNAMIC_FREE	include/nuklear.h	/^    NK_LAYOUT_DYNAMIC_FREE,$/;"	e	enum:nk_panel_row_layout_type
NK_LAYOUT_DYNAMIC_ROW	include/nuklear.h	/^    NK_LAYOUT_DYNAMIC_ROW,$/;"	e	enum:nk_panel_row_layout_type
NK_LAYOUT_STATIC	include/nuklear.h	/^    NK_LAYOUT_STATIC,$/;"	e	enum:nk_panel_row_layout_type
NK_LAYOUT_STATIC_FIXED	include/nuklear.h	/^    NK_LAYOUT_STATIC_FIXED,$/;"	e	enum:nk_panel_row_layout_type
NK_LAYOUT_STATIC_FREE	include/nuklear.h	/^    NK_LAYOUT_STATIC_FREE,$/;"	e	enum:nk_panel_row_layout_type
NK_LAYOUT_STATIC_ROW	include/nuklear.h	/^    NK_LAYOUT_STATIC_ROW,$/;"	e	enum:nk_panel_row_layout_type
NK_LAYOUT_TEMPLATE	include/nuklear.h	/^    NK_LAYOUT_TEMPLATE,$/;"	e	enum:nk_panel_row_layout_type
NK_LEADING_LETTER_PENALTY	include/nuklear.h	/^    #define NK_LEADING_LETTER_PENALTY /;"	d
NK_LEFT	include/nuklear.h	/^enum nk_heading         {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
NK_LEN	include/nuklear.h	/^#define NK_LEN(/;"	d
NK_LIB	include/nuklear.h	/^    #define NK_LIB /;"	d
NK_MACRO_STRINGIFY	include/nuklear.h	/^#define NK_MACRO_STRINGIFY(/;"	d
NK_MAX	include/nuklear.h	/^#define NK_MAX(/;"	d
NK_MAXIMIZED	include/nuklear.h	/^enum nk_collapse_states {NK_MINIMIZED = nk_false, NK_MAXIMIZED = nk_true};$/;"	e	enum:nk_collapse_states
NK_MAX_FLOAT_PRECISION	include/nuklear.h	/^#define NK_MAX_FLOAT_PRECISION /;"	d
NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS	include/nuklear.h	/^#define NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS /;"	d
NK_MAX_LEADING_LETTER_PENALTY	include/nuklear.h	/^    #define NK_MAX_LEADING_LETTER_PENALTY /;"	d
NK_MAX_NUMBER_BUFFER	include/nuklear.h	/^  #define NK_MAX_NUMBER_BUFFER /;"	d
NK_MAX_SORT_STACK	include/nuklear.h	/^    #define NK_MAX_SORT_STACK /;"	d
NK_MAX_SORT_STACK	include/nuklear.h	/^    #undef NK_MAX_SORT_STACK$/;"	d
NK_MEMCPY	include/nuklear.h	/^#define NK_MEMCPY /;"	d
NK_MEMSET	include/nuklear.h	/^#define NK_MEMSET /;"	d
NK_MIN	include/nuklear.h	/^#define NK_MIN(/;"	d
NK_MINIMIZED	include/nuklear.h	/^enum nk_collapse_states {NK_MINIMIZED = nk_false, NK_MAXIMIZED = nk_true};$/;"	e	enum:nk_collapse_states
NK_MODIFIABLE	include/nuklear.h	/^enum nk_modify          {NK_FIXED = nk_false, NK_MODIFIABLE = nk_true};$/;"	e	enum:nk_modify
NK_NUKLEAR_H_	include/nuklear.h	/^#define NK_NUKLEAR_H_$/;"	d
NK_OFFSETOF	include/nuklear.h	/^#define NK_OFFSETOF(/;"	d
NK_PANEL_COMBO	include/nuklear.h	/^    NK_PANEL_COMBO      = NK_FLAG(5),$/;"	e	enum:nk_panel_type
NK_PANEL_CONTEXTUAL	include/nuklear.h	/^    NK_PANEL_CONTEXTUAL = NK_FLAG(4),$/;"	e	enum:nk_panel_type
NK_PANEL_GROUP	include/nuklear.h	/^    NK_PANEL_GROUP      = NK_FLAG(1),$/;"	e	enum:nk_panel_type
NK_PANEL_MENU	include/nuklear.h	/^    NK_PANEL_MENU       = NK_FLAG(6),$/;"	e	enum:nk_panel_type
NK_PANEL_NONE	include/nuklear.h	/^    NK_PANEL_NONE       = 0,$/;"	e	enum:nk_panel_type
NK_PANEL_POPUP	include/nuklear.h	/^    NK_PANEL_POPUP      = NK_FLAG(2),$/;"	e	enum:nk_panel_type
NK_PANEL_SET_NONBLOCK	include/nuklear.h	/^    NK_PANEL_SET_NONBLOCK = NK_PANEL_CONTEXTUAL|NK_PANEL_COMBO|NK_PANEL_MENU|NK_PANEL_TOOLTIP,$/;"	e	enum:nk_panel_set
NK_PANEL_SET_POPUP	include/nuklear.h	/^    NK_PANEL_SET_POPUP = NK_PANEL_SET_NONBLOCK|NK_PANEL_POPUP,$/;"	e	enum:nk_panel_set
NK_PANEL_SET_SUB	include/nuklear.h	/^    NK_PANEL_SET_SUB = NK_PANEL_SET_POPUP|NK_PANEL_GROUP$/;"	e	enum:nk_panel_set
NK_PANEL_TOOLTIP	include/nuklear.h	/^    NK_PANEL_TOOLTIP    = NK_FLAG(7)$/;"	e	enum:nk_panel_type
NK_PANEL_WINDOW	include/nuklear.h	/^    NK_PANEL_WINDOW     = NK_FLAG(0),$/;"	e	enum:nk_panel_type
NK_PI	include/nuklear.h	/^#define NK_PI /;"	d
NK_POINTER_TYPE	include/nuklear.h	/^        #define NK_POINTER_TYPE /;"	d
NK_POINTER_TYPE	include/nuklear.h	/^      #define NK_POINTER_TYPE /;"	d
NK_POINTER_TYPE	include/nuklear.h	/^ #define NK_POINTER_TYPE /;"	d
NK_POOL_DEFAULT_CAPACITY	include/nuklear.h	/^#define NK_POOL_DEFAULT_CAPACITY /;"	d
NK_POPUP_DYNAMIC	include/nuklear.h	/^enum nk_popup_type      {NK_POPUP_STATIC, NK_POPUP_DYNAMIC};$/;"	e	enum:nk_popup_type
NK_POPUP_STATIC	include/nuklear.h	/^enum nk_popup_type      {NK_POPUP_STATIC, NK_POPUP_DYNAMIC};$/;"	e	enum:nk_popup_type
NK_PRINTF_FORMAT_STRING	include/nuklear.h	/^    #define NK_PRINTF_FORMAT_STRING /;"	d
NK_PRINTF_FORMAT_STRING	include/nuklear.h	/^    #define NK_PRINTF_FORMAT_STRING$/;"	d
NK_PRINTF_VALIST_FUNC	include/nuklear.h	/^    #define NK_PRINTF_VALIST_FUNC(/;"	d
NK_PRINTF_VARARG_FUNC	include/nuklear.h	/^    #define NK_PRINTF_VARARG_FUNC(/;"	d
NK_PROPERTY_DEFAULT	include/nuklear.h	/^    NK_PROPERTY_DEFAULT,$/;"	e	enum:nk_property_status
NK_PROPERTY_DOUBLE	include/nuklear.h	/^    NK_PROPERTY_DOUBLE$/;"	e	enum:nk_property_kind
NK_PROPERTY_DRAG	include/nuklear.h	/^    NK_PROPERTY_DRAG$/;"	e	enum:nk_property_status
NK_PROPERTY_EDIT	include/nuklear.h	/^    NK_PROPERTY_EDIT,$/;"	e	enum:nk_property_status
NK_PROPERTY_FLOAT	include/nuklear.h	/^    NK_PROPERTY_FLOAT,$/;"	e	enum:nk_property_kind
NK_PROPERTY_INT	include/nuklear.h	/^    NK_PROPERTY_INT,$/;"	e	enum:nk_property_kind
NK_PTR_TO_UINT	include/nuklear.h	/^# define NK_PTR_TO_UINT(/;"	d
NK_RGB	include/nuklear.h	/^enum nk_color_format    {NK_RGB, NK_RGBA};$/;"	e	enum:nk_color_format
NK_RGBA	include/nuklear.h	/^enum nk_color_format    {NK_RGB, NK_RGBA};$/;"	e	enum:nk_color_format
NK_RIGHT	include/nuklear.h	/^enum nk_heading         {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
NK_ROTL	include/nuklear.h	/^    #define NK_ROTL(/;"	d
NK_ROTL	include/nuklear.h	/^    #undef NK_ROTL$/;"	d
NK_RP_HEURISTIC	include/nuklear.h	/^enum NK_RP_HEURISTIC {$/;"	g
NK_RP_HEURISTIC_Skyline_BF_sortHeight	include/nuklear.h	/^    NK_RP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:NK_RP_HEURISTIC
NK_RP_HEURISTIC_Skyline_BL_sortHeight	include/nuklear.h	/^    NK_RP_HEURISTIC_Skyline_BL_sortHeight = NK_RP_HEURISTIC_Skyline_default,$/;"	e	enum:NK_RP_HEURISTIC
NK_RP_HEURISTIC_Skyline_default	include/nuklear.h	/^    NK_RP_HEURISTIC_Skyline_default=0,$/;"	e	enum:NK_RP_HEURISTIC
NK_RP_INIT_STATE	include/nuklear.h	/^enum NK_RP_INIT_STATE{NK_RP__INIT_skyline = 1};$/;"	g
NK_RP__INIT_skyline	include/nuklear.h	/^enum NK_RP_INIT_STATE{NK_RP__INIT_skyline = 1};$/;"	e	enum:NK_RP_INIT_STATE
NK_RP__MAXVAL	include/nuklear.h	/^#define NK_RP__MAXVAL /;"	d
NK_SATURATE	include/nuklear.h	/^#define NK_SATURATE(/;"	d
NK_SCHAR_MAX	include/nuklear.h	/^#define NK_SCHAR_MAX /;"	d
NK_SCHAR_MIN	include/nuklear.h	/^#define NK_SCHAR_MIN /;"	d
NK_SCROLLBAR_HIDING_TIMEOUT	include/nuklear.h	/^  #define NK_SCROLLBAR_HIDING_TIMEOUT /;"	d
NK_SEPARATOR_BONUS	include/nuklear.h	/^    #define NK_SEPARATOR_BONUS /;"	d
NK_SHOWN	include/nuklear.h	/^enum nk_show_states     {NK_HIDDEN = nk_false, NK_SHOWN = nk_true};$/;"	e	enum:nk_show_states
NK_SIN	include/nuklear.h	/^#define NK_SIN /;"	d
NK_SINGLE_HEADER	include/nuklear.h	/^#define NK_SINGLE_HEADER$/;"	d
NK_SINT_MAX	include/nuklear.h	/^#define NK_SINT_MAX /;"	d
NK_SINT_MIN	include/nuklear.h	/^#define NK_SINT_MIN /;"	d
NK_SIZE_TYPE	include/nuklear.h	/^        #define NK_SIZE_TYPE /;"	d
NK_SIZE_TYPE	include/nuklear.h	/^      #define NK_SIZE_TYPE /;"	d
NK_SIZE_TYPE	include/nuklear.h	/^ #define NK_SIZE_TYPE /;"	d
NK_SQRT	include/nuklear.h	/^#define NK_SQRT /;"	d
NK_SSHORT_MAX	include/nuklear.h	/^#define NK_SSHORT_MAX /;"	d
NK_SSHORT_MIN	include/nuklear.h	/^#define NK_SSHORT_MIN /;"	d
NK_STATIC	include/nuklear.h	/^enum nk_layout_format   {NK_DYNAMIC, NK_STATIC};$/;"	e	enum:nk_layout_format
NK_STATIC_ASSERT	include/nuklear.h	/^  #define NK_STATIC_ASSERT(/;"	d
NK_STOP_ON_NEW_LINE	include/nuklear.h	/^enum {NK_DO_NOT_STOP_ON_NEW_LINE, NK_STOP_ON_NEW_LINE};$/;"	e	enum:__anon6
NK_STORAGE	include/nuklear.h	/^#define NK_STORAGE /;"	d
NK_STRINGIFY	include/nuklear.h	/^#define NK_STRINGIFY(/;"	d
NK_STRING_JOIN	include/nuklear.h	/^#define NK_STRING_JOIN(/;"	d
NK_STRING_JOIN_DELAY	include/nuklear.h	/^#define NK_STRING_JOIN_DELAY(/;"	d
NK_STRING_JOIN_IMMEDIATE	include/nuklear.h	/^#define NK_STRING_JOIN_IMMEDIATE(/;"	d
NK_STROKE_CLOSED	include/nuklear.h	/^    NK_STROKE_CLOSED = nk_true$/;"	e	enum:nk_draw_list_stroke
NK_STROKE_OPEN	include/nuklear.h	/^    NK_STROKE_OPEN = nk_false,$/;"	e	enum:nk_draw_list_stroke
NK_STRTOD	include/nuklear.h	/^#define NK_STRTOD /;"	d
NK_STYLE_ITEM_COLOR	include/nuklear.h	/^    NK_STYLE_ITEM_COLOR,$/;"	e	enum:nk_style_item_type
NK_STYLE_ITEM_IMAGE	include/nuklear.h	/^    NK_STYLE_ITEM_IMAGE$/;"	e	enum:nk_style_item_type
NK_STYLE_ITEM_STACK_SIZE	include/nuklear.h	/^#define NK_STYLE_ITEM_STACK_SIZE /;"	d
NK_STYLE_POP_IMPLEMENATION	include/nuklear.h	/^#define NK_STYLE_POP_IMPLEMENATION(/;"	d
NK_STYLE_PUSH_IMPLEMENATION	include/nuklear.h	/^#define NK_STYLE_PUSH_IMPLEMENATION(/;"	d
NK_SYMBOL_CIRCLE_OUTLINE	include/nuklear.h	/^    NK_SYMBOL_CIRCLE_OUTLINE,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_CIRCLE_SOLID	include/nuklear.h	/^    NK_SYMBOL_CIRCLE_SOLID,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_MAX	include/nuklear.h	/^    NK_SYMBOL_MAX$/;"	e	enum:nk_symbol_type
NK_SYMBOL_MINUS	include/nuklear.h	/^    NK_SYMBOL_MINUS,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_NONE	include/nuklear.h	/^    NK_SYMBOL_NONE,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_PLUS	include/nuklear.h	/^    NK_SYMBOL_PLUS,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_RECT_OUTLINE	include/nuklear.h	/^    NK_SYMBOL_RECT_OUTLINE,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_RECT_SOLID	include/nuklear.h	/^    NK_SYMBOL_RECT_SOLID,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_DOWN	include/nuklear.h	/^    NK_SYMBOL_TRIANGLE_DOWN,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_LEFT	include/nuklear.h	/^    NK_SYMBOL_TRIANGLE_LEFT,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_RIGHT	include/nuklear.h	/^    NK_SYMBOL_TRIANGLE_RIGHT,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_TRIANGLE_UP	include/nuklear.h	/^    NK_SYMBOL_TRIANGLE_UP,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_UNDERSCORE	include/nuklear.h	/^    NK_SYMBOL_UNDERSCORE,$/;"	e	enum:nk_symbol_type
NK_SYMBOL_X	include/nuklear.h	/^    NK_SYMBOL_X,$/;"	e	enum:nk_symbol_type
NK_TEXTEDIT_UNDOCHARCOUNT	include/nuklear.h	/^#define NK_TEXTEDIT_UNDOCHARCOUNT /;"	d
NK_TEXTEDIT_UNDOSTATECOUNT	include/nuklear.h	/^#define NK_TEXTEDIT_UNDOSTATECOUNT /;"	d
NK_TEXT_ALIGN_BOTTOM	include/nuklear.h	/^    NK_TEXT_ALIGN_BOTTOM      = 0x20$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_CENTERED	include/nuklear.h	/^    NK_TEXT_ALIGN_CENTERED    = 0x02,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_LEFT	include/nuklear.h	/^    NK_TEXT_ALIGN_LEFT        = 0x01,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_MIDDLE	include/nuklear.h	/^    NK_TEXT_ALIGN_MIDDLE      = 0x10,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_RIGHT	include/nuklear.h	/^    NK_TEXT_ALIGN_RIGHT       = 0x04,$/;"	e	enum:nk_text_align
NK_TEXT_ALIGN_TOP	include/nuklear.h	/^    NK_TEXT_ALIGN_TOP         = 0x08,$/;"	e	enum:nk_text_align
NK_TEXT_CENTERED	include/nuklear.h	/^    NK_TEXT_CENTERED    = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_CENTERED,$/;"	e	enum:nk_text_alignment
NK_TEXT_EDIT_MODE_INSERT	include/nuklear.h	/^    NK_TEXT_EDIT_MODE_INSERT,$/;"	e	enum:nk_text_edit_mode
NK_TEXT_EDIT_MODE_REPLACE	include/nuklear.h	/^    NK_TEXT_EDIT_MODE_REPLACE$/;"	e	enum:nk_text_edit_mode
NK_TEXT_EDIT_MODE_VIEW	include/nuklear.h	/^    NK_TEXT_EDIT_MODE_VIEW,$/;"	e	enum:nk_text_edit_mode
NK_TEXT_EDIT_MULTI_LINE	include/nuklear.h	/^    NK_TEXT_EDIT_MULTI_LINE$/;"	e	enum:nk_text_edit_type
NK_TEXT_EDIT_SINGLE_LINE	include/nuklear.h	/^    NK_TEXT_EDIT_SINGLE_LINE,$/;"	e	enum:nk_text_edit_type
NK_TEXT_HAS_SELECTION	include/nuklear.h	/^#define NK_TEXT_HAS_SELECTION(/;"	d
NK_TEXT_LEFT	include/nuklear.h	/^    NK_TEXT_LEFT        = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_LEFT,$/;"	e	enum:nk_text_alignment
NK_TEXT_RIGHT	include/nuklear.h	/^    NK_TEXT_RIGHT       = NK_TEXT_ALIGN_MIDDLE|NK_TEXT_ALIGN_RIGHT$/;"	e	enum:nk_text_alignment
NK_TLOOP	include/nuklear.h	/^    #define NK_TLOOP(/;"	d
NK_TLOOP	include/nuklear.h	/^    #undef NK_TLOOP$/;"	d
NK_TLOOP1	include/nuklear.h	/^    #define NK_TLOOP1(/;"	d
NK_TLOOP1	include/nuklear.h	/^    #undef NK_TLOOP1$/;"	d
NK_TOGGLE_CHECK	include/nuklear.h	/^    NK_TOGGLE_CHECK,$/;"	e	enum:nk_toggle_type
NK_TOGGLE_OPTION	include/nuklear.h	/^    NK_TOGGLE_OPTION$/;"	e	enum:nk_toggle_type
NK_TO_HEX	include/nuklear.h	/^    #define NK_TO_HEX(/;"	d
NK_TO_HEX	include/nuklear.h	/^    #undef NK_TO_HEX$/;"	d
NK_TREE_NODE	include/nuklear.h	/^enum nk_tree_type       {NK_TREE_NODE, NK_TREE_TAB};$/;"	e	enum:nk_tree_type
NK_TREE_TAB	include/nuklear.h	/^enum nk_tree_type       {NK_TREE_NODE, NK_TREE_TAB};$/;"	e	enum:nk_tree_type
NK_TT_MACSTYLE_BOLD	include/nuklear.h	/^#define NK_TT_MACSTYLE_BOLD /;"	d
NK_TT_MACSTYLE_DONTCARE	include/nuklear.h	/^#define NK_TT_MACSTYLE_DONTCARE /;"	d
NK_TT_MACSTYLE_ITALIC	include/nuklear.h	/^#define NK_TT_MACSTYLE_ITALIC /;"	d
NK_TT_MACSTYLE_NONE	include/nuklear.h	/^#define NK_TT_MACSTYLE_NONE /;"	d
NK_TT_MACSTYLE_UNDERSCORE	include/nuklear.h	/^#define NK_TT_MACSTYLE_UNDERSCORE /;"	d
NK_TT_MAC_EID_ARABIC	include/nuklear.h	/^   NK_TT_MAC_EID_ROMAN        =0,   NK_TT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon11
NK_TT_MAC_EID_CHINESE_TRAD	include/nuklear.h	/^   NK_TT_MAC_EID_CHINESE_TRAD =2,   NK_TT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon11
NK_TT_MAC_EID_GREEK	include/nuklear.h	/^   NK_TT_MAC_EID_CHINESE_TRAD =2,   NK_TT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon11
NK_TT_MAC_EID_HEBREW	include/nuklear.h	/^   NK_TT_MAC_EID_JAPANESE     =1,   NK_TT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon11
NK_TT_MAC_EID_JAPANESE	include/nuklear.h	/^   NK_TT_MAC_EID_JAPANESE     =1,   NK_TT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon11
NK_TT_MAC_EID_KOREAN	include/nuklear.h	/^   NK_TT_MAC_EID_KOREAN       =3,   NK_TT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon11
NK_TT_MAC_EID_ROMAN	include/nuklear.h	/^   NK_TT_MAC_EID_ROMAN        =0,   NK_TT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon11
NK_TT_MAC_EID_RUSSIAN	include/nuklear.h	/^   NK_TT_MAC_EID_KOREAN       =3,   NK_TT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon11
NK_TT_MAC_LANG_ARABIC	include/nuklear.h	/^   NK_TT_MAC_LANG_ARABIC       =12,   NK_TT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_CHINESE_SIMPLIFIED	include/nuklear.h	/^   NK_TT_MAC_LANG_HEBREW       =10,   NK_TT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_CHINESE_TRAD	include/nuklear.h	/^   NK_TT_MAC_LANG_ITALIAN      =3 ,   NK_TT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon13
NK_TT_MAC_LANG_DUTCH	include/nuklear.h	/^   NK_TT_MAC_LANG_DUTCH        =4 ,   NK_TT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_ENGLISH	include/nuklear.h	/^   NK_TT_MAC_LANG_ENGLISH      =0 ,   NK_TT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_FRENCH	include/nuklear.h	/^   NK_TT_MAC_LANG_FRENCH       =1 ,   NK_TT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_GERMAN	include/nuklear.h	/^   NK_TT_MAC_LANG_GERMAN       =2 ,   NK_TT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_HEBREW	include/nuklear.h	/^   NK_TT_MAC_LANG_HEBREW       =10,   NK_TT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_ITALIAN	include/nuklear.h	/^   NK_TT_MAC_LANG_ITALIAN      =3 ,   NK_TT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon13
NK_TT_MAC_LANG_JAPANESE	include/nuklear.h	/^   NK_TT_MAC_LANG_ENGLISH      =0 ,   NK_TT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_KOREAN	include/nuklear.h	/^   NK_TT_MAC_LANG_ARABIC       =12,   NK_TT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_RUSSIAN	include/nuklear.h	/^   NK_TT_MAC_LANG_DUTCH        =4 ,   NK_TT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_SPANISH	include/nuklear.h	/^   NK_TT_MAC_LANG_FRENCH       =1 ,   NK_TT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon13
NK_TT_MAC_LANG_SWEDISH	include/nuklear.h	/^   NK_TT_MAC_LANG_GERMAN       =2 ,   NK_TT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon13
NK_TT_MAX_OVERSAMPLE	include/nuklear.h	/^#define NK_TT_MAX_OVERSAMPLE /;"	d
NK_TT_MS_EID_SHIFTJIS	include/nuklear.h	/^   NK_TT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon10
NK_TT_MS_EID_SYMBOL	include/nuklear.h	/^   NK_TT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon10
NK_TT_MS_EID_UNICODE_BMP	include/nuklear.h	/^   NK_TT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon10
NK_TT_MS_EID_UNICODE_FULL	include/nuklear.h	/^   NK_TT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon10
NK_TT_MS_LANG_CHINESE	include/nuklear.h	/^   NK_TT_MS_LANG_CHINESE     =0x0804,   NK_TT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon12
NK_TT_MS_LANG_DUTCH	include/nuklear.h	/^   NK_TT_MS_LANG_DUTCH       =0x0413,   NK_TT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon12
NK_TT_MS_LANG_ENGLISH	include/nuklear.h	/^   NK_TT_MS_LANG_ENGLISH     =0x0409,   NK_TT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon12
NK_TT_MS_LANG_FRENCH	include/nuklear.h	/^   NK_TT_MS_LANG_FRENCH      =0x040c,   NK_TT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon12
NK_TT_MS_LANG_GERMAN	include/nuklear.h	/^   NK_TT_MS_LANG_GERMAN      =0x0407,   NK_TT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon12
NK_TT_MS_LANG_HEBREW	include/nuklear.h	/^   NK_TT_MS_LANG_HEBREW      =0x040d,   NK_TT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon12
NK_TT_MS_LANG_ITALIAN	include/nuklear.h	/^   NK_TT_MS_LANG_ENGLISH     =0x0409,   NK_TT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon12
NK_TT_MS_LANG_JAPANESE	include/nuklear.h	/^   NK_TT_MS_LANG_CHINESE     =0x0804,   NK_TT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon12
NK_TT_MS_LANG_KOREAN	include/nuklear.h	/^   NK_TT_MS_LANG_DUTCH       =0x0413,   NK_TT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon12
NK_TT_MS_LANG_RUSSIAN	include/nuklear.h	/^   NK_TT_MS_LANG_FRENCH      =0x040c,   NK_TT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon12
NK_TT_MS_LANG_SPANISH	include/nuklear.h	/^   NK_TT_MS_LANG_GERMAN      =0x0407,   NK_TT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon12
NK_TT_MS_LANG_SWEDISH	include/nuklear.h	/^   NK_TT_MS_LANG_HEBREW      =0x040d,   NK_TT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon12
NK_TT_PLATFORM_ID_ISO	include/nuklear.h	/^   NK_TT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon8
NK_TT_PLATFORM_ID_MAC	include/nuklear.h	/^   NK_TT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon8
NK_TT_PLATFORM_ID_MICROSOFT	include/nuklear.h	/^   NK_TT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon8
NK_TT_PLATFORM_ID_UNICODE	include/nuklear.h	/^   NK_TT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon8
NK_TT_UNICODE_EID_ISO_10646	include/nuklear.h	/^   NK_TT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon9
NK_TT_UNICODE_EID_UNICODE_1_0	include/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon9
NK_TT_UNICODE_EID_UNICODE_1_1	include/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon9
NK_TT_UNICODE_EID_UNICODE_2_0_BMP	include/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon9
NK_TT_UNICODE_EID_UNICODE_2_0_FULL	include/nuklear.h	/^   NK_TT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon9
NK_TT__COMPARE	include/nuklear.h	/^    #define NK_TT__COMPARE(/;"	d
NK_TT__OVER_MASK	include/nuklear.h	/^#define NK_TT__OVER_MASK /;"	d
NK_TT_vcurve	include/nuklear.h	/^  NK_TT_vcurve$/;"	e	enum:__anon7
NK_TT_vline	include/nuklear.h	/^  NK_TT_vline,$/;"	e	enum:__anon7
NK_TT_vmove	include/nuklear.h	/^  NK_TT_vmove=1,$/;"	e	enum:__anon7
NK_UCHAR_MAX	include/nuklear.h	/^#define NK_UCHAR_MAX /;"	d
NK_UCHAR_MIN	include/nuklear.h	/^#define NK_UCHAR_MIN /;"	d
NK_UINT16	include/nuklear.h	/^    #define NK_UINT16 /;"	d
NK_UINT16	include/nuklear.h	/^ #define NK_UINT16 /;"	d
NK_UINT32	include/nuklear.h	/^      #define NK_UINT32 /;"	d
NK_UINT32	include/nuklear.h	/^ #define NK_UINT32 /;"	d
NK_UINT8	include/nuklear.h	/^    #define NK_UINT8 /;"	d
NK_UINT8	include/nuklear.h	/^ #define NK_UINT8 /;"	d
NK_UINT_MAX	include/nuklear.h	/^#define NK_UINT_MAX /;"	d
NK_UINT_MIN	include/nuklear.h	/^#define NK_UINT_MIN /;"	d
NK_UINT_TO_PTR	include/nuklear.h	/^# define NK_UINT_TO_PTR(/;"	d
NK_UNDEFINED	include/nuklear.h	/^#define NK_UNDEFINED /;"	d
NK_UNIQUE_NAME	include/nuklear.h	/^  #define NK_UNIQUE_NAME(/;"	d
NK_UNMATCHED_LETTER_PENALTY	include/nuklear.h	/^    #define NK_UNMATCHED_LETTER_PENALTY /;"	d
NK_UNUSED	include/nuklear.h	/^#define NK_UNUSED(/;"	d
NK_UP	include/nuklear.h	/^enum nk_heading         {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	e	enum:nk_heading
NK_USHORT_MAX	include/nuklear.h	/^#define NK_USHORT_MAX /;"	d
NK_USHORT_MIN	include/nuklear.h	/^#define NK_USHORT_MIN /;"	d
NK_UTF_INVALID	include/nuklear.h	/^#define NK_UTF_INVALID /;"	d
NK_UTF_SIZE	include/nuklear.h	/^#define NK_UTF_SIZE /;"	d
NK_VALUE_PAGE_CAPACITY	include/nuklear.h	/^#define NK_VALUE_PAGE_CAPACITY /;"	d
NK_VECTOR_STACK_SIZE	include/nuklear.h	/^#define NK_VECTOR_STACK_SIZE /;"	d
NK_VERTEX_ATTRIBUTE_COUNT	include/nuklear.h	/^    NK_VERTEX_ATTRIBUTE_COUNT$/;"	e	enum:nk_draw_vertex_layout_attribute
NK_VERTEX_COLOR	include/nuklear.h	/^    NK_VERTEX_COLOR,$/;"	e	enum:nk_draw_vertex_layout_attribute
NK_VERTEX_LAYOUT_END	include/nuklear.h	/^#define NK_VERTEX_LAYOUT_END /;"	d
NK_VERTEX_POSITION	include/nuklear.h	/^    NK_VERTEX_POSITION,$/;"	e	enum:nk_draw_vertex_layout_attribute
NK_VERTEX_TEXCOORD	include/nuklear.h	/^    NK_VERTEX_TEXCOORD,$/;"	e	enum:nk_draw_vertex_layout_attribute
NK_VERTICAL	include/nuklear.h	/^enum nk_orientation     {NK_VERTICAL, NK_HORIZONTAL};$/;"	e	enum:nk_orientation
NK_VSNPRINTF	include/nuklear.h	/^      #define NK_VSNPRINTF(/;"	d
NK_VSNPRINTF	include/nuklear.h	/^    #define NK_VSNPRINTF(/;"	d
NK_WIDGET_INVALID	include/nuklear.h	/^    NK_WIDGET_INVALID, \/* The widget cannot be seen and is completely out of view *\/$/;"	e	enum:nk_widget_layout_states
NK_WIDGET_ROM	include/nuklear.h	/^    NK_WIDGET_ROM \/* The widget is partially visible and cannot be updated *\/$/;"	e	enum:nk_widget_layout_states
NK_WIDGET_STATE_ACTIVE	include/nuklear.h	/^    NK_WIDGET_STATE_ACTIVE      = NK_WIDGET_STATE_ACTIVED|NK_WIDGET_STATE_MODIFIED \/* widget is currently activated *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_ACTIVED	include/nuklear.h	/^    NK_WIDGET_STATE_ACTIVED     = NK_FLAG(5),\/* widget is currently activated *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_ENTERED	include/nuklear.h	/^    NK_WIDGET_STATE_ENTERED     = NK_FLAG(3), \/* widget has been hovered on the current frame *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_HOVER	include/nuklear.h	/^    NK_WIDGET_STATE_HOVER       = NK_FLAG(4), \/* widget is being hovered *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_HOVERED	include/nuklear.h	/^    NK_WIDGET_STATE_HOVERED     = NK_WIDGET_STATE_HOVER|NK_WIDGET_STATE_MODIFIED, \/* widget is being hovered *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_INACTIVE	include/nuklear.h	/^    NK_WIDGET_STATE_INACTIVE    = NK_FLAG(2), \/* widget is neither active nor hovered *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_LEFT	include/nuklear.h	/^    NK_WIDGET_STATE_LEFT        = NK_FLAG(6), \/* widget is from this frame on not hovered anymore *\/$/;"	e	enum:nk_widget_states
NK_WIDGET_STATE_MODIFIED	include/nuklear.h	/^    NK_WIDGET_STATE_MODIFIED    = NK_FLAG(1),$/;"	e	enum:nk_widget_states
NK_WIDGET_VALID	include/nuklear.h	/^    NK_WIDGET_VALID, \/* The widget is completely inside the window and can be updated and drawn *\/$/;"	e	enum:nk_widget_layout_states
NK_WINDOW_BACKGROUND	include/nuklear.h	/^    NK_WINDOW_BACKGROUND        = NK_FLAG(8),$/;"	e	enum:nk_panel_flags
NK_WINDOW_BORDER	include/nuklear.h	/^    NK_WINDOW_BORDER            = NK_FLAG(0),$/;"	e	enum:nk_panel_flags
NK_WINDOW_CLOSABLE	include/nuklear.h	/^    NK_WINDOW_CLOSABLE          = NK_FLAG(3),$/;"	e	enum:nk_panel_flags
NK_WINDOW_CLOSED	include/nuklear.h	/^    NK_WINDOW_CLOSED        = NK_FLAG(14),$/;"	e	enum:nk_window_flags
NK_WINDOW_DYNAMIC	include/nuklear.h	/^    NK_WINDOW_DYNAMIC       = NK_WINDOW_PRIVATE,$/;"	e	enum:nk_window_flags
NK_WINDOW_HIDDEN	include/nuklear.h	/^    NK_WINDOW_HIDDEN        = NK_FLAG(13),$/;"	e	enum:nk_window_flags
NK_WINDOW_MAX_NAME	include/nuklear.h	/^#define NK_WINDOW_MAX_NAME /;"	d
NK_WINDOW_MINIMIZABLE	include/nuklear.h	/^    NK_WINDOW_MINIMIZABLE       = NK_FLAG(4),$/;"	e	enum:nk_panel_flags
NK_WINDOW_MINIMIZED	include/nuklear.h	/^    NK_WINDOW_MINIMIZED     = NK_FLAG(15),$/;"	e	enum:nk_window_flags
NK_WINDOW_MOVABLE	include/nuklear.h	/^    NK_WINDOW_MOVABLE           = NK_FLAG(1),$/;"	e	enum:nk_panel_flags
NK_WINDOW_NOT_INTERACTIVE	include/nuklear.h	/^    NK_WINDOW_NOT_INTERACTIVE = NK_WINDOW_ROM|NK_WINDOW_NO_INPUT,$/;"	e	enum:nk_window_flags
NK_WINDOW_NO_INPUT	include/nuklear.h	/^    NK_WINDOW_NO_INPUT          = NK_FLAG(10)$/;"	e	enum:nk_panel_flags
NK_WINDOW_NO_SCROLLBAR	include/nuklear.h	/^    NK_WINDOW_NO_SCROLLBAR      = NK_FLAG(5),$/;"	e	enum:nk_panel_flags
NK_WINDOW_PRIVATE	include/nuklear.h	/^    NK_WINDOW_PRIVATE       = NK_FLAG(11),$/;"	e	enum:nk_window_flags
NK_WINDOW_REMOVE_ROM	include/nuklear.h	/^    NK_WINDOW_REMOVE_ROM    = NK_FLAG(16)$/;"	e	enum:nk_window_flags
NK_WINDOW_ROM	include/nuklear.h	/^    NK_WINDOW_ROM           = NK_FLAG(12),$/;"	e	enum:nk_window_flags
NK_WINDOW_SCALABLE	include/nuklear.h	/^    NK_WINDOW_SCALABLE          = NK_FLAG(2),$/;"	e	enum:nk_panel_flags
NK_WINDOW_SCALE_LEFT	include/nuklear.h	/^    NK_WINDOW_SCALE_LEFT        = NK_FLAG(9),$/;"	e	enum:nk_panel_flags
NK_WINDOW_SCROLL_AUTO_HIDE	include/nuklear.h	/^    NK_WINDOW_SCROLL_AUTO_HIDE  = NK_FLAG(7),$/;"	e	enum:nk_panel_flags
NK_WINDOW_TITLE	include/nuklear.h	/^    NK_WINDOW_TITLE             = NK_FLAG(6),$/;"	e	enum:nk_panel_flags
OFFSET_OF_MEMBER	src/utils.h	/^#define OFFSET_OF_MEMBER(/;"	d
OG_ALLOCATORS_H	src/og_allocators.h	/^#define OG_ALLOCATORS_H$/;"	d
OG_FLT_MAX	src/utils.h	/^#define OG_FLT_MAX /;"	d
OG_INT_MAX	src/utils.h	/^#define OG_INT_MAX /;"	d
OPERATING_SYSTEM_COUNT	src/utils.h	/^    OPERATING_SYSTEM_COUNT$/;"	e	enum:OperatingSystem
OPERATING_SYSTEM_LINUX	src/utils.h	/^    OPERATING_SYSTEM_LINUX,$/;"	e	enum:OperatingSystem
OPERATING_SYSTEM_NULL	src/utils.h	/^    OPERATING_SYSTEM_NULL,$/;"	e	enum:OperatingSystem
OPERATING_SYSTEM_WINDOWS	src/utils.h	/^    OPERATING_SYSTEM_WINDOWS,$/;"	e	enum:OperatingSystem
OS_LINUX	src/utils.h	/^#define OS_LINUX /;"	d
OS_LINUX	src/utils.h	/^#undef OS_LINUX$/;"	d
OS_WINDOWS	src/utils.h	/^#define OS_WINDOWS /;"	d
OS_WINDOWS	src/utils.h	/^#undef OS_WINDOWS$/;"	d
OperatingSystem	src/utils.h	/^typedef enum OperatingSystem {$/;"	g
OperatingSystem	src/utils.h	/^} OperatingSystem;$/;"	t	typeref:enum:OperatingSystem
PTR_FROM_UINT	src/utils.h	/^#define PTR_FROM_UINT(/;"	d
SIDE_MAX	src/utils.h	/^    SIDE_MAX$/;"	e	enum:Side
SIDE_MIN	src/utils.h	/^    SIDE_MIN,$/;"	e	enum:Side
SLL_QUEUE_POP	src/utils.h	/^#define SLL_QUEUE_POP(/;"	d
SLL_QUEUE_POP_N	src/utils.h	/^#define SLL_QUEUE_POP_N(/;"	d
SLL_QUEUE_PUSH	src/utils.h	/^#define SLL_QUEUE_PUSH(/;"	d
SLL_QUEUE_PUSH_FRONT	src/utils.h	/^#define SLL_QUEUE_PUSH_FRONT(/;"	d
SLL_QUEUE_PUSH_FRONT_N	src/utils.h	/^#define SLL_QUEUE_PUSH_FRONT_N(/;"	d
SLL_QUEUE_PUSH_N	src/utils.h	/^#define SLL_QUEUE_PUSH_N(/;"	d
SLL_STACK_POP	src/utils.h	/^#define SLL_STACK_POP(/;"	d
SLL_STACK_POP_N	src/utils.h	/^#define SLL_STACK_POP_N(/;"	d
SLL_STACK_PUSH	src/utils.h	/^#define SLL_STACK_PUSH(/;"	d
SLL_STACK_PUSH_N	src/utils.h	/^#define SLL_STACK_PUSH_N(/;"	d
STBTT_DEF	include/stb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	include/stb_truetype.h	/^#define STBTT_FIX /;"	d
STBTT_FIXMASK	include/stb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	include/stb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	include/stb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	include/stb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	include/stb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	include/stb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	include/stb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	include/stb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	include/stb_truetype.h	/^    STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon25
STBTT_MAC_EID_CHINESE_TRAD	include/stb_truetype.h	/^    STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon25
STBTT_MAC_EID_GREEK	include/stb_truetype.h	/^    STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anon25
STBTT_MAC_EID_HEBREW	include/stb_truetype.h	/^    STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon25
STBTT_MAC_EID_JAPANESE	include/stb_truetype.h	/^    STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anon25
STBTT_MAC_EID_KOREAN	include/stb_truetype.h	/^    STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon25
STBTT_MAC_EID_ROMAN	include/stb_truetype.h	/^    STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anon25
STBTT_MAC_EID_RUSSIAN	include/stb_truetype.h	/^    STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anon25
STBTT_MAC_LANG_ARABIC	include/stb_truetype.h	/^    STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon27
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	include/stb_truetype.h	/^    STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon27
STBTT_MAC_LANG_CHINESE_TRAD	include/stb_truetype.h	/^    STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon27
STBTT_MAC_LANG_DUTCH	include/stb_truetype.h	/^    STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon27
STBTT_MAC_LANG_ENGLISH	include/stb_truetype.h	/^    STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon27
STBTT_MAC_LANG_FRENCH	include/stb_truetype.h	/^    STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon27
STBTT_MAC_LANG_GERMAN	include/stb_truetype.h	/^    STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon27
STBTT_MAC_LANG_HEBREW	include/stb_truetype.h	/^    STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anon27
STBTT_MAC_LANG_ITALIAN	include/stb_truetype.h	/^    STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anon27
STBTT_MAC_LANG_JAPANESE	include/stb_truetype.h	/^    STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anon27
STBTT_MAC_LANG_KOREAN	include/stb_truetype.h	/^    STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anon27
STBTT_MAC_LANG_RUSSIAN	include/stb_truetype.h	/^    STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anon27
STBTT_MAC_LANG_SPANISH	include/stb_truetype.h	/^    STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anon27
STBTT_MAC_LANG_SWEDISH	include/stb_truetype.h	/^    STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anon27
STBTT_MAX_OVERSAMPLE	include/stb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	include/stb_truetype.h	/^    STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anon24
STBTT_MS_EID_SYMBOL	include/stb_truetype.h	/^    STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anon24
STBTT_MS_EID_UNICODE_BMP	include/stb_truetype.h	/^    STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anon24
STBTT_MS_EID_UNICODE_FULL	include/stb_truetype.h	/^    STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anon24
STBTT_MS_LANG_CHINESE	include/stb_truetype.h	/^    STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon26
STBTT_MS_LANG_DUTCH	include/stb_truetype.h	/^    STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon26
STBTT_MS_LANG_ENGLISH	include/stb_truetype.h	/^    STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon26
STBTT_MS_LANG_FRENCH	include/stb_truetype.h	/^    STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon26
STBTT_MS_LANG_GERMAN	include/stb_truetype.h	/^    STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon26
STBTT_MS_LANG_HEBREW	include/stb_truetype.h	/^    STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon26
STBTT_MS_LANG_ITALIAN	include/stb_truetype.h	/^    STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anon26
STBTT_MS_LANG_JAPANESE	include/stb_truetype.h	/^    STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anon26
STBTT_MS_LANG_KOREAN	include/stb_truetype.h	/^    STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anon26
STBTT_MS_LANG_RUSSIAN	include/stb_truetype.h	/^    STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anon26
STBTT_MS_LANG_SPANISH	include/stb_truetype.h	/^    STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anon26
STBTT_MS_LANG_SWEDISH	include/stb_truetype.h	/^    STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anon26
STBTT_PLATFORM_ID_ISO	include/stb_truetype.h	/^    STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anon22
STBTT_PLATFORM_ID_MAC	include/stb_truetype.h	/^    STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anon22
STBTT_PLATFORM_ID_MICROSOFT	include/stb_truetype.h	/^    STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anon22
STBTT_PLATFORM_ID_UNICODE	include/stb_truetype.h	/^    STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anon22
STBTT_POINT_SIZE	include/stb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	include/stb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_UNICODE_EID_ISO_10646	include/stb_truetype.h	/^    STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anon23
STBTT_UNICODE_EID_UNICODE_1_0	include/stb_truetype.h	/^    STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anon23
STBTT_UNICODE_EID_UNICODE_1_1	include/stb_truetype.h	/^    STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anon23
STBTT_UNICODE_EID_UNICODE_2_0_BMP	include/stb_truetype.h	/^    STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anon23
STBTT_UNICODE_EID_UNICODE_2_0_FULL	include/stb_truetype.h	/^    STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anon23
STBTT__COMPARE	include/stb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	include/stb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	include/stb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__CSERR	include/stb_truetype.h	/^#undef STBTT__CSERR$/;"	d
STBTT__NOTUSED	include/stb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	include/stb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	include/stb_truetype.h	/^#define STBTT_acos(/;"	d
STBTT_assert	include/stb_truetype.h	/^#define STBTT_assert(/;"	d
STBTT_cos	include/stb_truetype.h	/^#define STBTT_cos(/;"	d
STBTT_fabs	include/stb_truetype.h	/^#define STBTT_fabs(/;"	d
STBTT_fmod	include/stb_truetype.h	/^#define STBTT_fmod(/;"	d
STBTT_free	include/stb_truetype.h	/^#define STBTT_free(/;"	d
STBTT_iceil	include/stb_truetype.h	/^#define STBTT_iceil(/;"	d
STBTT_ifloor	include/stb_truetype.h	/^#define STBTT_ifloor(/;"	d
STBTT_malloc	include/stb_truetype.h	/^#define STBTT_malloc(/;"	d
STBTT_max	include/stb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	include/stb_truetype.h	/^#define STBTT_memcpy /;"	d
STBTT_memset	include/stb_truetype.h	/^#define STBTT_memset /;"	d
STBTT_min	include/stb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	include/stb_truetype.h	/^#define STBTT_pow(/;"	d
STBTT_sqrt	include/stb_truetype.h	/^#define STBTT_sqrt(/;"	d
STBTT_strlen	include/stb_truetype.h	/^#define STBTT_strlen(/;"	d
STBTT_vcubic	include/stb_truetype.h	/^    STBTT_vcubic$/;"	e	enum:__anon19
STBTT_vcurve	include/stb_truetype.h	/^    STBTT_vcurve,$/;"	e	enum:__anon19
STBTT_vline	include/stb_truetype.h	/^    STBTT_vline,$/;"	e	enum:__anon19
STBTT_vmove	include/stb_truetype.h	/^    STBTT_vmove=1,$/;"	e	enum:__anon19
STB_TRUETYPE_IMPLEMENTATION	src/sdl2_main.c	/^#define STB_TRUETYPE_IMPLEMENTATION /;"	d	file:
STMT	src/utils.h	/^#define STMT(/;"	d
STR8_EXPAND	src/utils.h	/^#define STR8_EXPAND(/;"	d
STR8_LITERAL	src/utils.h	/^#define STR8_LITERAL(/;"	d
STRINGIFY	src/utils.h	/^#define STRINGIFY(/;"	d
STRINGIFY_	src/utils.h	/^#define STRINGIFY_(/;"	d
SWAP	src/utils.h	/^#define SWAP(/;"	d
Side	src/utils.h	/^typedef enum Side {$/;"	g
Side	src/utils.h	/^} Side;$/;"	t	typeref:enum:Side
Str8	src/utils.h	/^typedef struct Str8 {$/;"	s
Str8	src/utils.h	/^} Str8;$/;"	t	typeref:struct:Str8
Str8List	src/utils.h	/^typedef struct Str8List {$/;"	s
Str8List	src/utils.h	/^} Str8List;$/;"	t	typeref:struct:Str8List
Str8Node	src/utils.h	/^struct Str8Node {$/;"	s
Str8Node	src/utils.h	/^typedef struct Str8Node Str8Node;$/;"	t	typeref:struct:Str8Node
TB	src/utils.h	/^#define TB(/;"	d
UINT_FROM_PTR	src/utils.h	/^#define UINT_FROM_PTR(/;"	d
UTILS_H	src/utils.h	/^#define UTILS_H$/;"	d
WARNINGS	makefile	/^WARNINGS = -Wall -Wextra -Wno-unused-parameter -Wno-undef -Wno-unused-macros -Wno-extra-semi-stmt -Wno-unused-function$/;"	m
__STB_INCLUDE_STB_TRUETYPE_H__	include/stb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
a	include/nuklear.h	/^    float a[2];$/;"	m	struct:nk_command_arc
a	include/nuklear.h	/^    float a[2];$/;"	m	struct:nk_command_arc_filled
a	include/nuklear.h	/^    struct nk_vec2i a;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command_triangle::nk_vec2i
a	include/nuklear.h	/^    struct nk_vec2i a;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command_triangle_filled::nk_vec2i
a	include/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color
a	include/nuklear.h	/^struct nk_colorf {float r,g,b,a;};$/;"	m	struct:nk_colorf
active	include/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_edit_state
active	include/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_property_state
active	include/nuklear.h	/^    int active;$/;"	m	struct:nk_buffer_marker
active	include/nuklear.h	/^    int active;$/;"	m	struct:nk_popup_buffer
active	include/nuklear.h	/^    int active;$/;"	m	struct:nk_popup_state
active	include/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_style_item
active	include/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_style_item
active	include/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_style_item
active	include/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
active	include/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_item
active	include/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
active	include/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
active	include/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_style_item
active	include/nuklear.h	/^    struct nk_style_item active;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_style_item
active	include/nuklear.h	/^    struct nk_window *active;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_window
active	include/nuklear.h	/^    unsigned char active;$/;"	m	struct:nk_text_edit
active_con	include/nuklear.h	/^    unsigned active_con;$/;"	m	struct:nk_popup_state
active_head	include/nuklear.h	/^    struct nk_rp_node *active_head;$/;"	m	struct:nk_rp_context	typeref:struct:nk_rp_context::nk_rp_node
advance	include/stb_truetype.h	/^    int advance;$/;"	m	struct:stbtt_kerningentry
align	include/nuklear.h	/^    enum nk_style_header_align align;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_style_window_header::nk_style_header_align
align	include/nuklear.h	/^    int align;$/;"	m	struct:nk_rp_context
alloc	include/nuklear.h	/^    nk_plugin_alloc alloc;$/;"	m	struct:nk_allocator
alloc	include/nuklear.h	/^    struct nk_allocator alloc;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_allocator
alloc	include/nuklear.h	/^    struct nk_allocator alloc;$/;"	m	struct:nk_pool	typeref:struct:nk_pool::nk_allocator
alloc	include/nuklear.h	/^    struct nk_allocator alloc;$/;"	m	struct:nk_tt__hheap	typeref:struct:nk_tt__hheap::nk_allocator
allocated	include/nuklear.h	/^    nk_size allocated;$/;"	m	struct:nk_buffer
allocated	include/nuklear.h	/^    nk_size allocated;$/;"	m	struct:nk_memory_status
arc_segment_count	include/nuklear.h	/^    unsigned arc_segment_count; \/* number of segments used for arcs: default to 22 *\/$/;"	m	struct:nk_convert_config
architectureFromContext	src/utils.h	/^architectureFromContext(void) {$/;"	f
architecture_String	src/utils.h	/^global char architecture_String[5][6] = {$/;"	v
array_of_unicode_codepoints	include/nuklear.h	/^    int *array_of_unicode_codepoints;$/;"	m	struct:nk_tt_pack_range
array_of_unicode_codepoints	include/stb_truetype.h	/^    int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode codepoints$/;"	m	struct:__anon18
ascent	include/nuklear.h	/^    float ascent, descent;$/;"	m	struct:nk_baked_font
at_x	include/nuklear.h	/^    float at_x, at_y, max_x;$/;"	m	struct:nk_panel
at_y	include/nuklear.h	/^    float at_x, at_y, max_x;$/;"	m	struct:nk_panel
attribute	include/nuklear.h	/^    enum nk_draw_vertex_layout_attribute attribute;$/;"	m	struct:nk_draw_vertex_layout_element	typeref:enum:nk_draw_vertex_layout_element::nk_draw_vertex_layout_attribute
b	include/nuklear.h	/^    struct nk_vec2i b;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command_triangle::nk_vec2i
b	include/nuklear.h	/^    struct nk_vec2i b;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command_triangle_filled::nk_vec2i
b	include/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color
b	include/nuklear.h	/^struct nk_colorf {float r,g,b,a;};$/;"	m	struct:nk_colorf
b32	src/utils.h	/^typedef int32_t b32; \/\/ Basic boolean type for C$/;"	t
background	include/nuklear.h	/^    struct nk_color background;$/;"	m	struct:nk_command_text	typeref:struct:nk_command_text::nk_color
background	include/nuklear.h	/^    struct nk_color background;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
background	include/nuklear.h	/^    struct nk_color background;$/;"	m	struct:nk_text	typeref:struct:nk_text::nk_color
background	include/nuklear.h	/^    struct nk_style_item background;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_chart::nk_style_item
background	include/nuklear.h	/^    struct nk_style_item background;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_style_item
bar_active	include/nuklear.h	/^    struct nk_color bar_active;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_color
bar_filled	include/nuklear.h	/^    struct nk_color bar_filled;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_color
bar_height	include/nuklear.h	/^    float bar_height;$/;"	m	struct:nk_style_slider
bar_hover	include/nuklear.h	/^    struct nk_color bar_hover;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_color
bar_normal	include/nuklear.h	/^    struct nk_color bar_normal;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_color
base	include/nuklear.h	/^    struct nk_buffer *base;$/;"	m	struct:nk_command_buffer	typeref:struct:nk_command_buffer::nk_buffer
baseline_y_delta	include/nuklear.h	/^   float baseline_y_delta;$/;"	m	struct:nk_text_edit_row
begin	include/nuklear.h	/^    int begin, end, count;$/;"	m	struct:nk_list_view
begin	include/nuklear.h	/^    nk_size begin, end, last;$/;"	m	struct:nk_command_buffer
begin	include/nuklear.h	/^    nk_size begin;$/;"	m	struct:nk_popup_buffer
begin	include/nuklear.h	/^    struct nk_vec2i begin;$/;"	m	struct:nk_command_curve	typeref:struct:nk_command_curve::nk_vec2i
begin	include/nuklear.h	/^    struct nk_vec2i begin;$/;"	m	struct:nk_command_line	typeref:struct:nk_command_line::nk_vec2i
begin	include/nuklear.h	/^    struct nk_window *begin;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_window
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_panel
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_button
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_chart
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_combo
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_edit
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_progress
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_property
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_scrollbar
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_slider
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_tab
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_toggle
border	include/nuklear.h	/^    float border;$/;"	m	struct:nk_style_window
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_color
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_chart::nk_color
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_color
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_color
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_color
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_color
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_color
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_color
border_color	include/nuklear.h	/^    struct nk_color border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
border_cursor	include/nuklear.h	/^    float border_cursor;$/;"	m	struct:nk_style_scrollbar
bottom	include/nuklear.h	/^    struct nk_color bottom;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command_rect_multi_color::nk_color
bottom_y	include/stb_truetype.h	/^    int x,y,bottom_y;$/;"	m	struct:__anon30
bounds	include/nuklear.h	/^    struct nk_rect bounds;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_rect
bounds	include/nuklear.h	/^    struct nk_rect bounds;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_rect
bounds	include/stb_truetype.h	/^    int bounds;$/;"	m	struct:__anon28
buf	include/nuklear.h	/^    struct nk_popup_buffer buf;$/;"	m	struct:nk_popup_state	typeref:struct:nk_popup_state::nk_popup_buffer
buffer	include/nuklear.h	/^    char buffer[NK_MAX_NUMBER_BUFFER];$/;"	m	struct:nk_property_state
buffer	include/nuklear.h	/^    struct nk_buffer *buffer;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_buffer
buffer	include/nuklear.h	/^    struct nk_buffer buffer;$/;"	m	struct:nk_str	typeref:struct:nk_str::nk_buffer
buffer	include/nuklear.h	/^    struct nk_command_buffer *buffer;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_command_buffer
buffer	include/nuklear.h	/^    struct nk_command_buffer buffer;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_command_buffer
buffer	src/og_allocators.h	/^	u8* buffer; \/\/ Pointer to the buffer, must point to an allocated block of$/;"	m	struct:__anon32
buffer	src/utils.h	/^	u8* buffer; \/\/ Pointer to the buffer, must point to an allocated block of$/;"	m	struct:Arena
bufferSize	src/og_allocators.h	/^    memoryIndex bufferSize; \/\/ Size of the buffer in bytes$/;"	m	struct:__anon32
bufferSize	src/utils.h	/^    memoryIndex bufferSize; \/\/ Size of the buffer in bytes$/;"	m	struct:Arena
build	include/nuklear.h	/^    int build;$/;"	m	struct:nk_context
build	include/nuklear.h	/^    struct nk_font_bake_data *build;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_font_bake_data
button	include/nuklear.h	/^    struct nk_style_button button;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_button
button	include/nuklear.h	/^    struct nk_style_button button;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_style_button
button_behavior	include/nuklear.h	/^    enum nk_button_behavior button_behavior;$/;"	m	struct:nk_context	typeref:enum:nk_context::nk_button_behavior
button_behaviors	include/nuklear.h	/^    struct nk_config_stack_button_behavior button_behaviors;$/;"	m	struct:nk_configuration_stacks	typeref:struct:nk_configuration_stacks::nk_config_stack_button_behavior
button_padding	include/nuklear.h	/^    struct nk_vec2 button_padding;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_vec2
buttons	include/nuklear.h	/^    struct nk_mouse_button buttons[NK_BUTTON_MAX];$/;"	m	struct:nk_mouse	typeref:struct:nk_mouse::nk_mouse_button
c	include/nuklear.h	/^    struct nk_vec2i c;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command_triangle::nk_vec2i
c	include/nuklear.h	/^    struct nk_vec2i c;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command_triangle_filled::nk_vec2i
c	include/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	m	struct:nk_alignof::Big
callback	include/nuklear.h	/^    nk_command_custom_callback callback;$/;"	m	struct:nk_command_custom
callback_data	include/nuklear.h	/^    nk_handle callback_data;$/;"	m	struct:nk_command_custom
calls	include/nuklear.h	/^    nk_size calls;$/;"	m	struct:nk_buffer
calls	include/nuklear.h	/^    nk_size calls;$/;"	m	struct:nk_memory_status
cap	include/nuklear.h	/^    nk_size cap;$/;"	m	struct:nk_pool
capacity	include/nuklear.h	/^    unsigned capacity;$/;"	m	struct:nk_pool
catStrings	src/utils.h	/^catStrings(i64 sourceACount, char* sourceA,$/;"	f
cdata	include/stb_truetype.h	/^stbtt_bakedchar cdata[96]; \/\/ ASCII 32..126 is 95 glyphs$/;"	v
cff	include/stb_truetype.h	/^    stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo
char_storage	include/nuklear.h	/^   short char_storage;$/;"	m	struct:nk_text_undo_record
chardata_for_range	include/nuklear.h	/^    struct nk_tt_packedchar *chardata_for_range; \/* output *\/$/;"	m	struct:nk_tt_pack_range	typeref:struct:nk_tt_pack_range::nk_tt_packedchar
chardata_for_range	include/stb_truetype.h	/^    stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anon18
charstrings	include/stb_truetype.h	/^    stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo
chart	include/nuklear.h	/^    struct nk_chart chart;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_chart
chart	include/nuklear.h	/^    struct nk_style_chart chart;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_chart
checkbox	include/nuklear.h	/^    struct nk_style_toggle checkbox;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_toggle
circle_segment_count	include/nuklear.h	/^    unsigned circle_segment_count; \/* number of segments used for circles: default to 22 *\/$/;"	m	struct:nk_convert_config
circle_vtx	include/nuklear.h	/^    struct nk_vec2 circle_vtx[12];$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_vec2
clicked	include/nuklear.h	/^    unsigned int clicked;$/;"	m	struct:nk_key
clicked	include/nuklear.h	/^    unsigned int clicked;$/;"	m	struct:nk_mouse_button
clicked_pos	include/nuklear.h	/^    struct nk_vec2 clicked_pos;$/;"	m	struct:nk_mouse_button	typeref:struct:nk_mouse_button::nk_vec2
clip	include/nuklear.h	/^    struct nk_clipboard clip;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_clipboard
clip	include/nuklear.h	/^    struct nk_clipboard clip;$/;"	m	struct:nk_text_edit	typeref:struct:nk_text_edit::nk_clipboard
clip	include/nuklear.h	/^    struct nk_rect clip;$/;"	m	struct:nk_command_buffer	typeref:struct:nk_command_buffer::nk_rect
clip	include/nuklear.h	/^    struct nk_rect clip;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_rect
clip_rect	include/nuklear.h	/^    struct nk_rect clip_rect;$/;"	m	struct:nk_draw_command	typeref:struct:nk_draw_command::nk_rect
clip_rect	include/nuklear.h	/^    struct nk_rect clip_rect;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_rect
close_button	include/nuklear.h	/^    struct nk_style_button close_button;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_style_button
close_symbol	include/nuklear.h	/^    enum nk_symbol_type close_symbol;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_style_window_header::nk_symbol_type
cmd_count	include/nuklear.h	/^    unsigned int cmd_count;$/;"	m	struct:nk_draw_list
cmd_offset	include/nuklear.h	/^    nk_size cmd_offset;$/;"	m	struct:nk_draw_list
codepoint	include/nuklear.h	/^    nk_rune codepoint;$/;"	m	struct:nk_font_glyph
col	include/nuklear.h	/^    struct nk_color col;$/;"	m	struct:nk_command_image	typeref:struct:nk_command_image::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_chart_slot	typeref:struct:nk_chart_slot::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_arc	typeref:struct:nk_command_arc::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_arc_filled	typeref:struct:nk_command_arc_filled::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_circle	typeref:struct:nk_command_circle::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_circle_filled	typeref:struct:nk_command_circle_filled::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_curve	typeref:struct:nk_command_curve::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_line	typeref:struct:nk_command_line::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_polygon	typeref:struct:nk_command_polygon::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_polygon_filled	typeref:struct:nk_command_polygon_filled::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_polyline	typeref:struct:nk_command_polyline::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_rect	typeref:struct:nk_command_rect::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_rect_filled	typeref:struct:nk_command_rect_filled::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command_triangle::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command_triangle_filled::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_chart::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	struct:nk_style_text	typeref:struct:nk_style_text::nk_color
color	include/nuklear.h	/^    struct nk_color color;$/;"	m	union:nk_style_item_data	typeref:struct:nk_style_item_data::nk_color
colors	include/nuklear.h	/^    struct nk_config_stack_color colors;$/;"	m	struct:nk_configuration_stacks	typeref:struct:nk_configuration_stacks::nk_config_stack_color
columns	include/nuklear.h	/^    int columns;$/;"	m	struct:nk_row_layout
combo	include/nuklear.h	/^    struct nk_style_combo combo;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_combo
combo_border	include/nuklear.h	/^    float combo_border;$/;"	m	struct:nk_style_window
combo_border_color	include/nuklear.h	/^    struct nk_color combo_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
combo_count	include/nuklear.h	/^    unsigned combo_count;$/;"	m	struct:nk_popup_state
combo_padding	include/nuklear.h	/^    struct nk_vec2 combo_padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
con_count	include/nuklear.h	/^    unsigned con_count, con_old;$/;"	m	struct:nk_popup_state
con_old	include/nuklear.h	/^    unsigned con_count, con_old;$/;"	m	struct:nk_popup_state
config	include/nuklear.h	/^    struct nk_convert_config config;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_convert_config
config	include/nuklear.h	/^    struct nk_font_config *config;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_font_config
config	include/nuklear.h	/^    struct nk_font_config *config;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_font_config
content_padding	include/nuklear.h	/^    struct nk_vec2 content_padding;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_vec2
contextual_border	include/nuklear.h	/^    float contextual_border;$/;"	m	struct:nk_style_window
contextual_border_color	include/nuklear.h	/^    struct nk_color contextual_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
contextual_button	include/nuklear.h	/^    struct nk_style_button contextual_button;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_button
contextual_padding	include/nuklear.h	/^    struct nk_vec2 contextual_padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
coord_type	include/nuklear.h	/^    enum nk_font_coord_type coord_type;$/;"	m	struct:nk_font_config	typeref:enum:nk_font_config::nk_font_coord_type
copy	include/nuklear.h	/^    nk_plugin_copy copy;$/;"	m	struct:nk_clipboard
count	include/nuklear.h	/^    int begin, end, count;$/;"	m	struct:nk_list_view
count	include/nuklear.h	/^    int count;$/;"	m	struct:nk_chart_slot
count	include/nuklear.h	/^    unsigned int count;$/;"	m	struct:nk_context
ctrl	include/nuklear.h	/^    struct nk_vec2i ctrl[2];$/;"	m	struct:nk_command_curve	typeref:struct:nk_command_curve::nk_vec2i
ctx	include/nuklear.h	/^    struct nk_context *ctx;$/;"	m	struct:nk_list_view	typeref:struct:nk_list_view::nk_context
current	include/nuklear.h	/^    struct nk_window *current;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_window
currentOffset	src/og_allocators.h	/^    memoryIndex currentOffset; \/\/ The current offset to the end of the used memory, initialize to zero$/;"	m	struct:__anon32
currentOffset	src/utils.h	/^    memoryIndex currentOffset; \/\/ The current offset to the end of the used memory, initialize to zero$/;"	m	struct:Arena
cursor	include/nuklear.h	/^    int cursor;$/;"	m	struct:nk_edit_state
cursor	include/nuklear.h	/^    int cursor;$/;"	m	struct:nk_property_state
cursor	include/nuklear.h	/^    int cursor;$/;"	m	struct:nk_text_edit
cursor	include/stb_truetype.h	/^    int cursor;$/;"	m	struct:__anon14
cursor_active	include/nuklear.h	/^    const struct nk_cursor *cursor_active;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_cursor
cursor_active	include/nuklear.h	/^    struct nk_style_item cursor_active;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
cursor_active	include/nuklear.h	/^    struct nk_style_item cursor_active;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
cursor_active	include/nuklear.h	/^    struct nk_style_item cursor_active;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
cursor_at_end_of_line	include/nuklear.h	/^    unsigned char cursor_at_end_of_line;$/;"	m	struct:nk_text_edit
cursor_border	include/nuklear.h	/^    float cursor_border;$/;"	m	struct:nk_style_progress
cursor_border_color	include/nuklear.h	/^    struct nk_color cursor_border_color;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_color
cursor_border_color	include/nuklear.h	/^    struct nk_color cursor_border_color;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_color
cursor_hover	include/nuklear.h	/^    struct nk_color cursor_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
cursor_hover	include/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
cursor_hover	include/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
cursor_hover	include/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
cursor_hover	include/nuklear.h	/^    struct nk_style_item cursor_hover;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_style_item
cursor_last	include/nuklear.h	/^    struct nk_cursor *cursor_last;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_cursor
cursor_normal	include/nuklear.h	/^    struct nk_color cursor_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
cursor_normal	include/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
cursor_normal	include/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
cursor_normal	include/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
cursor_normal	include/nuklear.h	/^    struct nk_style_item cursor_normal;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_style_item
cursor_rounding	include/nuklear.h	/^    float cursor_rounding;$/;"	m	struct:nk_style_progress
cursor_size	include/nuklear.h	/^    float cursor_size;$/;"	m	struct:nk_style_edit
cursor_size	include/nuklear.h	/^    struct nk_vec2 cursor_size;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_vec2
cursor_text_hover	include/nuklear.h	/^    struct nk_color cursor_text_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
cursor_text_normal	include/nuklear.h	/^    struct nk_color cursor_text_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
cursor_visible	include/nuklear.h	/^    int cursor_visible;$/;"	m	struct:nk_style
cursors	include/nuklear.h	/^    const struct nk_cursor *cursors[NK_CURSOR_COUNT];$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_cursor
cursors	include/nuklear.h	/^    struct nk_cursor cursors[NK_CURSOR_COUNT];$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_cursor
curve_segment_count	include/nuklear.h	/^    unsigned curve_segment_count; \/* number of segments used for curves: default to 22 *\/$/;"	m	struct:nk_convert_config
custom	include/nuklear.h	/^    struct nk_recti custom;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_recti
cx	include/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc
cx	include/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc_filled
cx	include/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex
cx	include/stb_truetype.h	/^    stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon20
cx1	include/stb_truetype.h	/^    stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon20
cy	include/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc
cy	include/nuklear.h	/^    short cx, cy;$/;"	m	struct:nk_command_arc_filled
cy	include/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex
cy	include/stb_truetype.h	/^    stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon20
cy1	include/stb_truetype.h	/^    stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon20
d	include/nuklear.h	/^    double d;$/;"	m	union:nk_property
data	include/nuklear.h	/^    const unsigned char* data; \/* pointer to .ttf file *\/$/;"	m	struct:nk_tt_fontinfo
data	include/nuklear.h	/^    union nk_page_data data;$/;"	m	struct:nk_page_element	typeref:union:nk_page_element::nk_page_data
data	include/nuklear.h	/^    union nk_style_item_data data;$/;"	m	struct:nk_style_item	typeref:union:nk_style_item::nk_style_item_data
data	include/stb_truetype.h	/^    unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo
data	include/stb_truetype.h	/^    unsigned char *data;$/;"	m	struct:__anon14
dayOfWeek_String	src/utils.h	/^global char dayOfWeek_String[7][10] = {$/;"	v
dec_button	include/nuklear.h	/^    struct nk_style_button dec_button;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_button
dec_button	include/nuklear.h	/^    struct nk_style_button dec_button;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_button
dec_button	include/nuklear.h	/^    struct nk_style_button dec_button;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_button
dec_symbol	include/nuklear.h	/^    enum nk_symbol_type dec_symbol;$/;"	m	struct:nk_style_scrollbar	typeref:enum:nk_style_scrollbar::nk_symbol_type
dec_symbol	include/nuklear.h	/^    enum nk_symbol_type dec_symbol;$/;"	m	struct:nk_style_slider	typeref:enum:nk_style_slider::nk_symbol_type
default_font	include/nuklear.h	/^    struct nk_font *default_font;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_font
delete_length	include/nuklear.h	/^   short delete_length;$/;"	m	struct:nk_text_undo_record
delta	include/nuklear.h	/^    struct nk_vec2 delta;$/;"	m	struct:nk_mouse	typeref:struct:nk_mouse::nk_vec2
delta_time_seconds	include/nuklear.h	/^    float delta_time_seconds;$/;"	m	struct:nk_context
descent	include/nuklear.h	/^    float ascent, descent;$/;"	m	struct:nk_baked_font
diff	include/nuklear.h	/^    diff = sizeof(Big) - sizeof(T), value = nk_helper<Big, diff>::value};};$/;"	e	enum:nk_alignof::__anon5
direction	include/nuklear.h	/^    float direction;$/;"	m	struct:nk_tt__active_edge
direction	include/stb_truetype.h	/^    float direction;$/;"	m	struct:stbtt__active_edge
direction	include/stb_truetype.h	/^    int direction;$/;"	m	struct:stbtt__active_edge
down	include/nuklear.h	/^    int down;$/;"	m	struct:nk_key
down	include/nuklear.h	/^    int down;$/;"	m	struct:nk_mouse_button
draw_begin	include/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle userdata);$/;"	m	struct:nk_style_button
draw_begin	include/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_progress
draw_begin	include/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_property
draw_begin	include/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_scrollbar
draw_begin	include/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_selectable
draw_begin	include/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_slider
draw_begin	include/nuklear.h	/^    void(*draw_begin)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_toggle
draw_end	include/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle userdata);$/;"	m	struct:nk_style_button
draw_end	include/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_progress
draw_end	include/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_property
draw_end	include/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_scrollbar
draw_end	include/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_selectable
draw_end	include/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_slider
draw_end	include/nuklear.h	/^    void(*draw_end)(struct nk_command_buffer*, nk_handle);$/;"	m	struct:nk_style_toggle
draw_list	include/nuklear.h	/^    struct nk_draw_list draw_list;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_draw_list
dx	include/stb_truetype.h	/^    int x,dx;$/;"	m	struct:stbtt__active_edge
edit	include/nuklear.h	/^    struct nk_edit_state edit;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_edit_state
edit	include/nuklear.h	/^    struct nk_style_edit edit;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_edit
edit	include/nuklear.h	/^    struct nk_style_edit edit;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_edit
elem_count	include/nuklear.h	/^    unsigned int elem_count;$/;"	m	struct:nk_draw_command
element_count	include/nuklear.h	/^    unsigned int element_count;$/;"	m	struct:nk_draw_list
elements	include/nuklear.h	/^    struct nk_buffer *elements;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_buffer
end	include/nuklear.h	/^    int begin, end, count;$/;"	m	struct:nk_list_view
end	include/nuklear.h	/^    nk_size begin, end, last;$/;"	m	struct:nk_command_buffer
end	include/nuklear.h	/^    nk_size end;$/;"	m	struct:nk_popup_buffer
end	include/nuklear.h	/^    struct nk_vec2i end;$/;"	m	struct:nk_command_curve	typeref:struct:nk_command_curve::nk_vec2i
end	include/nuklear.h	/^    struct nk_vec2i end;$/;"	m	struct:nk_command_line	typeref:struct:nk_command_line::nk_vec2i
end	include/nuklear.h	/^    struct nk_window *end;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_window
equal	include/stb_truetype.h	/^static int equal(float *a, float *b)$/;"	f
extra	include/nuklear.h	/^    struct nk_rp_node extra[2];$/;"	m	struct:nk_rp_context	typeref:struct:nk_rp_context::nk_rp_node
ey	include/nuklear.h	/^    float ey;$/;"	m	struct:nk_tt__active_edge
ey	include/stb_truetype.h	/^    float ey;$/;"	m	struct:stbtt__active_edge
f	include/nuklear.h	/^    float f;$/;"	m	union:nk_property
f32	src/utils.h	/^typedef float f32;$/;"	t
f32_epsilon	src/utils.h	/^global f32 f32_epsilon = FLT_EPSILON;$/;"	v
f32_max	src/utils.h	/^global f32 f32_max = FLT_MAX;$/;"	v
f32_max_exp	src/utils.h	/^global f32 f32_max_exp = FLT_MAX_EXP;$/;"	v
f64	src/utils.h	/^typedef double f64;$/;"	t
f64_epsilon	src/utils.h	/^global f64 f64_epsilon = DBL_EPSILON;$/;"	v
f64_max	src/utils.h	/^global f64 f64_max = DBL_MAX;$/;"	v
f64_max_exp	src/utils.h	/^global f64 f64_max_exp = DBL_MAX_EXP;$/;"	v
fallback	include/nuklear.h	/^    const struct nk_font_glyph *fallback;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_font_glyph
fallback_codepoint	include/nuklear.h	/^    nk_rune fallback_codepoint;$/;"	m	struct:nk_font
fallback_glyph	include/nuklear.h	/^    nk_rune fallback_glyph;$/;"	m	struct:nk_font_config
false	src/utils.h	/^#define false /;"	d
fdselect	include/stb_truetype.h	/^    stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo
fdx	include/nuklear.h	/^    float fx,fdx,fdy;$/;"	m	struct:nk_tt__active_edge
fdx	include/stb_truetype.h	/^    float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
fdy	include/nuklear.h	/^    float fx,fdx,fdy;$/;"	m	struct:nk_tt__active_edge
fdy	include/stb_truetype.h	/^    float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
filled	include/nuklear.h	/^    float filled;$/;"	m	struct:nk_row_layout
filter	include/nuklear.h	/^    nk_plugin_filter filter;$/;"	m	struct:nk_text_edit
first	src/utils.h	/^    Str8Node* first;$/;"	m	struct:Str8List
first_char	include/nuklear.h	/^   int first_char, length; \/* first char of row, and length *\/$/;"	m	struct:nk_text_find
first_free	include/nuklear.h	/^    void   *first_free;$/;"	m	struct:nk_tt__hheap
first_free	include/stb_truetype.h	/^    void   *first_free;$/;"	m	struct:stbtt__hheap
first_unicode_codepoint_in_range	include/nuklear.h	/^    int first_unicode_codepoint_in_range;$/;"	m	struct:nk_tt_pack_range
first_unicode_codepoint_in_range	include/stb_truetype.h	/^    int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and this is the first codepoint$/;"	m	struct:__anon18
first_x	include/stb_truetype.h	/^    float first_x, first_y;$/;"	m	struct:__anon28
first_y	include/stb_truetype.h	/^    float first_x, first_y;$/;"	m	struct:__anon28
fixed_background	include/nuklear.h	/^    struct nk_style_item fixed_background;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_style_item
flags	include/nuklear.h	/^    nk_flags flags;$/;"	m	struct:nk_panel
flags	include/nuklear.h	/^    nk_flags flags;$/;"	m	struct:nk_window
flags	include/nuklear.h	/^    struct nk_config_stack_flags flags;$/;"	m	struct:nk_configuration_stacks	typeref:struct:nk_configuration_stacks::nk_config_stack_flags
floats	include/nuklear.h	/^    struct nk_config_stack_float floats;$/;"	m	struct:nk_configuration_stacks	typeref:struct:nk_configuration_stacks::nk_config_stack_float
floor_floatToI32	src/utils.h	/^floor_floatToI32(f32 number) {$/;"	f
font	include/nuklear.h	/^    const struct nk_user_font *font;$/;"	m	struct:nk_command_text	typeref:struct:nk_command_text::nk_user_font
font	include/nuklear.h	/^    const struct nk_user_font *font;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_user_font
font	include/nuklear.h	/^    struct nk_baked_font *font;$/;"	m	struct:nk_font_config	typeref:struct:nk_font_config::nk_baked_font
font_num	include/nuklear.h	/^    int font_num;$/;"	m	struct:nk_font_atlas
font_size	include/nuklear.h	/^    float font_size;$/;"	m	struct:nk_tt_pack_range
font_size	include/stb_truetype.h	/^    float font_size;$/;"	m	struct:__anon18
fontdicts	include/stb_truetype.h	/^    stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo
fonts	include/nuklear.h	/^    struct nk_config_stack_user_font fonts;$/;"	m	struct:nk_configuration_stacks	typeref:struct:nk_configuration_stacks::nk_config_stack_user_font
fonts	include/nuklear.h	/^    struct nk_font *fonts;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_font
fontstart	include/nuklear.h	/^    int fontstart;\/* offset of start of font *\/$/;"	m	struct:nk_tt_fontinfo
fontstart	include/stb_truetype.h	/^    int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo
footer_height	include/nuklear.h	/^    float footer_height;$/;"	m	struct:nk_panel
foreground	include/nuklear.h	/^    struct nk_color foreground;$/;"	m	struct:nk_command_text	typeref:struct:nk_command_text::nk_color
format	include/nuklear.h	/^    enum nk_draw_vertex_layout_format format;$/;"	m	struct:nk_draw_vertex_layout_element	typeref:enum:nk_draw_vertex_layout_element::nk_draw_vertex_layout_format
free	include/nuklear.h	/^    nk_plugin_free free;$/;"	m	struct:nk_allocator
free_head	include/nuklear.h	/^    struct nk_rp_node *free_head;$/;"	m	struct:nk_rp_context	typeref:struct:nk_rp_context::nk_rp_node
freelist	include/nuklear.h	/^    struct nk_page_element *freelist;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_page_element
freelist	include/nuklear.h	/^    struct nk_page_element *freelist;$/;"	m	struct:nk_pool	typeref:struct:nk_pool::nk_page_element
ftex	include/stb_truetype.h	/^GLuint ftex;$/;"	v
fx	include/nuklear.h	/^    float fx,fdx,fdy;$/;"	m	struct:nk_tt__active_edge
fx	include/stb_truetype.h	/^    float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge
g	include/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color
g	include/nuklear.h	/^struct nk_colorf {float r,g,b,a;};$/;"	m	struct:nk_colorf
game_Input	src/game.h	/^typedef struct game_Input {$/;"	s
game_Input	src/game.h	/^} game_Input;$/;"	t	typeref:struct:game_Input
global	src/utils.h	/^#define global /;"	d
global_alpha	include/nuklear.h	/^    float global_alpha; \/* global alpha value *\/$/;"	m	struct:nk_convert_config
glyf	include/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
glyf	include/stb_truetype.h	/^    int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
glyph1	include/stb_truetype.h	/^    int glyph1; \/\/ use stbtt_FindGlyphIndex$/;"	m	struct:stbtt_kerningentry
glyph2	include/stb_truetype.h	/^    int glyph2;$/;"	m	struct:stbtt_kerningentry
glyph_count	include/nuklear.h	/^    int glyph_count;$/;"	m	struct:nk_font_atlas
glyph_count	include/nuklear.h	/^    nk_rune glyph_count;$/;"	m	struct:nk_baked_font
glyph_offset	include/nuklear.h	/^    nk_rune glyph_offset;$/;"	m	struct:nk_baked_font
glyphs	include/nuklear.h	/^    struct nk_font_glyph *glyphs;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_font_glyph
glyphs	include/nuklear.h	/^    struct nk_font_glyph *glyphs;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_font_glyph
gpos	include/stb_truetype.h	/^    int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
grab	include/nuklear.h	/^    unsigned char grab;$/;"	m	struct:nk_mouse
grabbed	include/nuklear.h	/^    unsigned char grabbed;$/;"	m	struct:nk_mouse
group_border	include/nuklear.h	/^    float group_border;$/;"	m	struct:nk_style_window
group_border_color	include/nuklear.h	/^    struct nk_color group_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
group_padding	include/nuklear.h	/^    struct nk_vec2 group_padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
grow_factor	include/nuklear.h	/^    float grow_factor;$/;"	m	struct:nk_buffer
gsubrs	include/stb_truetype.h	/^    stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo
h	include/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart
h	include/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state
h	include/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
h	include/nuklear.h	/^    nk_rp_coord w, h;$/;"	m	struct:nk_rp_rect
h	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle
h	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle_filled
h	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_custom
h	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_image
h	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect
h	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_filled
h	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_multi_color
h	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_scissor
h	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_text
h	include/nuklear.h	/^   int w,h,stride;$/;"	m	struct:nk_tt__bitmap
h	include/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image
h	include/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect
h	include/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti
h	include/stb_truetype.h	/^    int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
h	include/stb_truetype.h	/^    int w,h,stride;$/;"	m	struct:__anon21
h_oversample	include/nuklear.h	/^    unsigned char h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_range
h_oversample	include/nuklear.h	/^    unsigned int   h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_context
h_oversample	include/stb_truetype.h	/^    unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon18
h_oversample	include/stb_truetype.h	/^    unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
handle	include/nuklear.h	/^    struct nk_user_font handle;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_user_font
handle	include/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image
has_preferred_x	include/nuklear.h	/^    unsigned char has_preferred_x;$/;"	m	struct:nk_text_edit
has_scrolling	include/nuklear.h	/^    unsigned int has_scrolling;$/;"	m	struct:nk_panel
head	include/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
head	include/nuklear.h	/^    struct nk_tt__hheap_chunk *head;$/;"	m	struct:nk_tt__hheap	typeref:struct:nk_tt__hheap::nk_tt__hheap_chunk
head	include/stb_truetype.h	/^    int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
head	include/stb_truetype.h	/^    struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap::stbtt__hheap_chunk
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_arc	typeref:struct:nk_command_arc::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_arc_filled	typeref:struct:nk_command_arc_filled::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_circle	typeref:struct:nk_command_circle::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_circle_filled	typeref:struct:nk_command_circle_filled::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_curve	typeref:struct:nk_command_curve::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_custom	typeref:struct:nk_command_custom::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_image	typeref:struct:nk_command_image::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_line	typeref:struct:nk_command_line::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_polygon	typeref:struct:nk_command_polygon::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_polygon_filled	typeref:struct:nk_command_polygon_filled::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_polyline	typeref:struct:nk_command_polyline::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_rect	typeref:struct:nk_command_rect::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_rect_filled	typeref:struct:nk_command_rect_filled::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command_rect_multi_color::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_scissor	typeref:struct:nk_command_scissor::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_text	typeref:struct:nk_command_text::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_triangle	typeref:struct:nk_command_triangle::nk_command
header	include/nuklear.h	/^    struct nk_command header;$/;"	m	struct:nk_command_triangle_filled	typeref:struct:nk_command_triangle_filled::nk_command
header	include/nuklear.h	/^    struct nk_rect header;$/;"	m	struct:nk_popup_state	typeref:struct:nk_popup_state::nk_rect
header	include/nuklear.h	/^    struct nk_style_window_header header;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_style_window_header
header_height	include/nuklear.h	/^    float header_height;$/;"	m	struct:nk_panel
height	include/nuklear.h	/^    float height;$/;"	m	struct:nk_baked_font
height	include/nuklear.h	/^    float height;$/;"	m	struct:nk_command_text
height	include/nuklear.h	/^    float height;$/;"	m	struct:nk_row_layout
height	include/nuklear.h	/^    float height;$/;"	m	struct:nk_user_font
height	include/nuklear.h	/^    float width, height;$/;"	m	struct:nk_user_font_glyph
height	include/nuklear.h	/^    int   height;$/;"	m	struct:nk_tt_pack_context
height	include/nuklear.h	/^    int height;$/;"	m	struct:nk_rp_context
height	include/nuklear.h	/^   float height; \/* height of line *\/$/;"	m	struct:nk_text_find
height	include/stb_truetype.h	/^    int   height;$/;"	m	struct:stbtt_pack_context
height	include/stb_truetype.h	/^    int width,height;$/;"	m	struct:__anon30
heuristic	include/nuklear.h	/^    int heuristic;$/;"	m	struct:nk_rp_context
hhea	include/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
hhea	include/stb_truetype.h	/^    int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
highlight	include/nuklear.h	/^    struct nk_color highlight;$/;"	m	struct:nk_chart_slot	typeref:struct:nk_chart_slot::nk_color
hmtx	include/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
hmtx	include/stb_truetype.h	/^    int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
hover	include/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_style_item
hover	include/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_style_item
hover	include/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_style_item
hover	include/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
hover	include/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_item
hover	include/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
hover	include/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
hover	include/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
hover	include/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_style_item
hover	include/nuklear.h	/^    struct nk_style_item hover;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_style_item
hover_active	include/nuklear.h	/^    struct nk_style_item hover_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
i	include/nuklear.h	/^    int i;$/;"	m	union:nk_property
i16	src/utils.h	/^typedef int16_t i16;$/;"	t
i16_max	src/utils.h	/^global i16 i16_max = (i16)0x7fff;$/;"	v
i16_min	src/utils.h	/^global i16 i16_min = (i16)0x0000;$/;"	v
i32	src/utils.h	/^typedef int32_t i32;$/;"	t
i32_max	src/utils.h	/^global i32 i32_max = (i32)0x7fffffff;$/;"	v
i32_min	src/utils.h	/^global i32 i32_min = (i32)0x00000000;$/;"	v
i64	src/utils.h	/^typedef int64_t i64;$/;"	t
i64_max	src/utils.h	/^global i64 i64_max = (i64)0x7fffffffffffffffllu;$/;"	v
i64_min	src/utils.h	/^global i64 i64_min = (i64)0x0000000000000000llu;$/;"	v
i8	src/utils.h	/^typedef int8_t i8;$/;"	t
i8_max	src/utils.h	/^global i8 i8_max = (i8)0x7f;$/;"	v
i8_min	src/utils.h	/^global i8 i8_min = (i8)0x00;$/;"	v
id	include/nuklear.h	/^    int id;$/;"	m	struct:nk_rp_rect
id	include/nuklear.h	/^typedef union {void *ptr; int id;} nk_handle;$/;"	m	union:__anon2
id	include/stb_truetype.h	/^    int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
image	include/nuklear.h	/^    struct nk_image image;$/;"	m	union:nk_style_item_data	typeref:struct:nk_style_item_data::nk_image
image_padding	include/nuklear.h	/^    struct nk_vec2 image_padding;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_vec2
image_padding	include/nuklear.h	/^    struct nk_vec2 image_padding;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_vec2
img	include/nuklear.h	/^    struct nk_image img;$/;"	m	struct:nk_command_image	typeref:struct:nk_command_image::nk_image
img	include/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	m	struct:nk_cursor	typeref:struct:nk_cursor::nk_image
inc_button	include/nuklear.h	/^    struct nk_style_button inc_button;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_button
inc_button	include/nuklear.h	/^    struct nk_style_button inc_button;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_button
inc_button	include/nuklear.h	/^    struct nk_style_button inc_button;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_button
inc_symbol	include/nuklear.h	/^    enum nk_symbol_type inc_symbol;$/;"	m	struct:nk_style_scrollbar	typeref:enum:nk_style_scrollbar::nk_symbol_type
inc_symbol	include/nuklear.h	/^    enum nk_symbol_type inc_symbol;$/;"	m	struct:nk_style_slider	typeref:enum:nk_style_slider::nk_symbol_type
indent	include/nuklear.h	/^    float indent;$/;"	m	struct:nk_style_tab
index	include/nuklear.h	/^    int index;$/;"	m	struct:nk_chart_slot
index	include/nuklear.h	/^    int index;$/;"	m	struct:nk_row_layout
indexToLocFormat	include/nuklear.h	/^    int indexToLocFormat; \/* format needed to map from glyph index to glyph *\/$/;"	m	struct:nk_tt_fontinfo
indexToLocFormat	include/stb_truetype.h	/^    int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo
index_map	include/nuklear.h	/^    int index_map; \/* a cmap mapping for our chosen character encoding *\/$/;"	m	struct:nk_tt_fontinfo
index_map	include/stb_truetype.h	/^    int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo
info	include/nuklear.h	/^    struct nk_baked_font info;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_baked_font
info	include/nuklear.h	/^    struct nk_tt_fontinfo info;$/;"	m	struct:nk_font_bake_data	typeref:struct:nk_font_bake_data::nk_tt_fontinfo
init_mode	include/nuklear.h	/^    int init_mode;$/;"	m	struct:nk_rp_context
initialized	include/nuklear.h	/^    unsigned char initialized;$/;"	m	struct:nk_text_edit
input	include/nuklear.h	/^    struct nk_input input;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_input
insert_length	include/nuklear.h	/^   short insert_length;$/;"	m	struct:nk_text_undo_record
internal	src/utils.h	/^#define internal /;"	d
invert	include/nuklear.h	/^    int invert;$/;"	m	struct:nk_tt__edge
invert	include/stb_truetype.h	/^    int invert;$/;"	m	struct:stbtt__edge
item	include/nuklear.h	/^    struct nk_rect item;$/;"	m	struct:nk_row_layout	typeref:struct:nk_row_layout::nk_rect
item_height	include/nuklear.h	/^    float item_height;$/;"	m	struct:nk_row_layout
item_offset	include/nuklear.h	/^    float item_offset;$/;"	m	struct:nk_row_layout
item_width	include/nuklear.h	/^    float item_width;$/;"	m	struct:nk_row_layout
jai_strtof	src/utils.h	/^jai_strtof(readOnly char* str, char** endPtr) {$/;"	f
jai_strtoll	src/utils.h	/^jai_strtoll(readOnly char* str, char** endPtr, i32 base) {$/;"	f
kern	include/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
kern	include/stb_truetype.h	/^    int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
keyboard	include/nuklear.h	/^    struct nk_keyboard keyboard;$/;"	m	struct:nk_input	typeref:struct:nk_input::nk_keyboard
keys	include/nuklear.h	/^    nk_hash keys[NK_VALUE_PAGE_CAPACITY];$/;"	m	struct:nk_table
keys	include/nuklear.h	/^    struct nk_key keys[NK_KEY_MAX];$/;"	m	struct:nk_keyboard	typeref:struct:nk_keyboard::nk_key
kind	include/nuklear.h	/^    enum nk_property_kind kind;$/;"	m	struct:nk_property_variant	typeref:enum:nk_property_variant::nk_property_kind
label_active	include/nuklear.h	/^    struct nk_color label_active;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
label_active	include/nuklear.h	/^    struct nk_color label_active;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_color
label_active	include/nuklear.h	/^    struct nk_color label_active;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_color
label_hover	include/nuklear.h	/^    struct nk_color label_hover;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
label_hover	include/nuklear.h	/^    struct nk_color label_hover;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_color
label_hover	include/nuklear.h	/^    struct nk_color label_hover;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_color
label_normal	include/nuklear.h	/^    struct nk_color label_normal;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
label_normal	include/nuklear.h	/^    struct nk_color label_normal;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_color
label_normal	include/nuklear.h	/^    struct nk_color label_normal;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_color
label_padding	include/nuklear.h	/^    struct nk_vec2 label_padding;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_vec2
last	include/nuklear.h	/^    nk_size begin, end, last;$/;"	m	struct:nk_command_buffer
last	include/nuklear.h	/^    nk_size last;$/;"	m	struct:nk_popup_buffer
last	include/nuklear.h	/^    struct nk_vec2 last;$/;"	m	struct:nk_chart_slot	typeref:struct:nk_chart_slot::nk_vec2
last	src/utils.h	/^    Str8Node* last;$/;"	m	struct:Str8List
last_widget_state	include/nuklear.h	/^    nk_flags last_widget_state;$/;"	m	struct:nk_context
layout	include/nuklear.h	/^    struct nk_panel *layout;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_panel
left	include/nuklear.h	/^    struct nk_color left;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command_rect_multi_color::nk_color
len	include/nuklear.h	/^    int len; \/* in codepoints\/runes\/glyphs *\/$/;"	m	struct:nk_str
length	include/nuklear.h	/^    int length;$/;"	m	struct:nk_command_text
length	include/nuklear.h	/^    int length;$/;"	m	struct:nk_property_state
length	include/nuklear.h	/^   int first_char, length; \/* first char of row, and length *\/$/;"	m	struct:nk_text_find
length	src/utils.h	/^    memoryIndex length;$/;"	m	struct:Str8
line_AA	include/nuklear.h	/^    enum nk_anti_aliasing line_AA; \/* line anti-aliasing flag can be turned off if you are tight on memory *\/$/;"	m	struct:nk_convert_config	typeref:enum:nk_convert_config::nk_anti_aliasing
line_AA	include/nuklear.h	/^    enum nk_anti_aliasing line_AA;$/;"	m	struct:nk_draw_list	typeref:enum:nk_draw_list::nk_anti_aliasing
line_thickness	include/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_arc
line_thickness	include/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_circle
line_thickness	include/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_curve
line_thickness	include/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_line
line_thickness	include/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_polygon
line_thickness	include/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_polyline
line_thickness	include/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_rect
line_thickness	include/nuklear.h	/^    unsigned short line_thickness;$/;"	m	struct:nk_command_triangle
loca	include/nuklear.h	/^    int loca,head,glyf,hhea,hmtx,kern; \/* table locations as offset from start of .ttf *\/$/;"	m	struct:nk_tt_fontinfo
loca	include/stb_truetype.h	/^    int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
localPersist	src/utils.h	/^#define localPersist /;"	d
machine_epsilon_f32	src/utils.h	/^global f32 machine_epsilon_f32 = 1.1920929e-7f;$/;"	v
machine_epsilon_f64	src/utils.h	/^global f64 machine_epsilon_f64 = 2.220446e-16;$/;"	v
main	include/stb_truetype.h	/^int main(int argc, char **argv)$/;"	f
main	src/sdl2_main.c	/^main(int argCount, char** args) {$/;"	f
marker	include/nuklear.h	/^    struct nk_buffer_marker marker[NK_BUFFER_MAX];$/;"	m	struct:nk_buffer	typeref:struct:nk_buffer::nk_buffer_marker
max	include/nuklear.h	/^    float min, max, range;$/;"	m	struct:nk_chart_slot
max_value	include/nuklear.h	/^    union nk_property max_value;$/;"	m	struct:nk_property_variant	typeref:union:nk_property_variant::nk_property
max_x	include/nuklear.h	/^    float at_x, at_y, max_x;$/;"	m	struct:nk_panel
max_x	include/stb_truetype.h	/^    stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon28
max_y	include/stb_truetype.h	/^    stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon28
maximize_symbol	include/nuklear.h	/^    enum nk_symbol_type maximize_symbol;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_style_window_header::nk_symbol_type
memory	include/nuklear.h	/^    struct nk_buffer memory;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_buffer
memory	include/nuklear.h	/^    struct nk_memory memory;$/;"	m	struct:nk_buffer	typeref:struct:nk_buffer::nk_memory
memory	include/nuklear.h	/^    void *memory;$/;"	m	struct:nk_memory_status
memoryBlockStart	src/og_allocators.h	/^    memoryIndex memoryBlockStart; \/\/ The previous offset, set using function, initialize to zero$/;"	m	struct:__anon32
memoryBlockStart	src/utils.h	/^    memoryIndex memoryBlockStart; \/\/ The previous offset, set using function, initialize to zero$/;"	m	struct:Arena
memoryIndex	src/utils.h	/^typedef size_t memoryIndex;$/;"	t
menu	include/nuklear.h	/^    struct nk_menu_state menu;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_menu_state
menu_border	include/nuklear.h	/^    float menu_border;$/;"	m	struct:nk_style_window
menu_border_color	include/nuklear.h	/^    struct nk_color menu_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
menu_button	include/nuklear.h	/^    struct nk_style_button menu_button;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_button
menu_padding	include/nuklear.h	/^    struct nk_vec2 menu_padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
merge_mode	include/nuklear.h	/^    unsigned char merge_mode;$/;"	m	struct:nk_font_config
min	include/nuklear.h	/^    float min, max, range;$/;"	m	struct:nk_chart_slot
min_height	include/nuklear.h	/^    float min_height;$/;"	m	struct:nk_row_layout
min_row_height_padding	include/nuklear.h	/^    float min_row_height_padding;$/;"	m	struct:nk_style_window
min_size	include/nuklear.h	/^    struct nk_vec2 min_size;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
min_value	include/nuklear.h	/^    union nk_property min_value;$/;"	m	struct:nk_property_variant	typeref:union:nk_property_variant::nk_property
min_x	include/stb_truetype.h	/^    stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon28
min_y	include/stb_truetype.h	/^    stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anon28
minimize_button	include/nuklear.h	/^    struct nk_style_button minimize_button;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_style_button
minimize_symbol	include/nuklear.h	/^    enum nk_symbol_type minimize_symbol;$/;"	m	struct:nk_style_window_header	typeref:enum:nk_style_window_header::nk_symbol_type
mode	include/nuklear.h	/^    unsigned char mode;$/;"	m	struct:nk_edit_state
mode	include/nuklear.h	/^    unsigned char mode;$/;"	m	struct:nk_text_edit
month_String	src/utils.h	/^global char month_String[12][10] = {$/;"	v
mouse	include/nuklear.h	/^    struct nk_mouse mouse;$/;"	m	struct:nk_input	typeref:struct:nk_input::nk_mouse
my_stbtt_initfont	include/stb_truetype.h	/^void my_stbtt_initfont(void)$/;"	f
my_stbtt_print	include/stb_truetype.h	/^void my_stbtt_print(float x, float y, char *text)$/;"	f
n	include/nuklear.h	/^    struct nk_font_config *n;$/;"	m	struct:nk_font_config	typeref:struct:nk_font_config::nk_font_config
name	include/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_edit_state
name	include/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_popup_state
name	include/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_property_state
name	include/nuklear.h	/^    nk_hash name;$/;"	m	struct:nk_window
name_string	include/nuklear.h	/^    char name_string[NK_WINDOW_MAX_NAME];$/;"	m	struct:nk_window
needed	include/nuklear.h	/^    nk_size needed;$/;"	m	struct:nk_buffer
needed	include/nuklear.h	/^    nk_size needed;$/;"	m	struct:nk_memory_status
next	include/nuklear.h	/^    nk_size next;$/;"	m	struct:nk_command
next	include/nuklear.h	/^    struct nk_font *next;$/;"	m	struct:nk_font	typeref:struct:nk_font::nk_font
next	include/nuklear.h	/^    struct nk_font_config *next;$/;"	m	struct:nk_font_config	typeref:struct:nk_font_config::nk_font_config
next	include/nuklear.h	/^    struct nk_page *next;$/;"	m	struct:nk_page	typeref:struct:nk_page::nk_page
next	include/nuklear.h	/^    struct nk_page_element *next;$/;"	m	struct:nk_page_element	typeref:struct:nk_page_element::nk_page_element
next	include/nuklear.h	/^    struct nk_rp_node  *next;$/;"	m	struct:nk_rp_node	typeref:struct:nk_rp_node::nk_rp_node
next	include/nuklear.h	/^    struct nk_table *next, *prev;$/;"	m	struct:nk_table	typeref:struct:nk_table::nk_table
next	include/nuklear.h	/^    struct nk_tt__active_edge *next;$/;"	m	struct:nk_tt__active_edge	typeref:struct:nk_tt__active_edge::nk_tt__active_edge
next	include/nuklear.h	/^    struct nk_tt__hheap_chunk *next;$/;"	m	struct:nk_tt__hheap_chunk	typeref:struct:nk_tt__hheap_chunk::nk_tt__hheap_chunk
next	include/nuklear.h	/^    struct nk_window *next;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_window
next	include/stb_truetype.h	/^    struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge::stbtt__active_edge
next	include/stb_truetype.h	/^    struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk::stbtt__hheap_chunk
next	src/utils.h	/^    Str8Node* next;$/;"	m	struct:Str8Node
nk__barrier	include/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier;$/;"	v
nk__barrier2	include/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier2;$/;"	v
nk__barrier3	include/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier3;$/;"	v
nk__barrier4	include/nuklear.h	/^NK_GLOBAL unsigned char *nk__barrier4;$/;"	v
nk__begin	include/nuklear.h	/^nk__begin(struct nk_context *ctx)$/;"	f
nk__dout	include/nuklear.h	/^NK_GLOBAL unsigned char *nk__dout;$/;"	v
nk__draw_begin	include/nuklear.h	/^nk__draw_begin(const struct nk_context *ctx,$/;"	f
nk__draw_end	include/nuklear.h	/^nk__draw_end(const struct nk_context *ctx, const struct nk_buffer *buffer)$/;"	f
nk__draw_list_begin	include/nuklear.h	/^nk__draw_list_begin(const struct nk_draw_list *canvas, const struct nk_buffer *buffer)$/;"	f
nk__draw_list_end	include/nuklear.h	/^nk__draw_list_end(const struct nk_draw_list *canvas, const struct nk_buffer *buffer)$/;"	f
nk__draw_list_next	include/nuklear.h	/^nk__draw_list_next(const struct nk_draw_command *cmd,$/;"	f
nk__draw_next	include/nuklear.h	/^nk__draw_next(const struct nk_draw_command *cmd,$/;"	f
nk__in2	include/nuklear.h	/^    #define nk__in2(/;"	d
nk__in3	include/nuklear.h	/^    #define nk__in3(/;"	d
nk__in4	include/nuklear.h	/^    #define nk__in4(/;"	d
nk__lit	include/nuklear.h	/^nk__lit(unsigned char *data, unsigned int length)$/;"	f
nk__match	include/nuklear.h	/^nk__match(unsigned char *data, unsigned int length)$/;"	f
nk__next	include/nuklear.h	/^nk__next(struct nk_context *ctx, const struct nk_command *cmd)$/;"	f
nk_add_value	include/nuklear.h	/^nk_add_value(struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_adler32	include/nuklear.h	/^nk_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen)$/;"	f
nk_alignof	include/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	s
nk_allocation_type	include/nuklear.h	/^enum nk_allocation_type {$/;"	g
nk_allocator	include/nuklear.h	/^struct nk_allocator {$/;"	s
nk_anti_aliasing	include/nuklear.h	/^enum nk_anti_aliasing {NK_ANTI_ALIASING_OFF, NK_ANTI_ALIASING_ON};$/;"	g
nk_baked_font	include/nuklear.h	/^struct nk_baked_font {$/;"	s
nk_baker_align	include/nuklear.h	/^NK_GLOBAL const nk_size nk_baker_align = NK_ALIGNOF(struct nk_font_baker);$/;"	v
nk_begin	include/nuklear.h	/^nk_begin(struct nk_context *ctx, const char *title,$/;"	f
nk_begin_titled	include/nuklear.h	/^nk_begin_titled(struct nk_context *ctx, const char *name, const char *title,$/;"	f
nk_black	include/nuklear.h	/^NK_GLOBAL const struct nk_color nk_black = {0,0,0,255};$/;"	v	typeref:struct:nk_color
nk_blue	include/nuklear.h	/^NK_GLOBAL const struct nk_color nk_blue = {0,0,255,255};$/;"	v	typeref:struct:nk_color
nk_buffer	include/nuklear.h	/^struct nk_buffer {$/;"	s
nk_buffer_align	include/nuklear.h	/^nk_buffer_align(void *unaligned,$/;"	f
nk_buffer_alloc	include/nuklear.h	/^nk_buffer_alloc(struct nk_buffer *b, enum nk_buffer_allocation_type type,$/;"	f
nk_buffer_allocation_type	include/nuklear.h	/^enum nk_buffer_allocation_type {$/;"	g
nk_buffer_clear	include/nuklear.h	/^nk_buffer_clear(struct nk_buffer *b)$/;"	f
nk_buffer_free	include/nuklear.h	/^nk_buffer_free(struct nk_buffer *b)$/;"	f
nk_buffer_info	include/nuklear.h	/^nk_buffer_info(struct nk_memory_status *s, struct nk_buffer *b)$/;"	f
nk_buffer_init	include/nuklear.h	/^nk_buffer_init(struct nk_buffer *b, const struct nk_allocator *a,$/;"	f
nk_buffer_init_default	include/nuklear.h	/^nk_buffer_init_default(struct nk_buffer *buffer)$/;"	f
nk_buffer_init_fixed	include/nuklear.h	/^nk_buffer_init_fixed(struct nk_buffer *b, void *m, nk_size size)$/;"	f
nk_buffer_mark	include/nuklear.h	/^nk_buffer_mark(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)$/;"	f
nk_buffer_marker	include/nuklear.h	/^struct nk_buffer_marker {$/;"	s
nk_buffer_memory	include/nuklear.h	/^nk_buffer_memory(struct nk_buffer *buffer)$/;"	f
nk_buffer_memory_const	include/nuklear.h	/^nk_buffer_memory_const(const struct nk_buffer *buffer)$/;"	f
nk_buffer_push	include/nuklear.h	/^nk_buffer_push(struct nk_buffer *b, enum nk_buffer_allocation_type type,$/;"	f
nk_buffer_realloc	include/nuklear.h	/^nk_buffer_realloc(struct nk_buffer *b, nk_size capacity, nk_size *size)$/;"	f
nk_buffer_reset	include/nuklear.h	/^nk_buffer_reset(struct nk_buffer *buffer, enum nk_buffer_allocation_type type)$/;"	f
nk_buffer_total	include/nuklear.h	/^nk_buffer_total(struct nk_buffer *buffer)$/;"	f
nk_build	include/nuklear.h	/^nk_build(struct nk_context *ctx)$/;"	f
nk_build_align	include/nuklear.h	/^NK_GLOBAL const nk_size nk_build_align = NK_ALIGNOF(struct nk_font_bake_data);$/;"	v
nk_button_behavior	include/nuklear.h	/^enum nk_button_behavior {NK_BUTTON_DEFAULT, NK_BUTTON_REPEATER};$/;"	g
nk_button_behavior	include/nuklear.h	/^nk_button_behavior(nk_flags *state, struct nk_rect r,$/;"	f
nk_button_color	include/nuklear.h	/^nk_button_color(struct nk_context *ctx, struct nk_color color)$/;"	f
nk_button_image	include/nuklear.h	/^nk_button_image(struct nk_context *ctx, struct nk_image img)$/;"	f
nk_button_image_label	include/nuklear.h	/^NK_API int nk_button_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_button_image_label_styled	include/nuklear.h	/^NK_API int nk_button_image_label_styled(struct nk_context *ctx,$/;"	f
nk_button_image_styled	include/nuklear.h	/^nk_button_image_styled(struct nk_context *ctx, const struct nk_style_button *style,$/;"	f
nk_button_image_text	include/nuklear.h	/^nk_button_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_button_image_text_styled	include/nuklear.h	/^nk_button_image_text_styled(struct nk_context *ctx,$/;"	f
nk_button_label	include/nuklear.h	/^NK_API int nk_button_label(struct nk_context *ctx, const char *title)$/;"	f
nk_button_label_styled	include/nuklear.h	/^NK_API int nk_button_label_styled(struct nk_context *ctx,$/;"	f
nk_button_pop_behavior	include/nuklear.h	/^nk_button_pop_behavior(struct nk_context *ctx)$/;"	f
nk_button_push_behavior	include/nuklear.h	/^nk_button_push_behavior(struct nk_context *ctx, enum nk_button_behavior behavior)$/;"	f
nk_button_set_behavior	include/nuklear.h	/^nk_button_set_behavior(struct nk_context *ctx, enum nk_button_behavior behavior)$/;"	f
nk_button_symbol	include/nuklear.h	/^nk_button_symbol(struct nk_context *ctx, enum nk_symbol_type symbol)$/;"	f
nk_button_symbol_label	include/nuklear.h	/^NK_API int nk_button_symbol_label(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f
nk_button_symbol_label_styled	include/nuklear.h	/^NK_API int nk_button_symbol_label_styled(struct nk_context *ctx,$/;"	f
nk_button_symbol_styled	include/nuklear.h	/^nk_button_symbol_styled(struct nk_context *ctx,$/;"	f
nk_button_symbol_text	include/nuklear.h	/^nk_button_symbol_text(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f
nk_button_symbol_text_styled	include/nuklear.h	/^nk_button_symbol_text_styled(struct nk_context *ctx,$/;"	f
nk_button_text	include/nuklear.h	/^nk_button_text(struct nk_context *ctx, const char *title, int len)$/;"	f
nk_button_text_styled	include/nuklear.h	/^nk_button_text_styled(struct nk_context *ctx,$/;"	f
nk_buttons	include/nuklear.h	/^enum nk_buttons {$/;"	g
nk_byte	include/nuklear.h	/^typedef NK_UINT8 nk_byte;$/;"	t
nk_char	include/nuklear.h	/^typedef NK_INT8 nk_char;$/;"	t
nk_char_align	include/nuklear.h	/^NK_GLOBAL const nk_size nk_char_align = NK_ALIGNOF(struct nk_tt_packedchar);$/;"	v
nk_chart	include/nuklear.h	/^struct nk_chart {$/;"	s
nk_chart_add_slot	include/nuklear.h	/^nk_chart_add_slot(struct nk_context *ctx, const enum nk_chart_type type,$/;"	f
nk_chart_add_slot_colored	include/nuklear.h	/^nk_chart_add_slot_colored(struct nk_context *ctx, const enum nk_chart_type type,$/;"	f
nk_chart_begin	include/nuklear.h	/^nk_chart_begin(struct nk_context *ctx, const enum nk_chart_type type,$/;"	f
nk_chart_begin_colored	include/nuklear.h	/^nk_chart_begin_colored(struct nk_context *ctx, enum nk_chart_type type,$/;"	f
nk_chart_end	include/nuklear.h	/^nk_chart_end(struct nk_context *ctx)$/;"	f
nk_chart_event	include/nuklear.h	/^enum nk_chart_event     {NK_CHART_HOVERING = 0x01, NK_CHART_CLICKED = 0x02};$/;"	g
nk_chart_push	include/nuklear.h	/^nk_chart_push(struct nk_context *ctx, float value)$/;"	f
nk_chart_push_column	include/nuklear.h	/^nk_chart_push_column(const struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_chart_push_line	include/nuklear.h	/^nk_chart_push_line(struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_chart_push_slot	include/nuklear.h	/^nk_chart_push_slot(struct nk_context *ctx, float value, int slot)$/;"	f
nk_chart_slot	include/nuklear.h	/^struct nk_chart_slot {$/;"	s
nk_chart_type	include/nuklear.h	/^enum nk_chart_type      {NK_CHART_LINES, NK_CHART_COLUMN, NK_CHART_MAX};$/;"	g
nk_check_flags_label	include/nuklear.h	/^NK_API unsigned int nk_check_flags_label(struct nk_context *ctx, const char *label,$/;"	f
nk_check_flags_text	include/nuklear.h	/^nk_check_flags_text(struct nk_context *ctx, const char *text, int len,$/;"	f
nk_check_label	include/nuklear.h	/^NK_API int nk_check_label(struct nk_context *ctx, const char *label, int active)$/;"	f
nk_check_text	include/nuklear.h	/^nk_check_text(struct nk_context *ctx, const char *text, int len, int active)$/;"	f
nk_checkbox_flags_label	include/nuklear.h	/^NK_API int nk_checkbox_flags_label(struct nk_context *ctx, const char *label,$/;"	f
nk_checkbox_flags_text	include/nuklear.h	/^nk_checkbox_flags_text(struct nk_context *ctx, const char *text, int len,$/;"	f
nk_checkbox_label	include/nuklear.h	/^NK_API int nk_checkbox_label(struct nk_context *ctx, const char *label, int *active)$/;"	f
nk_checkbox_text	include/nuklear.h	/^nk_checkbox_text(struct nk_context *ctx, const char *text, int len, int *active)$/;"	f
nk_clear	include/nuklear.h	/^nk_clear(struct nk_context *ctx)$/;"	f
nk_clipboard	include/nuklear.h	/^struct nk_clipboard {$/;"	s
nk_collapse_states	include/nuklear.h	/^enum nk_collapse_states {NK_MINIMIZED = nk_false, NK_MAXIMIZED = nk_true};$/;"	g
nk_color	include/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	s
nk_color_cf	include/nuklear.h	/^nk_color_cf(struct nk_color in)$/;"	f
nk_color_d	include/nuklear.h	/^nk_color_d(double *r, double *g, double *b, double *a, struct nk_color in)$/;"	f
nk_color_dv	include/nuklear.h	/^nk_color_dv(double *c, struct nk_color in)$/;"	f
nk_color_f	include/nuklear.h	/^nk_color_f(float *r, float *g, float *b, float *a, struct nk_color in)$/;"	f
nk_color_format	include/nuklear.h	/^enum nk_color_format    {NK_RGB, NK_RGBA};$/;"	g
nk_color_fv	include/nuklear.h	/^nk_color_fv(float *c, struct nk_color in)$/;"	f
nk_color_hex_rgb	include/nuklear.h	/^nk_color_hex_rgb(char *output, struct nk_color col)$/;"	f
nk_color_hex_rgba	include/nuklear.h	/^nk_color_hex_rgba(char *output, struct nk_color col)$/;"	f
nk_color_hsv_b	include/nuklear.h	/^nk_color_hsv_b(nk_byte *out_h, nk_byte *out_s, nk_byte *out_v, struct nk_color in)$/;"	f
nk_color_hsv_bv	include/nuklear.h	/^nk_color_hsv_bv(nk_byte *out, struct nk_color in)$/;"	f
nk_color_hsv_f	include/nuklear.h	/^nk_color_hsv_f(float *out_h, float *out_s, float *out_v, struct nk_color in)$/;"	f
nk_color_hsv_fv	include/nuklear.h	/^nk_color_hsv_fv(float *out, struct nk_color in)$/;"	f
nk_color_hsv_i	include/nuklear.h	/^nk_color_hsv_i(int *out_h, int *out_s, int *out_v, struct nk_color in)$/;"	f
nk_color_hsv_iv	include/nuklear.h	/^nk_color_hsv_iv(int *out, struct nk_color in)$/;"	f
nk_color_hsva_b	include/nuklear.h	/^nk_color_hsva_b(nk_byte *h, nk_byte *s, nk_byte *v, nk_byte *a, struct nk_color in)$/;"	f
nk_color_hsva_bv	include/nuklear.h	/^nk_color_hsva_bv(nk_byte *out, struct nk_color in)$/;"	f
nk_color_hsva_f	include/nuklear.h	/^nk_color_hsva_f(float *out_h, float *out_s,$/;"	f
nk_color_hsva_fv	include/nuklear.h	/^nk_color_hsva_fv(float *out, struct nk_color in)$/;"	f
nk_color_hsva_i	include/nuklear.h	/^nk_color_hsva_i(int *out_h, int *out_s, int *out_v,$/;"	f
nk_color_hsva_iv	include/nuklear.h	/^nk_color_hsva_iv(int *out, struct nk_color in)$/;"	f
nk_color_names	include/nuklear.h	/^NK_GLOBAL const char *nk_color_names[NK_COLOR_COUNT] = {$/;"	v
nk_color_pick	include/nuklear.h	/^nk_color_pick(struct nk_context * ctx, struct nk_colorf *color,$/;"	f
nk_color_picker	include/nuklear.h	/^nk_color_picker(struct nk_context *ctx, struct nk_colorf color,$/;"	f
nk_color_picker_behavior	include/nuklear.h	/^nk_color_picker_behavior(nk_flags *state,$/;"	f
nk_color_u32	include/nuklear.h	/^nk_color_u32(struct nk_color in)$/;"	f
nk_colorf	include/nuklear.h	/^struct nk_colorf {float r,g,b,a;};$/;"	s
nk_colorf_hsva_f	include/nuklear.h	/^nk_colorf_hsva_f(float *out_h, float *out_s,$/;"	f
nk_colorf_hsva_fv	include/nuklear.h	/^nk_colorf_hsva_fv(float *hsva, struct nk_colorf in)$/;"	f
nk_combo	include/nuklear.h	/^nk_combo(struct nk_context *ctx, const char **items, int count,$/;"	f
nk_combo_begin	include/nuklear.h	/^nk_combo_begin(struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_combo_begin_color	include/nuklear.h	/^nk_combo_begin_color(struct nk_context *ctx, struct nk_color color, struct nk_vec2 size)$/;"	f
nk_combo_begin_image	include/nuklear.h	/^nk_combo_begin_image(struct nk_context *ctx, struct nk_image img, struct nk_vec2 size)$/;"	f
nk_combo_begin_image_label	include/nuklear.h	/^nk_combo_begin_image_label(struct nk_context *ctx,$/;"	f
nk_combo_begin_image_text	include/nuklear.h	/^nk_combo_begin_image_text(struct nk_context *ctx, const char *selected, int len,$/;"	f
nk_combo_begin_label	include/nuklear.h	/^nk_combo_begin_label(struct nk_context *ctx, const char *selected, struct nk_vec2 size)$/;"	f
nk_combo_begin_symbol	include/nuklear.h	/^nk_combo_begin_symbol(struct nk_context *ctx, enum nk_symbol_type symbol, struct nk_vec2 size)$/;"	f
nk_combo_begin_symbol_label	include/nuklear.h	/^nk_combo_begin_symbol_label(struct nk_context *ctx,$/;"	f
nk_combo_begin_symbol_text	include/nuklear.h	/^nk_combo_begin_symbol_text(struct nk_context *ctx, const char *selected, int len,$/;"	f
nk_combo_begin_text	include/nuklear.h	/^nk_combo_begin_text(struct nk_context *ctx, const char *selected, int len,$/;"	f
nk_combo_callback	include/nuklear.h	/^nk_combo_callback(struct nk_context *ctx, void(*item_getter)(void*, int, const char**),$/;"	f
nk_combo_close	include/nuklear.h	/^NK_API void nk_combo_close(struct nk_context *ctx)$/;"	f
nk_combo_end	include/nuklear.h	/^NK_API void nk_combo_end(struct nk_context *ctx)$/;"	f
nk_combo_item_image_label	include/nuklear.h	/^nk_combo_item_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_combo_item_image_text	include/nuklear.h	/^nk_combo_item_image_text(struct nk_context *ctx, struct nk_image img, const char *text,$/;"	f
nk_combo_item_label	include/nuklear.h	/^nk_combo_item_label(struct nk_context *ctx, const char *label, nk_flags align)$/;"	f
nk_combo_item_symbol_label	include/nuklear.h	/^nk_combo_item_symbol_label(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_combo_item_symbol_text	include/nuklear.h	/^nk_combo_item_symbol_text(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_combo_item_text	include/nuklear.h	/^nk_combo_item_text(struct nk_context *ctx, const char *text, int len,nk_flags align)$/;"	f
nk_combo_separator	include/nuklear.h	/^nk_combo_separator(struct nk_context *ctx, const char *items_separated_by_separator,$/;"	f
nk_combo_string	include/nuklear.h	/^nk_combo_string(struct nk_context *ctx, const char *items_separated_by_zeros,$/;"	f
nk_combobox	include/nuklear.h	/^nk_combobox(struct nk_context *ctx, const char **items, int count,$/;"	f
nk_combobox_callback	include/nuklear.h	/^nk_combobox_callback(struct nk_context *ctx,$/;"	f
nk_combobox_separator	include/nuklear.h	/^nk_combobox_separator(struct nk_context *ctx, const char *items_separated_by_separator,$/;"	f
nk_combobox_string	include/nuklear.h	/^nk_combobox_string(struct nk_context *ctx, const char *items_separated_by_zeros,$/;"	f
nk_command	include/nuklear.h	/^struct nk_command {$/;"	s
nk_command_arc	include/nuklear.h	/^struct nk_command_arc {$/;"	s
nk_command_arc_filled	include/nuklear.h	/^struct nk_command_arc_filled {$/;"	s
nk_command_buffer	include/nuklear.h	/^struct nk_command_buffer {$/;"	s
nk_command_buffer_init	include/nuklear.h	/^nk_command_buffer_init(struct nk_command_buffer *cb,$/;"	f
nk_command_buffer_push	include/nuklear.h	/^nk_command_buffer_push(struct nk_command_buffer* b,$/;"	f
nk_command_buffer_reset	include/nuklear.h	/^nk_command_buffer_reset(struct nk_command_buffer *b)$/;"	f
nk_command_circle	include/nuklear.h	/^struct nk_command_circle {$/;"	s
nk_command_circle_filled	include/nuklear.h	/^struct nk_command_circle_filled {$/;"	s
nk_command_clipping	include/nuklear.h	/^enum nk_command_clipping {$/;"	g
nk_command_curve	include/nuklear.h	/^struct nk_command_curve {$/;"	s
nk_command_custom	include/nuklear.h	/^struct nk_command_custom {$/;"	s
nk_command_custom_callback	include/nuklear.h	/^typedef void (*nk_command_custom_callback)(void *canvas, short x,short y,$/;"	t
nk_command_image	include/nuklear.h	/^struct nk_command_image {$/;"	s
nk_command_line	include/nuklear.h	/^struct nk_command_line {$/;"	s
nk_command_polygon	include/nuklear.h	/^struct nk_command_polygon {$/;"	s
nk_command_polygon_filled	include/nuklear.h	/^struct nk_command_polygon_filled {$/;"	s
nk_command_polyline	include/nuklear.h	/^struct nk_command_polyline {$/;"	s
nk_command_rect	include/nuklear.h	/^struct nk_command_rect {$/;"	s
nk_command_rect_filled	include/nuklear.h	/^struct nk_command_rect_filled {$/;"	s
nk_command_rect_multi_color	include/nuklear.h	/^struct nk_command_rect_multi_color {$/;"	s
nk_command_scissor	include/nuklear.h	/^struct nk_command_scissor {$/;"	s
nk_command_text	include/nuklear.h	/^struct nk_command_text {$/;"	s
nk_command_triangle	include/nuklear.h	/^struct nk_command_triangle {$/;"	s
nk_command_triangle_filled	include/nuklear.h	/^struct nk_command_triangle_filled {$/;"	s
nk_command_type	include/nuklear.h	/^enum nk_command_type {$/;"	g
nk_configuration_stacks	include/nuklear.h	/^struct nk_configuration_stacks {$/;"	s
nk_context	include/nuklear.h	/^struct nk_context {$/;"	s
nk_contextual_begin	include/nuklear.h	/^nk_contextual_begin(struct nk_context *ctx, nk_flags flags, struct nk_vec2 size,$/;"	f
nk_contextual_close	include/nuklear.h	/^nk_contextual_close(struct nk_context *ctx)$/;"	f
nk_contextual_end	include/nuklear.h	/^nk_contextual_end(struct nk_context *ctx)$/;"	f
nk_contextual_item_image_label	include/nuklear.h	/^nk_contextual_item_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_contextual_item_image_text	include/nuklear.h	/^nk_contextual_item_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_contextual_item_label	include/nuklear.h	/^nk_contextual_item_label(struct nk_context *ctx, const char *label, nk_flags align)$/;"	f
nk_contextual_item_symbol_label	include/nuklear.h	/^nk_contextual_item_symbol_label(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f
nk_contextual_item_symbol_text	include/nuklear.h	/^nk_contextual_item_symbol_text(struct nk_context *ctx, enum nk_symbol_type symbol,$/;"	f
nk_contextual_item_text	include/nuklear.h	/^nk_contextual_item_text(struct nk_context *ctx, const char *text, int len,$/;"	f
nk_convert	include/nuklear.h	/^nk_convert(struct nk_context *ctx, struct nk_buffer *cmds,$/;"	f
nk_convert_config	include/nuklear.h	/^struct nk_convert_config {$/;"	s
nk_convert_result	include/nuklear.h	/^enum nk_convert_result {$/;"	g
nk_cos	include/nuklear.h	/^nk_cos(float x)$/;"	f
nk_create_page_element	include/nuklear.h	/^nk_create_page_element(struct nk_context *ctx)$/;"	f
nk_create_panel	include/nuklear.h	/^nk_create_panel(struct nk_context *ctx)$/;"	f
nk_create_table	include/nuklear.h	/^nk_create_table(struct nk_context *ctx)$/;"	f
nk_create_window	include/nuklear.h	/^nk_create_window(struct nk_context *ctx)$/;"	f
nk_cursor	include/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	s
nk_custom_cursor_data	include/nuklear.h	/^NK_GLOBAL const char nk_custom_cursor_data[NK_CURSOR_DATA_W * NK_CURSOR_DATA_H + 1] =$/;"	v
nk_decode_85	include/nuklear.h	/^nk_decode_85(unsigned char* dst, const unsigned char* src)$/;"	f
nk_decode_85_byte	include/nuklear.h	/^nk_decode_85_byte(char c)$/;"	f
nk_decompress	include/nuklear.h	/^nk_decompress(unsigned char *output, unsigned char *i, unsigned int length)$/;"	f
nk_decompress_length	include/nuklear.h	/^nk_decompress_length(unsigned char *input)$/;"	f
nk_decompress_token	include/nuklear.h	/^nk_decompress_token(unsigned char *i)$/;"	f
nk_default_color_style	include/nuklear.h	/^nk_default_color_style[NK_COLOR_COUNT] = {$/;"	v	typeref:struct:nk_color
nk_do_button	include/nuklear.h	/^nk_do_button(nk_flags *state, struct nk_command_buffer *out, struct nk_rect r,$/;"	f
nk_do_button_image	include/nuklear.h	/^nk_do_button_image(nk_flags *state,$/;"	f
nk_do_button_symbol	include/nuklear.h	/^nk_do_button_symbol(nk_flags *state,$/;"	f
nk_do_button_text	include/nuklear.h	/^nk_do_button_text(nk_flags *state,$/;"	f
nk_do_button_text_image	include/nuklear.h	/^nk_do_button_text_image(nk_flags *state,$/;"	f
nk_do_button_text_symbol	include/nuklear.h	/^nk_do_button_text_symbol(nk_flags *state,$/;"	f
nk_do_color_picker	include/nuklear.h	/^nk_do_color_picker(nk_flags *state,$/;"	f
nk_do_edit	include/nuklear.h	/^nk_do_edit(nk_flags *state, struct nk_command_buffer *out,$/;"	f
nk_do_progress	include/nuklear.h	/^nk_do_progress(nk_flags *state,$/;"	f
nk_do_property	include/nuklear.h	/^nk_do_property(nk_flags *ws,$/;"	f
nk_do_scrollbarh	include/nuklear.h	/^nk_do_scrollbarh(nk_flags *state,$/;"	f
nk_do_scrollbarv	include/nuklear.h	/^nk_do_scrollbarv(nk_flags *state,$/;"	f
nk_do_selectable	include/nuklear.h	/^nk_do_selectable(nk_flags *state, struct nk_command_buffer *out,$/;"	f
nk_do_selectable_image	include/nuklear.h	/^nk_do_selectable_image(nk_flags *state, struct nk_command_buffer *out,$/;"	f
nk_do_selectable_symbol	include/nuklear.h	/^nk_do_selectable_symbol(nk_flags *state, struct nk_command_buffer *out,$/;"	f
nk_do_slider	include/nuklear.h	/^nk_do_slider(nk_flags *state,$/;"	f
nk_do_toggle	include/nuklear.h	/^nk_do_toggle(nk_flags *state,$/;"	f
nk_drag_behavior	include/nuklear.h	/^nk_drag_behavior(nk_flags *state, const struct nk_input *in,$/;"	f
nk_draw_button	include/nuklear.h	/^nk_draw_button(struct nk_command_buffer *out,$/;"	f
nk_draw_button_image	include/nuklear.h	/^nk_draw_button_image(struct nk_command_buffer *out,$/;"	f
nk_draw_button_symbol	include/nuklear.h	/^nk_draw_button_symbol(struct nk_command_buffer *out,$/;"	f
nk_draw_button_text	include/nuklear.h	/^nk_draw_button_text(struct nk_command_buffer *out,$/;"	f
nk_draw_button_text_image	include/nuklear.h	/^nk_draw_button_text_image(struct nk_command_buffer *out,$/;"	f
nk_draw_button_text_symbol	include/nuklear.h	/^nk_draw_button_text_symbol(struct nk_command_buffer *out,$/;"	f
nk_draw_checkbox	include/nuklear.h	/^nk_draw_checkbox(struct nk_command_buffer *out,$/;"	f
nk_draw_color_picker	include/nuklear.h	/^nk_draw_color_picker(struct nk_command_buffer *o, const struct nk_rect *matrix,$/;"	f
nk_draw_command	include/nuklear.h	/^struct nk_draw_command {$/;"	s
nk_draw_foreach	include/nuklear.h	/^#define nk_draw_foreach(/;"	d
nk_draw_image	include/nuklear.h	/^nk_draw_image(struct nk_command_buffer *b, struct nk_rect r,$/;"	f
nk_draw_index	include/nuklear.h	/^typedef nk_uint nk_draw_index;$/;"	t
nk_draw_index	include/nuklear.h	/^typedef nk_ushort nk_draw_index;$/;"	t
nk_draw_list	include/nuklear.h	/^struct nk_draw_list {$/;"	s
nk_draw_list_add_clip	include/nuklear.h	/^nk_draw_list_add_clip(struct nk_draw_list *list, struct nk_rect rect)$/;"	f
nk_draw_list_add_image	include/nuklear.h	/^nk_draw_list_add_image(struct nk_draw_list *list, struct nk_image texture,$/;"	f
nk_draw_list_add_text	include/nuklear.h	/^nk_draw_list_add_text(struct nk_draw_list *list, const struct nk_user_font *font,$/;"	f
nk_draw_list_alloc_elements	include/nuklear.h	/^nk_draw_list_alloc_elements(struct nk_draw_list *list, nk_size count)$/;"	f
nk_draw_list_alloc_path	include/nuklear.h	/^nk_draw_list_alloc_path(struct nk_draw_list *list, int count)$/;"	f
nk_draw_list_alloc_vertices	include/nuklear.h	/^nk_draw_list_alloc_vertices(struct nk_draw_list *list, nk_size count)$/;"	f
nk_draw_list_command_last	include/nuklear.h	/^nk_draw_list_command_last(struct nk_draw_list *list)$/;"	f
nk_draw_list_fill_circle	include/nuklear.h	/^nk_draw_list_fill_circle(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f
nk_draw_list_fill_poly_convex	include/nuklear.h	/^nk_draw_list_fill_poly_convex(struct nk_draw_list *list,$/;"	f
nk_draw_list_fill_rect	include/nuklear.h	/^nk_draw_list_fill_rect(struct nk_draw_list *list, struct nk_rect rect,$/;"	f
nk_draw_list_fill_rect_multi_color	include/nuklear.h	/^nk_draw_list_fill_rect_multi_color(struct nk_draw_list *list, struct nk_rect rect,$/;"	f
nk_draw_list_fill_triangle	include/nuklear.h	/^nk_draw_list_fill_triangle(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f
nk_draw_list_foreach	include/nuklear.h	/^#define nk_draw_list_foreach(/;"	d
nk_draw_list_init	include/nuklear.h	/^nk_draw_list_init(struct nk_draw_list *list)$/;"	f
nk_draw_list_path_arc_to	include/nuklear.h	/^nk_draw_list_path_arc_to(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f
nk_draw_list_path_arc_to_fast	include/nuklear.h	/^nk_draw_list_path_arc_to_fast(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f
nk_draw_list_path_clear	include/nuklear.h	/^nk_draw_list_path_clear(struct nk_draw_list *list)$/;"	f
nk_draw_list_path_curve_to	include/nuklear.h	/^nk_draw_list_path_curve_to(struct nk_draw_list *list, struct nk_vec2 p2,$/;"	f
nk_draw_list_path_fill	include/nuklear.h	/^nk_draw_list_path_fill(struct nk_draw_list *list, struct nk_color color)$/;"	f
nk_draw_list_path_last	include/nuklear.h	/^nk_draw_list_path_last(struct nk_draw_list *list)$/;"	f
nk_draw_list_path_line_to	include/nuklear.h	/^nk_draw_list_path_line_to(struct nk_draw_list *list, struct nk_vec2 pos)$/;"	f
nk_draw_list_path_rect_to	include/nuklear.h	/^nk_draw_list_path_rect_to(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f
nk_draw_list_path_stroke	include/nuklear.h	/^nk_draw_list_path_stroke(struct nk_draw_list *list, struct nk_color color,$/;"	f
nk_draw_list_push_command	include/nuklear.h	/^nk_draw_list_push_command(struct nk_draw_list *list, struct nk_rect clip,$/;"	f
nk_draw_list_push_image	include/nuklear.h	/^nk_draw_list_push_image(struct nk_draw_list *list, nk_handle texture)$/;"	f
nk_draw_list_push_rect_uv	include/nuklear.h	/^nk_draw_list_push_rect_uv(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f
nk_draw_list_push_userdata	include/nuklear.h	/^nk_draw_list_push_userdata(struct nk_draw_list *list, nk_handle userdata)$/;"	f
nk_draw_list_setup	include/nuklear.h	/^nk_draw_list_setup(struct nk_draw_list *canvas, const struct nk_convert_config *config,$/;"	f
nk_draw_list_stroke	include/nuklear.h	/^enum nk_draw_list_stroke {$/;"	g
nk_draw_list_stroke_circle	include/nuklear.h	/^nk_draw_list_stroke_circle(struct nk_draw_list *list, struct nk_vec2 center,$/;"	f
nk_draw_list_stroke_curve	include/nuklear.h	/^nk_draw_list_stroke_curve(struct nk_draw_list *list, struct nk_vec2 p0,$/;"	f
nk_draw_list_stroke_line	include/nuklear.h	/^nk_draw_list_stroke_line(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f
nk_draw_list_stroke_poly_line	include/nuklear.h	/^nk_draw_list_stroke_poly_line(struct nk_draw_list *list, const struct nk_vec2 *points,$/;"	f
nk_draw_list_stroke_rect	include/nuklear.h	/^nk_draw_list_stroke_rect(struct nk_draw_list *list, struct nk_rect rect,$/;"	f
nk_draw_list_stroke_triangle	include/nuklear.h	/^nk_draw_list_stroke_triangle(struct nk_draw_list *list, struct nk_vec2 a,$/;"	f
nk_draw_null_texture	include/nuklear.h	/^struct nk_draw_null_texture {$/;"	s
nk_draw_option	include/nuklear.h	/^nk_draw_option(struct nk_command_buffer *out,$/;"	f
nk_draw_progress	include/nuklear.h	/^nk_draw_progress(struct nk_command_buffer *out, nk_flags state,$/;"	f
nk_draw_property	include/nuklear.h	/^nk_draw_property(struct nk_command_buffer *out, const struct nk_style_property *style,$/;"	f
nk_draw_scrollbar	include/nuklear.h	/^nk_draw_scrollbar(struct nk_command_buffer *out, nk_flags state,$/;"	f
nk_draw_selectable	include/nuklear.h	/^nk_draw_selectable(struct nk_command_buffer *out,$/;"	f
nk_draw_slider	include/nuklear.h	/^nk_draw_slider(struct nk_command_buffer *out, nk_flags state,$/;"	f
nk_draw_symbol	include/nuklear.h	/^nk_draw_symbol(struct nk_command_buffer *out, enum nk_symbol_type type,$/;"	f
nk_draw_text	include/nuklear.h	/^nk_draw_text(struct nk_command_buffer *b, struct nk_rect r,$/;"	f
nk_draw_vertex	include/nuklear.h	/^nk_draw_vertex(void *dst, const struct nk_convert_config *config,$/;"	f
nk_draw_vertex_color	include/nuklear.h	/^nk_draw_vertex_color(void *attr, const float *vals,$/;"	f
nk_draw_vertex_element	include/nuklear.h	/^nk_draw_vertex_element(void *dst, const float *values, int value_count,$/;"	f
nk_draw_vertex_layout_attribute	include/nuklear.h	/^enum nk_draw_vertex_layout_attribute {$/;"	g
nk_draw_vertex_layout_element	include/nuklear.h	/^struct nk_draw_vertex_layout_element {$/;"	s
nk_draw_vertex_layout_element_is_end_of_layout	include/nuklear.h	/^nk_draw_vertex_layout_element_is_end_of_layout($/;"	f
nk_draw_vertex_layout_format	include/nuklear.h	/^enum nk_draw_vertex_layout_format {$/;"	g
nk_dtoa	include/nuklear.h	/^nk_dtoa(char *s, double n)$/;"	f
nk_edit_buffer	include/nuklear.h	/^nk_edit_buffer(struct nk_context *ctx, nk_flags flags,$/;"	f
nk_edit_draw_text	include/nuklear.h	/^nk_edit_draw_text(struct nk_command_buffer *out,$/;"	f
nk_edit_events	include/nuklear.h	/^enum nk_edit_events {$/;"	g
nk_edit_flags	include/nuklear.h	/^enum nk_edit_flags {$/;"	g
nk_edit_focus	include/nuklear.h	/^nk_edit_focus(struct nk_context *ctx, nk_flags flags)$/;"	f
nk_edit_state	include/nuklear.h	/^struct nk_edit_state {$/;"	s
nk_edit_string	include/nuklear.h	/^nk_edit_string(struct nk_context *ctx, nk_flags flags,$/;"	f
nk_edit_string_zero_terminated	include/nuklear.h	/^nk_edit_string_zero_terminated(struct nk_context *ctx, nk_flags flags,$/;"	f
nk_edit_types	include/nuklear.h	/^enum nk_edit_types {$/;"	g
nk_edit_unfocus	include/nuklear.h	/^nk_edit_unfocus(struct nk_context *ctx)$/;"	f
nk_end	include/nuklear.h	/^nk_end(struct nk_context *ctx)$/;"	f
nk_false	include/nuklear.h	/^enum {nk_false, nk_true};$/;"	e	enum:__anon1
nk_file_load	include/nuklear.h	/^nk_file_load(const char* path, nk_size* siz, struct nk_allocator *alloc)$/;"	f
nk_fill_arc	include/nuklear.h	/^nk_fill_arc(struct nk_command_buffer *b, float cx, float cy, float radius,$/;"	f
nk_fill_circle	include/nuklear.h	/^nk_fill_circle(struct nk_command_buffer *b, struct nk_rect r, struct nk_color c)$/;"	f
nk_fill_polygon	include/nuklear.h	/^nk_fill_polygon(struct nk_command_buffer *b, float *points, int point_count,$/;"	f
nk_fill_rect	include/nuklear.h	/^nk_fill_rect(struct nk_command_buffer *b, struct nk_rect rect,$/;"	f
nk_fill_rect_multi_color	include/nuklear.h	/^nk_fill_rect_multi_color(struct nk_command_buffer *b, struct nk_rect rect,$/;"	f
nk_fill_triangle	include/nuklear.h	/^nk_fill_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,$/;"	f
nk_filter_ascii	include/nuklear.h	/^nk_filter_ascii(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_binary	include/nuklear.h	/^nk_filter_binary(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_decimal	include/nuklear.h	/^nk_filter_decimal(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_default	include/nuklear.h	/^nk_filter_default(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_float	include/nuklear.h	/^nk_filter_float(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_hex	include/nuklear.h	/^nk_filter_hex(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_filter_oct	include/nuklear.h	/^nk_filter_oct(const struct nk_text_edit *box, nk_rune unicode)$/;"	f
nk_find_value	include/nuklear.h	/^nk_find_value(struct nk_window *win, nk_hash name)$/;"	f
nk_find_window	include/nuklear.h	/^nk_find_window(struct nk_context *ctx, nk_hash hash, const char *name)$/;"	f
nk_finish	include/nuklear.h	/^nk_finish(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_finish_buffer	include/nuklear.h	/^nk_finish_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)$/;"	f
nk_finish_popup	include/nuklear.h	/^nk_finish_popup(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_flags	include/nuklear.h	/^typedef nk_uint nk_flags;$/;"	t
nk_float	include/nuklear.h	/^#define nk_float /;"	d
nk_font	include/nuklear.h	/^struct nk_font {$/;"	s
nk_font_atlas	include/nuklear.h	/^struct nk_font_atlas {$/;"	s
nk_font_atlas_add	include/nuklear.h	/^nk_font_atlas_add(struct nk_font_atlas *atlas, const struct nk_font_config *config)$/;"	f
nk_font_atlas_add_compressed	include/nuklear.h	/^nk_font_atlas_add_compressed(struct nk_font_atlas *atlas,$/;"	f
nk_font_atlas_add_compressed_base85	include/nuklear.h	/^nk_font_atlas_add_compressed_base85(struct nk_font_atlas *atlas,$/;"	f
nk_font_atlas_add_default	include/nuklear.h	/^nk_font_atlas_add_default(struct nk_font_atlas *atlas,$/;"	f
nk_font_atlas_add_from_file	include/nuklear.h	/^nk_font_atlas_add_from_file(struct nk_font_atlas *atlas, const char *file_path,$/;"	f
nk_font_atlas_add_from_memory	include/nuklear.h	/^nk_font_atlas_add_from_memory(struct nk_font_atlas *atlas, void *memory,$/;"	f
nk_font_atlas_bake	include/nuklear.h	/^nk_font_atlas_bake(struct nk_font_atlas *atlas, int *width, int *height,$/;"	f
nk_font_atlas_begin	include/nuklear.h	/^nk_font_atlas_begin(struct nk_font_atlas *atlas)$/;"	f
nk_font_atlas_cleanup	include/nuklear.h	/^nk_font_atlas_cleanup(struct nk_font_atlas *atlas)$/;"	f
nk_font_atlas_clear	include/nuklear.h	/^nk_font_atlas_clear(struct nk_font_atlas *atlas)$/;"	f
nk_font_atlas_end	include/nuklear.h	/^nk_font_atlas_end(struct nk_font_atlas *atlas, nk_handle texture,$/;"	f
nk_font_atlas_format	include/nuklear.h	/^enum nk_font_atlas_format {$/;"	g
nk_font_atlas_init	include/nuklear.h	/^nk_font_atlas_init(struct nk_font_atlas *atlas, struct nk_allocator *alloc)$/;"	f
nk_font_atlas_init_custom	include/nuklear.h	/^nk_font_atlas_init_custom(struct nk_font_atlas *atlas,$/;"	f
nk_font_atlas_init_default	include/nuklear.h	/^nk_font_atlas_init_default(struct nk_font_atlas *atlas)$/;"	f
nk_font_bake	include/nuklear.h	/^nk_font_bake(struct nk_font_baker *baker, void *image_memory, int width, int height,$/;"	f
nk_font_bake_convert	include/nuklear.h	/^nk_font_bake_convert(void *out_memory, int img_width, int img_height,$/;"	f
nk_font_bake_custom_data	include/nuklear.h	/^nk_font_bake_custom_data(void *img_memory, int img_width, int img_height,$/;"	f
nk_font_bake_data	include/nuklear.h	/^struct nk_font_bake_data {$/;"	s
nk_font_bake_pack	include/nuklear.h	/^nk_font_bake_pack(struct nk_font_baker *baker,$/;"	f
nk_font_baker	include/nuklear.h	/^nk_font_baker(void *memory, int glyph_count, int count, struct nk_allocator *alloc)$/;"	f
nk_font_baker	include/nuklear.h	/^struct nk_font_baker {$/;"	s
nk_font_baker_memory	include/nuklear.h	/^nk_font_baker_memory(nk_size *temp, int *glyph_count,$/;"	f
nk_font_chinese_glyph_ranges	include/nuklear.h	/^nk_font_chinese_glyph_ranges(void)$/;"	f
nk_font_config	include/nuklear.h	/^nk_font_config(float pixel_height)$/;"	f
nk_font_config	include/nuklear.h	/^struct nk_font_config {$/;"	s
nk_font_coord_type	include/nuklear.h	/^enum nk_font_coord_type {$/;"	g
nk_font_cyrillic_glyph_ranges	include/nuklear.h	/^nk_font_cyrillic_glyph_ranges(void)$/;"	f
nk_font_default_glyph_ranges	include/nuklear.h	/^nk_font_default_glyph_ranges(void)$/;"	f
nk_font_find_glyph	include/nuklear.h	/^nk_font_find_glyph(struct nk_font *font, nk_rune unicode)$/;"	f
nk_font_glyph	include/nuklear.h	/^struct nk_font_glyph {$/;"	s
nk_font_init	include/nuklear.h	/^nk_font_init(struct nk_font *font, float pixel_height,$/;"	f
nk_font_korean_glyph_ranges	include/nuklear.h	/^nk_font_korean_glyph_ranges(void)$/;"	f
nk_font_query_font_glyph	include/nuklear.h	/^nk_font_query_font_glyph(nk_handle handle, float height,$/;"	f
nk_font_text_width	include/nuklear.h	/^nk_font_text_width(nk_handle handle, float height, const char *text, int len)$/;"	f
nk_foreach	include/nuklear.h	/^#define nk_foreach(/;"	d
nk_free	include/nuklear.h	/^nk_free(struct nk_context *ctx)$/;"	f
nk_free_page_element	include/nuklear.h	/^nk_free_page_element(struct nk_context *ctx, struct nk_page_element *elem)$/;"	f
nk_free_panel	include/nuklear.h	/^nk_free_panel(struct nk_context *ctx, struct nk_panel *pan)$/;"	f
nk_free_table	include/nuklear.h	/^nk_free_table(struct nk_context *ctx, struct nk_table *tbl)$/;"	f
nk_free_window	include/nuklear.h	/^nk_free_window(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_get_null_rect	include/nuklear.h	/^nk_get_null_rect(void)$/;"	f
nk_glyph	include/nuklear.h	/^typedef char nk_glyph[NK_UTF_SIZE];$/;"	t
nk_green	include/nuklear.h	/^NK_GLOBAL const struct nk_color nk_green = {0,255,0,255};$/;"	v	typeref:struct:nk_color
nk_group_begin	include/nuklear.h	/^nk_group_begin(struct nk_context *ctx, const char *title, nk_flags flags)$/;"	f
nk_group_begin_titled	include/nuklear.h	/^nk_group_begin_titled(struct nk_context *ctx, const char *id,$/;"	f
nk_group_end	include/nuklear.h	/^nk_group_end(struct nk_context *ctx)$/;"	f
nk_group_get_scroll	include/nuklear.h	/^nk_group_get_scroll(struct nk_context *ctx, const char *id, nk_uint *x_offset, nk_uint *y_offset)$/;"	f
nk_group_scrolled_begin	include/nuklear.h	/^nk_group_scrolled_begin(struct nk_context *ctx,$/;"	f
nk_group_scrolled_end	include/nuklear.h	/^nk_group_scrolled_end(struct nk_context *ctx)$/;"	f
nk_group_scrolled_offset_begin	include/nuklear.h	/^nk_group_scrolled_offset_begin(struct nk_context *ctx,$/;"	f
nk_group_set_scroll	include/nuklear.h	/^nk_group_set_scroll(struct nk_context *ctx, const char *id, nk_uint x_offset, nk_uint y_offset)$/;"	f
nk_handle	include/nuklear.h	/^typedef union {void *ptr; int id;} nk_handle;$/;"	t	typeref:union:__anon2
nk_handle_id	include/nuklear.h	/^nk_handle_id(int id)$/;"	f
nk_handle_ptr	include/nuklear.h	/^nk_handle_ptr(void *ptr)$/;"	f
nk_hash	include/nuklear.h	/^typedef nk_uint nk_hash;$/;"	t
nk_heading	include/nuklear.h	/^enum nk_heading         {NK_UP, NK_RIGHT, NK_DOWN, NK_LEFT};$/;"	g
nk_helper	include/nuklear.h	/^template<typename T, int size_diff> struct nk_helper{enum {value = size_diff};};$/;"	s
nk_helper	include/nuklear.h	/^template<typename T> struct nk_helper<T,0>{enum {value = nk_alignof<T>::value};};$/;"	s
nk_hsv	include/nuklear.h	/^nk_hsv(int h, int s, int v)$/;"	f
nk_hsv_bv	include/nuklear.h	/^nk_hsv_bv(const nk_byte *c)$/;"	f
nk_hsv_f	include/nuklear.h	/^nk_hsv_f(float h, float s, float v)$/;"	f
nk_hsv_fv	include/nuklear.h	/^nk_hsv_fv(const float *c)$/;"	f
nk_hsv_iv	include/nuklear.h	/^nk_hsv_iv(const int *c)$/;"	f
nk_hsva	include/nuklear.h	/^nk_hsva(int h, int s, int v, int a)$/;"	f
nk_hsva_bv	include/nuklear.h	/^nk_hsva_bv(const nk_byte *c)$/;"	f
nk_hsva_colorf	include/nuklear.h	/^nk_hsva_colorf(float h, float s, float v, float a)$/;"	f
nk_hsva_colorfv	include/nuklear.h	/^nk_hsva_colorfv(float *c)$/;"	f
nk_hsva_f	include/nuklear.h	/^nk_hsva_f(float h, float s, float v, float a)$/;"	f
nk_hsva_fv	include/nuklear.h	/^nk_hsva_fv(const float *c)$/;"	f
nk_hsva_iv	include/nuklear.h	/^nk_hsva_iv(const int *c)$/;"	f
nk_iceilf	include/nuklear.h	/^nk_iceilf(float x)$/;"	f
nk_ifloord	include/nuklear.h	/^nk_ifloord(double x)$/;"	f
nk_ifloorf	include/nuklear.h	/^nk_ifloorf(float x)$/;"	f
nk_image	include/nuklear.h	/^nk_image(struct nk_context *ctx, struct nk_image img)$/;"	f
nk_image	include/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	s
nk_image_color	include/nuklear.h	/^nk_image_color(struct nk_context *ctx, struct nk_image img, struct nk_color col)$/;"	f
nk_image_handle	include/nuklear.h	/^nk_image_handle(nk_handle handle)$/;"	f
nk_image_id	include/nuklear.h	/^nk_image_id(int id)$/;"	f
nk_image_is_subimage	include/nuklear.h	/^nk_image_is_subimage(const struct nk_image* img)$/;"	f
nk_image_ptr	include/nuklear.h	/^nk_image_ptr(void *ptr)$/;"	f
nk_init	include/nuklear.h	/^nk_init(struct nk_context *ctx, struct nk_allocator *alloc,$/;"	f
nk_init_custom	include/nuklear.h	/^nk_init_custom(struct nk_context *ctx, struct nk_buffer *cmds,$/;"	f
nk_init_default	include/nuklear.h	/^nk_init_default(struct nk_context *ctx, const struct nk_user_font *font)$/;"	f
nk_init_fixed	include/nuklear.h	/^nk_init_fixed(struct nk_context *ctx, void *memory, nk_size size,$/;"	f
nk_input	include/nuklear.h	/^struct nk_input {$/;"	s
nk_input_any_mouse_click_in_rect	include/nuklear.h	/^nk_input_any_mouse_click_in_rect(const struct nk_input *in, struct nk_rect b)$/;"	f
nk_input_begin	include/nuklear.h	/^nk_input_begin(struct nk_context *ctx)$/;"	f
nk_input_button	include/nuklear.h	/^nk_input_button(struct nk_context *ctx, enum nk_buttons id, int x, int y, int down)$/;"	f
nk_input_char	include/nuklear.h	/^nk_input_char(struct nk_context *ctx, char c)$/;"	f
nk_input_end	include/nuklear.h	/^nk_input_end(struct nk_context *ctx)$/;"	f
nk_input_glyph	include/nuklear.h	/^nk_input_glyph(struct nk_context *ctx, const nk_glyph glyph)$/;"	f
nk_input_has_mouse_click	include/nuklear.h	/^nk_input_has_mouse_click(const struct nk_input *i, enum nk_buttons id)$/;"	f
nk_input_has_mouse_click_down_in_rect	include/nuklear.h	/^nk_input_has_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f
nk_input_has_mouse_click_in_rect	include/nuklear.h	/^nk_input_has_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f
nk_input_is_key_down	include/nuklear.h	/^nk_input_is_key_down(const struct nk_input *i, enum nk_keys key)$/;"	f
nk_input_is_key_pressed	include/nuklear.h	/^nk_input_is_key_pressed(const struct nk_input *i, enum nk_keys key)$/;"	f
nk_input_is_key_released	include/nuklear.h	/^nk_input_is_key_released(const struct nk_input *i, enum nk_keys key)$/;"	f
nk_input_is_mouse_click_down_in_rect	include/nuklear.h	/^nk_input_is_mouse_click_down_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f
nk_input_is_mouse_click_in_rect	include/nuklear.h	/^nk_input_is_mouse_click_in_rect(const struct nk_input *i, enum nk_buttons id,$/;"	f
nk_input_is_mouse_down	include/nuklear.h	/^nk_input_is_mouse_down(const struct nk_input *i, enum nk_buttons id)$/;"	f
nk_input_is_mouse_hovering_rect	include/nuklear.h	/^nk_input_is_mouse_hovering_rect(const struct nk_input *i, struct nk_rect rect)$/;"	f
nk_input_is_mouse_pressed	include/nuklear.h	/^nk_input_is_mouse_pressed(const struct nk_input *i, enum nk_buttons id)$/;"	f
nk_input_is_mouse_prev_hovering_rect	include/nuklear.h	/^nk_input_is_mouse_prev_hovering_rect(const struct nk_input *i, struct nk_rect rect)$/;"	f
nk_input_is_mouse_released	include/nuklear.h	/^nk_input_is_mouse_released(const struct nk_input *i, enum nk_buttons id)$/;"	f
nk_input_key	include/nuklear.h	/^nk_input_key(struct nk_context *ctx, enum nk_keys key, int down)$/;"	f
nk_input_motion	include/nuklear.h	/^nk_input_motion(struct nk_context *ctx, int x, int y)$/;"	f
nk_input_mouse_clicked	include/nuklear.h	/^nk_input_mouse_clicked(const struct nk_input *i, enum nk_buttons id, struct nk_rect rect)$/;"	f
nk_input_scroll	include/nuklear.h	/^nk_input_scroll(struct nk_context *ctx, struct nk_vec2 val)$/;"	f
nk_input_unicode	include/nuklear.h	/^nk_input_unicode(struct nk_context *ctx, nk_rune unicode)$/;"	f
nk_insert_window	include/nuklear.h	/^nk_insert_window(struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_int	include/nuklear.h	/^typedef NK_INT32 nk_int;$/;"	t
nk_inv_sqrt	include/nuklear.h	/^nk_inv_sqrt(float n)$/;"	f
nk_is_lower	include/nuklear.h	/^NK_LIB int nk_is_lower(int c) {return (c >= 'a' && c <= 'z') || (c >= 0xE0 && c <= 0xFF);}$/;"	f
nk_is_upper	include/nuklear.h	/^NK_LIB int nk_is_upper(int c){return (c >= 'A' && c <= 'Z') || (c >= 0xC0 && c <= 0xDF);}$/;"	f
nk_is_word_boundary	include/nuklear.h	/^nk_is_word_boundary( struct nk_text_edit *state, int idx)$/;"	f
nk_item_is_any_active	include/nuklear.h	/^nk_item_is_any_active(struct nk_context *ctx)$/;"	f
nk_itoa	include/nuklear.h	/^nk_itoa(char *s, long n)$/;"	f
nk_key	include/nuklear.h	/^struct nk_key {$/;"	s
nk_keyboard	include/nuklear.h	/^struct nk_keyboard {$/;"	s
nk_keys	include/nuklear.h	/^enum nk_keys {$/;"	g
nk_label	include/nuklear.h	/^nk_label(struct nk_context *ctx, const char *str, nk_flags alignment)$/;"	f
nk_label_colored	include/nuklear.h	/^nk_label_colored(struct nk_context *ctx, const char *str, nk_flags align,$/;"	f
nk_label_colored_wrap	include/nuklear.h	/^nk_label_colored_wrap(struct nk_context *ctx, const char *str, struct nk_color color)$/;"	f
nk_label_wrap	include/nuklear.h	/^nk_label_wrap(struct nk_context *ctx, const char *str)$/;"	f
nk_labelf	include/nuklear.h	/^nk_labelf(struct nk_context *ctx, nk_flags flags, const char *fmt, ...)$/;"	f
nk_labelf_colored	include/nuklear.h	/^nk_labelf_colored(struct nk_context *ctx, nk_flags flags,$/;"	f
nk_labelf_colored_wrap	include/nuklear.h	/^nk_labelf_colored_wrap(struct nk_context *ctx, struct nk_color color,$/;"	f
nk_labelf_wrap	include/nuklear.h	/^nk_labelf_wrap(struct nk_context *ctx, const char *fmt,...)$/;"	f
nk_labelfv	include/nuklear.h	/^nk_labelfv(struct nk_context *ctx, nk_flags flags, const char *fmt, va_list args)$/;"	f
nk_labelfv_colored	include/nuklear.h	/^nk_labelfv_colored(struct nk_context *ctx, nk_flags flags,$/;"	f
nk_labelfv_colored_wrap	include/nuklear.h	/^nk_labelfv_colored_wrap(struct nk_context *ctx, struct nk_color color,$/;"	f
nk_labelfv_wrap	include/nuklear.h	/^nk_labelfv_wrap(struct nk_context *ctx, const char *fmt, va_list args)$/;"	f
nk_layout_format	include/nuklear.h	/^enum nk_layout_format   {NK_DYNAMIC, NK_STATIC};$/;"	g
nk_layout_peek	include/nuklear.h	/^nk_layout_peek(struct nk_rect *bounds, struct nk_context *ctx)$/;"	f
nk_layout_ratio_from_pixel	include/nuklear.h	/^nk_layout_ratio_from_pixel(struct nk_context *ctx, float pixel_width)$/;"	f
nk_layout_reset_min_row_height	include/nuklear.h	/^nk_layout_reset_min_row_height(struct nk_context *ctx)$/;"	f
nk_layout_row	include/nuklear.h	/^nk_layout_row(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f
nk_layout_row_begin	include/nuklear.h	/^nk_layout_row_begin(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f
nk_layout_row_calculate_usable_space	include/nuklear.h	/^nk_layout_row_calculate_usable_space(const struct nk_style *style, enum nk_panel_type type,$/;"	f
nk_layout_row_dynamic	include/nuklear.h	/^nk_layout_row_dynamic(struct nk_context *ctx, float height, int cols)$/;"	f
nk_layout_row_end	include/nuklear.h	/^nk_layout_row_end(struct nk_context *ctx)$/;"	f
nk_layout_row_push	include/nuklear.h	/^nk_layout_row_push(struct nk_context *ctx, float ratio_or_width)$/;"	f
nk_layout_row_static	include/nuklear.h	/^nk_layout_row_static(struct nk_context *ctx, float height, int item_width, int cols)$/;"	f
nk_layout_row_template_begin	include/nuklear.h	/^nk_layout_row_template_begin(struct nk_context *ctx, float height)$/;"	f
nk_layout_row_template_end	include/nuklear.h	/^nk_layout_row_template_end(struct nk_context *ctx)$/;"	f
nk_layout_row_template_push_dynamic	include/nuklear.h	/^nk_layout_row_template_push_dynamic(struct nk_context *ctx)$/;"	f
nk_layout_row_template_push_static	include/nuklear.h	/^nk_layout_row_template_push_static(struct nk_context *ctx, float width)$/;"	f
nk_layout_row_template_push_variable	include/nuklear.h	/^nk_layout_row_template_push_variable(struct nk_context *ctx, float min_width)$/;"	f
nk_layout_set_min_row_height	include/nuklear.h	/^nk_layout_set_min_row_height(struct nk_context *ctx, float height)$/;"	f
nk_layout_space_begin	include/nuklear.h	/^nk_layout_space_begin(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f
nk_layout_space_bounds	include/nuklear.h	/^nk_layout_space_bounds(struct nk_context *ctx)$/;"	f
nk_layout_space_end	include/nuklear.h	/^nk_layout_space_end(struct nk_context *ctx)$/;"	f
nk_layout_space_push	include/nuklear.h	/^nk_layout_space_push(struct nk_context *ctx, struct nk_rect rect)$/;"	f
nk_layout_space_rect_to_local	include/nuklear.h	/^nk_layout_space_rect_to_local(struct nk_context *ctx, struct nk_rect ret)$/;"	f
nk_layout_space_rect_to_screen	include/nuklear.h	/^nk_layout_space_rect_to_screen(struct nk_context *ctx, struct nk_rect ret)$/;"	f
nk_layout_space_to_local	include/nuklear.h	/^nk_layout_space_to_local(struct nk_context *ctx, struct nk_vec2 ret)$/;"	f
nk_layout_space_to_screen	include/nuklear.h	/^nk_layout_space_to_screen(struct nk_context *ctx, struct nk_vec2 ret)$/;"	f
nk_layout_widget_bounds	include/nuklear.h	/^nk_layout_widget_bounds(struct nk_context *ctx)$/;"	f
nk_layout_widget_space	include/nuklear.h	/^nk_layout_widget_space(struct nk_rect *bounds, const struct nk_context *ctx,$/;"	f
nk_link_page_element_into_freelist	include/nuklear.h	/^nk_link_page_element_into_freelist(struct nk_context *ctx,$/;"	f
nk_list_view	include/nuklear.h	/^struct nk_list_view {$/;"	s
nk_list_view_begin	include/nuklear.h	/^nk_list_view_begin(struct nk_context *ctx, struct nk_list_view *view,$/;"	f
nk_list_view_end	include/nuklear.h	/^nk_list_view_end(struct nk_list_view *view)$/;"	f
nk_log10	include/nuklear.h	/^nk_log10(double n)$/;"	f
nk_malloc	include/nuklear.h	/^nk_malloc(nk_handle unused, void *old,nk_size size)$/;"	f
nk_memcopy	include/nuklear.h	/^nk_memcopy(void *dst0, const void *src0, nk_size length)$/;"	f
nk_memory	include/nuklear.h	/^struct nk_memory {void *ptr;nk_size size;};$/;"	s
nk_memory_status	include/nuklear.h	/^struct nk_memory_status {$/;"	s
nk_memset	include/nuklear.h	/^nk_memset(void *ptr, int c0, nk_size size)$/;"	f
nk_menu_begin	include/nuklear.h	/^nk_menu_begin(struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_menu_begin_image	include/nuklear.h	/^nk_menu_begin_image(struct nk_context *ctx, const char *id, struct nk_image img,$/;"	f
nk_menu_begin_image_label	include/nuklear.h	/^nk_menu_begin_image_label(struct nk_context *ctx,$/;"	f
nk_menu_begin_image_text	include/nuklear.h	/^nk_menu_begin_image_text(struct nk_context *ctx, const char *title, int len,$/;"	f
nk_menu_begin_label	include/nuklear.h	/^NK_API int nk_menu_begin_label(struct nk_context *ctx,$/;"	f
nk_menu_begin_symbol	include/nuklear.h	/^nk_menu_begin_symbol(struct nk_context *ctx, const char *id,$/;"	f
nk_menu_begin_symbol_label	include/nuklear.h	/^nk_menu_begin_symbol_label(struct nk_context *ctx,$/;"	f
nk_menu_begin_symbol_text	include/nuklear.h	/^nk_menu_begin_symbol_text(struct nk_context *ctx, const char *title, int len,$/;"	f
nk_menu_begin_text	include/nuklear.h	/^nk_menu_begin_text(struct nk_context *ctx, const char *title, int len,$/;"	f
nk_menu_close	include/nuklear.h	/^NK_API void nk_menu_close(struct nk_context *ctx)$/;"	f
nk_menu_end	include/nuklear.h	/^nk_menu_end(struct nk_context *ctx)$/;"	f
nk_menu_item_image_label	include/nuklear.h	/^nk_menu_item_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_menu_item_image_text	include/nuklear.h	/^nk_menu_item_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_menu_item_label	include/nuklear.h	/^nk_menu_item_label(struct nk_context *ctx, const char *label, nk_flags align)$/;"	f
nk_menu_item_symbol_label	include/nuklear.h	/^NK_API int nk_menu_item_symbol_label(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_menu_item_symbol_text	include/nuklear.h	/^NK_API int nk_menu_item_symbol_text(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_menu_item_text	include/nuklear.h	/^nk_menu_item_text(struct nk_context *ctx, const char *title, int len, nk_flags align)$/;"	f
nk_menu_state	include/nuklear.h	/^struct nk_menu_state {$/;"	s
nk_menubar_begin	include/nuklear.h	/^nk_menubar_begin(struct nk_context *ctx)$/;"	f
nk_menubar_end	include/nuklear.h	/^nk_menubar_end(struct nk_context *ctx)$/;"	f
nk_mfree	include/nuklear.h	/^nk_mfree(nk_handle unused, void *ptr)$/;"	f
nk_modify	include/nuklear.h	/^enum nk_modify          {NK_FIXED = nk_false, NK_MODIFIABLE = nk_true};$/;"	g
nk_mouse	include/nuklear.h	/^struct nk_mouse {$/;"	s
nk_mouse_button	include/nuklear.h	/^struct nk_mouse_button {$/;"	s
nk_murmur_hash	include/nuklear.h	/^nk_murmur_hash(const void * key, int len, nk_hash seed)$/;"	f
nk_nonblock_begin	include/nuklear.h	/^nk_nonblock_begin(struct nk_context *ctx,$/;"	f
nk_null_rect	include/nuklear.h	/^NK_GLOBAL const struct nk_rect nk_null_rect = {-8192.0f, -8192.0f, 16384, 16384};$/;"	v	typeref:struct:nk_rect
nk_option_label	include/nuklear.h	/^nk_option_label(struct nk_context *ctx, const char *label, int active)$/;"	f
nk_option_text	include/nuklear.h	/^nk_option_text(struct nk_context *ctx, const char *text, int len, int is_active)$/;"	f
nk_orientation	include/nuklear.h	/^enum nk_orientation     {NK_VERTICAL, NK_HORIZONTAL};$/;"	g
nk_pad_rect	include/nuklear.h	/^nk_pad_rect(struct nk_rect r, struct nk_vec2 pad)$/;"	f
nk_page	include/nuklear.h	/^struct nk_page {$/;"	s
nk_page_data	include/nuklear.h	/^union nk_page_data {$/;"	u
nk_page_element	include/nuklear.h	/^struct nk_page_element {$/;"	s
nk_panel	include/nuklear.h	/^struct nk_panel {$/;"	s
nk_panel_alloc_row	include/nuklear.h	/^nk_panel_alloc_row(const struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_panel_alloc_space	include/nuklear.h	/^nk_panel_alloc_space(struct nk_rect *bounds, const struct nk_context *ctx)$/;"	f
nk_panel_begin	include/nuklear.h	/^nk_panel_begin(struct nk_context *ctx, const char *title, enum nk_panel_type panel_type)$/;"	f
nk_panel_end	include/nuklear.h	/^nk_panel_end(struct nk_context *ctx)$/;"	f
nk_panel_flags	include/nuklear.h	/^enum nk_panel_flags {$/;"	g
nk_panel_get_border	include/nuklear.h	/^nk_panel_get_border(const struct nk_style *style, nk_flags flags,$/;"	f
nk_panel_get_border_color	include/nuklear.h	/^nk_panel_get_border_color(const struct nk_style *style, enum nk_panel_type type)$/;"	f
nk_panel_get_padding	include/nuklear.h	/^nk_panel_get_padding(const struct nk_style *style, enum nk_panel_type type)$/;"	f
nk_panel_has_header	include/nuklear.h	/^nk_panel_has_header(nk_flags flags, const char *title)$/;"	f
nk_panel_is_nonblock	include/nuklear.h	/^nk_panel_is_nonblock(enum nk_panel_type type)$/;"	f
nk_panel_is_sub	include/nuklear.h	/^nk_panel_is_sub(enum nk_panel_type type)$/;"	f
nk_panel_layout	include/nuklear.h	/^nk_panel_layout(const struct nk_context *ctx, struct nk_window *win,$/;"	f
nk_panel_row_layout_type	include/nuklear.h	/^enum nk_panel_row_layout_type {$/;"	g
nk_panel_set	include/nuklear.h	/^enum nk_panel_set {$/;"	g
nk_panel_type	include/nuklear.h	/^enum nk_panel_type {$/;"	g
nk_parse_hex	include/nuklear.h	/^nk_parse_hex(const char *p, int length)$/;"	f
nk_plot	include/nuklear.h	/^nk_plot(struct nk_context *ctx, enum nk_chart_type type, const float *values,$/;"	f
nk_plot_function	include/nuklear.h	/^nk_plot_function(struct nk_context *ctx, enum nk_chart_type type, void *userdata,$/;"	f
nk_plugin_alloc	include/nuklear.h	/^typedef void*(*nk_plugin_alloc)(nk_handle, void *old, nk_size);$/;"	t
nk_plugin_copy	include/nuklear.h	/^typedef void(*nk_plugin_copy)(nk_handle, const char*, int len);$/;"	t
nk_plugin_filter	include/nuklear.h	/^typedef int(*nk_plugin_filter)(const struct nk_text_edit*, nk_rune unicode);$/;"	t
nk_plugin_free	include/nuklear.h	/^typedef void (*nk_plugin_free)(nk_handle, void *old);$/;"	t
nk_plugin_paste	include/nuklear.h	/^typedef void(*nk_plugin_paste)(nk_handle, struct nk_text_edit*);$/;"	t
nk_pool	include/nuklear.h	/^struct nk_pool {$/;"	s
nk_pool_alloc	include/nuklear.h	/^nk_pool_alloc(struct nk_pool *pool)$/;"	f
nk_pool_free	include/nuklear.h	/^nk_pool_free(struct nk_pool *pool)$/;"	f
nk_pool_init	include/nuklear.h	/^nk_pool_init(struct nk_pool *pool, struct nk_allocator *alloc,$/;"	f
nk_pool_init_fixed	include/nuklear.h	/^nk_pool_init_fixed(struct nk_pool *pool, void *memory, nk_size size)$/;"	f
nk_popup_begin	include/nuklear.h	/^nk_popup_begin(struct nk_context *ctx, enum nk_popup_type type,$/;"	f
nk_popup_buffer	include/nuklear.h	/^struct nk_popup_buffer {$/;"	s
nk_popup_close	include/nuklear.h	/^nk_popup_close(struct nk_context *ctx)$/;"	f
nk_popup_end	include/nuklear.h	/^nk_popup_end(struct nk_context *ctx)$/;"	f
nk_popup_get_scroll	include/nuklear.h	/^nk_popup_get_scroll(struct nk_context *ctx, nk_uint *offset_x, nk_uint *offset_y)$/;"	f
nk_popup_set_scroll	include/nuklear.h	/^nk_popup_set_scroll(struct nk_context *ctx, nk_uint offset_x, nk_uint offset_y)$/;"	f
nk_popup_state	include/nuklear.h	/^struct nk_popup_state {$/;"	s
nk_popup_type	include/nuklear.h	/^enum nk_popup_type      {NK_POPUP_STATIC, NK_POPUP_DYNAMIC};$/;"	g
nk_pow	include/nuklear.h	/^nk_pow(double x, int n)$/;"	f
nk_prog	include/nuklear.h	/^nk_prog(struct nk_context *ctx, nk_size cur, nk_size max, int modifyable)$/;"	f
nk_proggy_clean_ttf_compressed_data_base85	include/nuklear.h	/^NK_GLOBAL const char nk_proggy_clean_ttf_compressed_data_base85[11980+1] =$/;"	v
nk_progress	include/nuklear.h	/^nk_progress(struct nk_context *ctx, nk_size *cur, nk_size max, int is_modifyable)$/;"	f
nk_progress_behavior	include/nuklear.h	/^nk_progress_behavior(nk_flags *state, struct nk_input *in,$/;"	f
nk_property	include/nuklear.h	/^nk_property(struct nk_context *ctx, const char *name, struct nk_property_variant *variant,$/;"	f
nk_property	include/nuklear.h	/^union nk_property {$/;"	u
nk_property_behavior	include/nuklear.h	/^nk_property_behavior(nk_flags *ws, const struct nk_input *in,$/;"	f
nk_property_double	include/nuklear.h	/^nk_property_double(struct nk_context *ctx, const char *name,$/;"	f
nk_property_filter	include/nuklear.h	/^enum nk_property_filter {$/;"	g
nk_property_float	include/nuklear.h	/^nk_property_float(struct nk_context *ctx, const char *name,$/;"	f
nk_property_int	include/nuklear.h	/^nk_property_int(struct nk_context *ctx, const char *name,$/;"	f
nk_property_kind	include/nuklear.h	/^enum nk_property_kind {$/;"	g
nk_property_state	include/nuklear.h	/^struct nk_property_state {$/;"	s
nk_property_status	include/nuklear.h	/^enum nk_property_status {$/;"	g
nk_property_variant	include/nuklear.h	/^struct nk_property_variant {$/;"	s
nk_property_variant_double	include/nuklear.h	/^nk_property_variant_double(double value, double min_value, double max_value,$/;"	f
nk_property_variant_float	include/nuklear.h	/^nk_property_variant_float(float value, float min_value, float max_value, float step)$/;"	f
nk_property_variant_int	include/nuklear.h	/^nk_property_variant_int(int value, int min_value, int max_value, int step)$/;"	f
nk_propertyd	include/nuklear.h	/^nk_propertyd(struct nk_context *ctx, const char *name, double min,$/;"	f
nk_propertyf	include/nuklear.h	/^nk_propertyf(struct nk_context *ctx, const char *name, float min,$/;"	f
nk_propertyi	include/nuklear.h	/^nk_propertyi(struct nk_context *ctx, const char *name, int min, int val,$/;"	f
nk_ptr	include/nuklear.h	/^typedef NK_POINTER_TYPE nk_ptr;$/;"	t
nk_ptr_add	include/nuklear.h	/^#define nk_ptr_add(/;"	d
nk_ptr_add_const	include/nuklear.h	/^#define nk_ptr_add_const(/;"	d
nk_push_custom	include/nuklear.h	/^nk_push_custom(struct nk_command_buffer *b, struct nk_rect r,$/;"	f
nk_push_scissor	include/nuklear.h	/^nk_push_scissor(struct nk_command_buffer *b, struct nk_rect r)$/;"	f
nk_push_table	include/nuklear.h	/^nk_push_table(struct nk_window *win, struct nk_table *tbl)$/;"	f
nk_query_font_glyph_f	include/nuklear.h	/^typedef void(*nk_query_font_glyph_f)(nk_handle handle, float font_height,$/;"	t
nk_radio_label	include/nuklear.h	/^nk_radio_label(struct nk_context *ctx, const char *label, int *active)$/;"	f
nk_radio_text	include/nuklear.h	/^nk_radio_text(struct nk_context *ctx, const char *text, int len, int *active)$/;"	f
nk_range_align	include/nuklear.h	/^NK_GLOBAL const nk_size nk_range_align = NK_ALIGNOF(struct nk_tt_pack_range);$/;"	v
nk_range_count	include/nuklear.h	/^nk_range_count(const nk_rune *range)$/;"	f
nk_range_glyph_count	include/nuklear.h	/^nk_range_glyph_count(const nk_rune *range, int count)$/;"	f
nk_rect	include/nuklear.h	/^nk_rect(float x, float y, float w, float h)$/;"	f
nk_rect	include/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	s
nk_rect_align	include/nuklear.h	/^NK_GLOBAL const nk_size nk_rect_align = NK_ALIGNOF(struct nk_rp_rect);$/;"	v
nk_rect_height_compare	include/nuklear.h	/^nk_rect_height_compare(const void *a, const void *b)$/;"	f
nk_rect_original_order	include/nuklear.h	/^nk_rect_original_order(const void *a, const void *b)$/;"	f
nk_rect_pos	include/nuklear.h	/^nk_rect_pos(struct nk_rect r)$/;"	f
nk_rect_size	include/nuklear.h	/^nk_rect_size(struct nk_rect r)$/;"	f
nk_recta	include/nuklear.h	/^nk_recta(struct nk_vec2 pos, struct nk_vec2 size)$/;"	f
nk_recti	include/nuklear.h	/^nk_recti(int x, int y, int w, int h)$/;"	f
nk_recti	include/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	s
nk_rectiv	include/nuklear.h	/^nk_rectiv(const int *r)$/;"	f
nk_rectv	include/nuklear.h	/^nk_rectv(const float *r)$/;"	f
nk_red	include/nuklear.h	/^NK_GLOBAL const struct nk_color nk_red = {255,0,0,255};$/;"	v	typeref:struct:nk_color
nk_remove_table	include/nuklear.h	/^nk_remove_table(struct nk_window *win, struct nk_table *tbl)$/;"	f
nk_remove_window	include/nuklear.h	/^nk_remove_window(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_rgb	include/nuklear.h	/^nk_rgb(int r, int g, int b)$/;"	f
nk_rgb_bv	include/nuklear.h	/^nk_rgb_bv(const nk_byte* c)$/;"	f
nk_rgb_cf	include/nuklear.h	/^nk_rgb_cf(struct nk_colorf c)$/;"	f
nk_rgb_f	include/nuklear.h	/^nk_rgb_f(float r, float g, float b)$/;"	f
nk_rgb_fv	include/nuklear.h	/^nk_rgb_fv(const float *c)$/;"	f
nk_rgb_hex	include/nuklear.h	/^nk_rgb_hex(const char *rgb)$/;"	f
nk_rgb_iv	include/nuklear.h	/^nk_rgb_iv(const int *c)$/;"	f
nk_rgba	include/nuklear.h	/^nk_rgba(int r, int g, int b, int a)$/;"	f
nk_rgba_bv	include/nuklear.h	/^nk_rgba_bv(const nk_byte *c)$/;"	f
nk_rgba_cf	include/nuklear.h	/^nk_rgba_cf(struct nk_colorf c)$/;"	f
nk_rgba_f	include/nuklear.h	/^nk_rgba_f(float r, float g, float b, float a)$/;"	f
nk_rgba_fv	include/nuklear.h	/^nk_rgba_fv(const float *c)$/;"	f
nk_rgba_hex	include/nuklear.h	/^nk_rgba_hex(const char *rgb)$/;"	f
nk_rgba_iv	include/nuklear.h	/^nk_rgba_iv(const int *c)$/;"	f
nk_rgba_u32	include/nuklear.h	/^nk_rgba_u32(nk_uint in)$/;"	f
nk_round_up_pow2	include/nuklear.h	/^nk_round_up_pow2(nk_uint v)$/;"	f
nk_row_layout	include/nuklear.h	/^nk_row_layout(struct nk_context *ctx, enum nk_layout_format fmt,$/;"	f
nk_row_layout	include/nuklear.h	/^struct nk_row_layout {$/;"	s
nk_rp__findresult	include/nuklear.h	/^struct nk_rp__findresult {$/;"	s
nk_rp__skyline_find_best_pos	include/nuklear.h	/^nk_rp__skyline_find_best_pos(struct nk_rp_context *c, int width, int height)$/;"	f
nk_rp__skyline_find_min_y	include/nuklear.h	/^nk_rp__skyline_find_min_y(struct nk_rp_context *c, struct nk_rp_node *first,$/;"	f
nk_rp__skyline_pack_rectangle	include/nuklear.h	/^nk_rp__skyline_pack_rectangle(struct nk_rp_context *context, int width, int height)$/;"	f
nk_rp_context	include/nuklear.h	/^struct nk_rp_context {$/;"	s
nk_rp_coord	include/nuklear.h	/^typedef unsigned short nk_rp_coord;$/;"	t
nk_rp_init_target	include/nuklear.h	/^nk_rp_init_target(struct nk_rp_context *context, int width, int height,$/;"	f
nk_rp_node	include/nuklear.h	/^struct nk_rp_node {$/;"	s
nk_rp_pack_rects	include/nuklear.h	/^nk_rp_pack_rects(struct nk_rp_context *context, struct nk_rp_rect *rects, int num_rects)$/;"	f
nk_rp_qsort	include/nuklear.h	/^nk_rp_qsort(struct nk_rp_rect *array, unsigned int len, int(*cmp)(const void*,const void*))$/;"	f
nk_rp_rect	include/nuklear.h	/^struct nk_rp_rect {$/;"	s
nk_rp_setup_allow_out_of_mem	include/nuklear.h	/^nk_rp_setup_allow_out_of_mem(struct nk_rp_context *context, int allow_out_of_mem)$/;"	f
nk_rune	include/nuklear.h	/^typedef nk_uint nk_rune;$/;"	t
nk_scroll	include/nuklear.h	/^struct nk_scroll {nk_uint x, y;};$/;"	s
nk_scrollbar_behavior	include/nuklear.h	/^nk_scrollbar_behavior(nk_flags *state, struct nk_input *in,$/;"	f
nk_select_image_label	include/nuklear.h	/^NK_API int nk_select_image_label(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_select_image_text	include/nuklear.h	/^NK_API int nk_select_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_select_label	include/nuklear.h	/^NK_API int nk_select_label(struct nk_context *ctx, const char *str, nk_flags align, int value)$/;"	f
nk_select_symbol_label	include/nuklear.h	/^nk_select_symbol_label(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_select_symbol_text	include/nuklear.h	/^nk_select_symbol_text(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_select_text	include/nuklear.h	/^NK_API int nk_select_text(struct nk_context *ctx, const char *str, int len,$/;"	f
nk_selectable_image_label	include/nuklear.h	/^NK_API int nk_selectable_image_label(struct nk_context *ctx,struct nk_image img,$/;"	f
nk_selectable_image_text	include/nuklear.h	/^nk_selectable_image_text(struct nk_context *ctx, struct nk_image img,$/;"	f
nk_selectable_label	include/nuklear.h	/^NK_API int nk_selectable_label(struct nk_context *ctx, const char *str, nk_flags align, int *value)$/;"	f
nk_selectable_symbol_label	include/nuklear.h	/^nk_selectable_symbol_label(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_selectable_symbol_text	include/nuklear.h	/^nk_selectable_symbol_text(struct nk_context *ctx, enum nk_symbol_type sym,$/;"	f
nk_selectable_text	include/nuklear.h	/^nk_selectable_text(struct nk_context *ctx, const char *str, int len,$/;"	f
nk_set_user_data	include/nuklear.h	/^nk_set_user_data(struct nk_context *ctx, nk_handle handle)$/;"	f
nk_setup	include/nuklear.h	/^nk_setup(struct nk_context *ctx, const struct nk_user_font *font)$/;"	f
nk_short	include/nuklear.h	/^typedef NK_INT16 nk_short;$/;"	t
nk_show_states	include/nuklear.h	/^enum nk_show_states     {NK_HIDDEN = nk_false, NK_SHOWN = nk_true};$/;"	g
nk_shrink_rect	include/nuklear.h	/^nk_shrink_rect(struct nk_rect r, float amount)$/;"	f
nk_sin	include/nuklear.h	/^nk_sin(float x)$/;"	f
nk_size	include/nuklear.h	/^typedef NK_SIZE_TYPE nk_size;$/;"	t
nk_slide_float	include/nuklear.h	/^nk_slide_float(struct nk_context *ctx, float min, float val, float max, float step)$/;"	f
nk_slide_int	include/nuklear.h	/^nk_slide_int(struct nk_context *ctx, int min, int val, int max, int step)$/;"	f
nk_slider_behavior	include/nuklear.h	/^nk_slider_behavior(nk_flags *state, struct nk_rect *logical_cursor,$/;"	f
nk_slider_float	include/nuklear.h	/^nk_slider_float(struct nk_context *ctx, float min_value, float *value, float max_value,$/;"	f
nk_slider_int	include/nuklear.h	/^nk_slider_int(struct nk_context *ctx, int min, int *val, int max, int step)$/;"	f
nk_spacing	include/nuklear.h	/^nk_spacing(struct nk_context *ctx, int cols)$/;"	f
nk_sqrt	include/nuklear.h	/^nk_sqrt(float x)$/;"	f
nk_start	include/nuklear.h	/^nk_start(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_start_buffer	include/nuklear.h	/^nk_start_buffer(struct nk_context *ctx, struct nk_command_buffer *buffer)$/;"	f
nk_start_popup	include/nuklear.h	/^nk_start_popup(struct nk_context *ctx, struct nk_window *win)$/;"	f
nk_str	include/nuklear.h	/^struct nk_str {$/;"	s
nk_str_append_str_char	include/nuklear.h	/^nk_str_append_str_char(struct nk_str *s, const char *str)$/;"	f
nk_str_append_str_runes	include/nuklear.h	/^nk_str_append_str_runes(struct nk_str *str, const nk_rune *runes)$/;"	f
nk_str_append_str_utf8	include/nuklear.h	/^nk_str_append_str_utf8(struct nk_str *str, const char *text)$/;"	f
nk_str_append_text_char	include/nuklear.h	/^nk_str_append_text_char(struct nk_str *s, const char *str, int len)$/;"	f
nk_str_append_text_runes	include/nuklear.h	/^nk_str_append_text_runes(struct nk_str *str, const nk_rune *text, int len)$/;"	f
nk_str_append_text_utf8	include/nuklear.h	/^nk_str_append_text_utf8(struct nk_str *str, const char *text, int len)$/;"	f
nk_str_at_char	include/nuklear.h	/^nk_str_at_char(struct nk_str *s, int pos)$/;"	f
nk_str_at_char_const	include/nuklear.h	/^nk_str_at_char_const(const struct nk_str *s, int pos)$/;"	f
nk_str_at_const	include/nuklear.h	/^nk_str_at_const(const struct nk_str *str, int pos, nk_rune *unicode, int *len)$/;"	f
nk_str_at_rune	include/nuklear.h	/^nk_str_at_rune(struct nk_str *str, int pos, nk_rune *unicode, int *len)$/;"	f
nk_str_clear	include/nuklear.h	/^nk_str_clear(struct nk_str *str)$/;"	f
nk_str_delete_chars	include/nuklear.h	/^nk_str_delete_chars(struct nk_str *s, int pos, int len)$/;"	f
nk_str_delete_runes	include/nuklear.h	/^nk_str_delete_runes(struct nk_str *s, int pos, int len)$/;"	f
nk_str_free	include/nuklear.h	/^nk_str_free(struct nk_str *str)$/;"	f
nk_str_get	include/nuklear.h	/^nk_str_get(struct nk_str *s)$/;"	f
nk_str_get_const	include/nuklear.h	/^nk_str_get_const(const struct nk_str *s)$/;"	f
nk_str_init	include/nuklear.h	/^nk_str_init(struct nk_str *str, const struct nk_allocator *alloc, nk_size size)$/;"	f
nk_str_init_default	include/nuklear.h	/^nk_str_init_default(struct nk_str *str)$/;"	f
nk_str_init_fixed	include/nuklear.h	/^nk_str_init_fixed(struct nk_str *str, void *memory, nk_size size)$/;"	f
nk_str_insert_at_char	include/nuklear.h	/^nk_str_insert_at_char(struct nk_str *s, int pos, const char *str, int len)$/;"	f
nk_str_insert_at_rune	include/nuklear.h	/^nk_str_insert_at_rune(struct nk_str *str, int pos, const char *cstr, int len)$/;"	f
nk_str_insert_str_char	include/nuklear.h	/^nk_str_insert_str_char(struct nk_str *str, int pos, const char *text)$/;"	f
nk_str_insert_str_runes	include/nuklear.h	/^nk_str_insert_str_runes(struct nk_str *str, int pos, const nk_rune *runes)$/;"	f
nk_str_insert_str_utf8	include/nuklear.h	/^nk_str_insert_str_utf8(struct nk_str *str, int pos, const char *text)$/;"	f
nk_str_insert_text_char	include/nuklear.h	/^nk_str_insert_text_char(struct nk_str *str, int pos, const char *text, int len)$/;"	f
nk_str_insert_text_runes	include/nuklear.h	/^nk_str_insert_text_runes(struct nk_str *str, int pos, const nk_rune *runes, int len)$/;"	f
nk_str_insert_text_utf8	include/nuklear.h	/^nk_str_insert_text_utf8(struct nk_str *str, int pos, const char *text, int len)$/;"	f
nk_str_len	include/nuklear.h	/^nk_str_len(struct nk_str *s)$/;"	f
nk_str_len_char	include/nuklear.h	/^nk_str_len_char(struct nk_str *s)$/;"	f
nk_str_match_here	include/nuklear.h	/^nk_str_match_here(const char *regexp, const char *text)$/;"	f
nk_str_match_star	include/nuklear.h	/^nk_str_match_star(int c, const char *regexp, const char *text)$/;"	f
nk_str_remove_chars	include/nuklear.h	/^nk_str_remove_chars(struct nk_str *s, int len)$/;"	f
nk_str_remove_runes	include/nuklear.h	/^nk_str_remove_runes(struct nk_str *str, int len)$/;"	f
nk_str_rune_at	include/nuklear.h	/^nk_str_rune_at(const struct nk_str *str, int pos)$/;"	f
nk_strfilter	include/nuklear.h	/^nk_strfilter(const char *text, const char *regexp)$/;"	f
nk_strfmt	include/nuklear.h	/^nk_strfmt(char *buf, int buf_size, const char *fmt, va_list args)$/;"	f
nk_stricmp	include/nuklear.h	/^nk_stricmp(const char *s1, const char *s2)$/;"	f
nk_stricmpn	include/nuklear.h	/^nk_stricmpn(const char *s1, const char *s2, int n)$/;"	f
nk_string_float_limit	include/nuklear.h	/^nk_string_float_limit(char *string, int prec)$/;"	f
nk_strlen	include/nuklear.h	/^nk_strlen(const char *str)$/;"	f
nk_strmatch_fuzzy_string	include/nuklear.h	/^nk_strmatch_fuzzy_string(char const *str, char const *pattern, int *out_score)$/;"	f
nk_strmatch_fuzzy_text	include/nuklear.h	/^nk_strmatch_fuzzy_text(const char *str, int str_len,$/;"	f
nk_stroke_arc	include/nuklear.h	/^nk_stroke_arc(struct nk_command_buffer *b, float cx, float cy, float radius,$/;"	f
nk_stroke_circle	include/nuklear.h	/^nk_stroke_circle(struct nk_command_buffer *b, struct nk_rect r,$/;"	f
nk_stroke_curve	include/nuklear.h	/^nk_stroke_curve(struct nk_command_buffer *b, float ax, float ay,$/;"	f
nk_stroke_line	include/nuklear.h	/^nk_stroke_line(struct nk_command_buffer *b, float x0, float y0,$/;"	f
nk_stroke_polygon	include/nuklear.h	/^nk_stroke_polygon(struct nk_command_buffer *b,  float *points, int point_count,$/;"	f
nk_stroke_polyline	include/nuklear.h	/^nk_stroke_polyline(struct nk_command_buffer *b, float *points, int point_count,$/;"	f
nk_stroke_rect	include/nuklear.h	/^nk_stroke_rect(struct nk_command_buffer *b, struct nk_rect rect,$/;"	f
nk_stroke_triangle	include/nuklear.h	/^nk_stroke_triangle(struct nk_command_buffer *b, float x0, float y0, float x1,$/;"	f
nk_strrev_ascii	include/nuklear.h	/^nk_strrev_ascii(char *s)$/;"	f
nk_strtod	include/nuklear.h	/^nk_strtod(const char *str, const char **endptr)$/;"	f
nk_strtof	include/nuklear.h	/^nk_strtof(const char *str, const char **endptr)$/;"	f
nk_strtoi	include/nuklear.h	/^nk_strtoi(const char *str, const char **endptr)$/;"	f
nk_style	include/nuklear.h	/^struct nk_style {$/;"	s
nk_style_button	include/nuklear.h	/^struct nk_style_button {$/;"	s
nk_style_chart	include/nuklear.h	/^struct nk_style_chart {$/;"	s
nk_style_colors	include/nuklear.h	/^enum nk_style_colors {$/;"	g
nk_style_combo	include/nuklear.h	/^struct nk_style_combo {$/;"	s
nk_style_cursor	include/nuklear.h	/^enum nk_style_cursor {$/;"	g
nk_style_default	include/nuklear.h	/^NK_API void nk_style_default(struct nk_context *ctx){nk_style_from_table(ctx, 0);}$/;"	f
nk_style_edit	include/nuklear.h	/^struct nk_style_edit {$/;"	s
nk_style_from_table	include/nuklear.h	/^nk_style_from_table(struct nk_context *ctx, const struct nk_color *table)$/;"	f
nk_style_get_color_by_name	include/nuklear.h	/^nk_style_get_color_by_name(enum nk_style_colors c)$/;"	f
nk_style_header_align	include/nuklear.h	/^enum nk_style_header_align {$/;"	g
nk_style_hide_cursor	include/nuklear.h	/^nk_style_hide_cursor(struct nk_context *ctx)$/;"	f
nk_style_item	include/nuklear.h	/^struct nk_style_item {$/;"	s
nk_style_item_color	include/nuklear.h	/^nk_style_item_color(struct nk_color col)$/;"	f
nk_style_item_data	include/nuklear.h	/^union nk_style_item_data {$/;"	u
nk_style_item_hide	include/nuklear.h	/^nk_style_item_hide(void)$/;"	f
nk_style_item_image	include/nuklear.h	/^nk_style_item_image(struct nk_image img)$/;"	f
nk_style_item_type	include/nuklear.h	/^enum nk_style_item_type {$/;"	g
nk_style_load_all_cursors	include/nuklear.h	/^nk_style_load_all_cursors(struct nk_context *ctx, struct nk_cursor *cursors)$/;"	f
nk_style_load_cursor	include/nuklear.h	/^nk_style_load_cursor(struct nk_context *ctx, enum nk_style_cursor cursor,$/;"	f
nk_style_pop_font	include/nuklear.h	/^nk_style_pop_font(struct nk_context *ctx)$/;"	f
nk_style_progress	include/nuklear.h	/^struct nk_style_progress {$/;"	s
nk_style_property	include/nuklear.h	/^struct nk_style_property {$/;"	s
nk_style_push_font	include/nuklear.h	/^nk_style_push_font(struct nk_context *ctx, const struct nk_user_font *font)$/;"	f
nk_style_scrollbar	include/nuklear.h	/^struct nk_style_scrollbar {$/;"	s
nk_style_selectable	include/nuklear.h	/^struct nk_style_selectable {$/;"	s
nk_style_set_cursor	include/nuklear.h	/^nk_style_set_cursor(struct nk_context *ctx, enum nk_style_cursor c)$/;"	f
nk_style_set_font	include/nuklear.h	/^nk_style_set_font(struct nk_context *ctx, const struct nk_user_font *font)$/;"	f
nk_style_show_cursor	include/nuklear.h	/^nk_style_show_cursor(struct nk_context *ctx)$/;"	f
nk_style_slider	include/nuklear.h	/^struct nk_style_slider {$/;"	s
nk_style_tab	include/nuklear.h	/^struct nk_style_tab {$/;"	s
nk_style_text	include/nuklear.h	/^struct nk_style_text {$/;"	s
nk_style_toggle	include/nuklear.h	/^struct nk_style_toggle {$/;"	s
nk_style_window	include/nuklear.h	/^struct nk_style_window {$/;"	s
nk_style_window_header	include/nuklear.h	/^struct nk_style_window_header {$/;"	s
nk_subimage_handle	include/nuklear.h	/^nk_subimage_handle(nk_handle handle, unsigned short w, unsigned short h,$/;"	f
nk_subimage_id	include/nuklear.h	/^nk_subimage_id(int id, unsigned short w, unsigned short h, struct nk_rect r)$/;"	f
nk_subimage_ptr	include/nuklear.h	/^nk_subimage_ptr(void *ptr, unsigned short w, unsigned short h, struct nk_rect r)$/;"	f
nk_symbol_type	include/nuklear.h	/^enum nk_symbol_type {$/;"	g
nk_table	include/nuklear.h	/^struct nk_table {$/;"	s
nk_text	include/nuklear.h	/^nk_text(struct nk_context *ctx, const char *str, int len, nk_flags alignment)$/;"	f
nk_text	include/nuklear.h	/^struct nk_text {$/;"	s
nk_text_align	include/nuklear.h	/^enum nk_text_align {$/;"	g
nk_text_alignment	include/nuklear.h	/^enum nk_text_alignment {$/;"	g
nk_text_calculate_text_bounds	include/nuklear.h	/^nk_text_calculate_text_bounds(const struct nk_user_font *font,$/;"	f
nk_text_clamp	include/nuklear.h	/^nk_text_clamp(const struct nk_user_font *font, const char *text,$/;"	f
nk_text_colored	include/nuklear.h	/^nk_text_colored(struct nk_context *ctx, const char *str, int len,$/;"	f
nk_text_edit	include/nuklear.h	/^struct nk_text_edit {$/;"	s
nk_text_edit_mode	include/nuklear.h	/^enum nk_text_edit_mode {$/;"	g
nk_text_edit_row	include/nuklear.h	/^struct nk_text_edit_row {$/;"	s
nk_text_edit_type	include/nuklear.h	/^enum nk_text_edit_type {$/;"	g
nk_text_find	include/nuklear.h	/^struct nk_text_find {$/;"	s
nk_text_undo_record	include/nuklear.h	/^struct nk_text_undo_record {$/;"	s
nk_text_undo_state	include/nuklear.h	/^struct nk_text_undo_state {$/;"	s
nk_text_width_f	include/nuklear.h	/^typedef float(*nk_text_width_f)(nk_handle, float h, const char*, int len);$/;"	t
nk_text_wrap	include/nuklear.h	/^nk_text_wrap(struct nk_context *ctx, const char *str, int len)$/;"	f
nk_text_wrap_colored	include/nuklear.h	/^nk_text_wrap_colored(struct nk_context *ctx, const char *str,$/;"	f
nk_textedit_clamp	include/nuklear.h	/^nk_textedit_clamp(struct nk_text_edit *state)$/;"	f
nk_textedit_clear_state	include/nuklear.h	/^nk_textedit_clear_state(struct nk_text_edit *state, enum nk_text_edit_type type,$/;"	f
nk_textedit_click	include/nuklear.h	/^nk_textedit_click(struct nk_text_edit *state, float x, float y,$/;"	f
nk_textedit_create_undo_record	include/nuklear.h	/^nk_textedit_create_undo_record(struct nk_text_undo_state *state, int numchars)$/;"	f
nk_textedit_createundo	include/nuklear.h	/^nk_textedit_createundo(struct nk_text_undo_state *state, int pos,$/;"	f
nk_textedit_cut	include/nuklear.h	/^nk_textedit_cut(struct nk_text_edit *state)$/;"	f
nk_textedit_delete	include/nuklear.h	/^nk_textedit_delete(struct nk_text_edit *state, int where, int len)$/;"	f
nk_textedit_delete_selection	include/nuklear.h	/^nk_textedit_delete_selection(struct nk_text_edit *state)$/;"	f
nk_textedit_discard_redo	include/nuklear.h	/^nk_textedit_discard_redo(struct nk_text_undo_state *state)$/;"	f
nk_textedit_discard_undo	include/nuklear.h	/^nk_textedit_discard_undo(struct nk_text_undo_state *state)$/;"	f
nk_textedit_drag	include/nuklear.h	/^nk_textedit_drag(struct nk_text_edit *state, float x, float y,$/;"	f
nk_textedit_find_charpos	include/nuklear.h	/^nk_textedit_find_charpos(struct nk_text_find *find, struct nk_text_edit *state,$/;"	f
nk_textedit_flush_redo	include/nuklear.h	/^nk_textedit_flush_redo(struct nk_text_undo_state *state)$/;"	f
nk_textedit_free	include/nuklear.h	/^nk_textedit_free(struct nk_text_edit *state)$/;"	f
nk_textedit_get_width	include/nuklear.h	/^nk_textedit_get_width(const struct nk_text_edit *edit, int line_start, int char_id,$/;"	f
nk_textedit_init	include/nuklear.h	/^nk_textedit_init(struct nk_text_edit *state, struct nk_allocator *alloc, nk_size size)$/;"	f
nk_textedit_init_default	include/nuklear.h	/^nk_textedit_init_default(struct nk_text_edit *state)$/;"	f
nk_textedit_init_fixed	include/nuklear.h	/^nk_textedit_init_fixed(struct nk_text_edit *state, void *memory, nk_size size)$/;"	f
nk_textedit_key	include/nuklear.h	/^nk_textedit_key(struct nk_text_edit *state, enum nk_keys key, int shift_mod,$/;"	f
nk_textedit_layout_row	include/nuklear.h	/^nk_textedit_layout_row(struct nk_text_edit_row *r, struct nk_text_edit *edit,$/;"	f
nk_textedit_locate_coord	include/nuklear.h	/^nk_textedit_locate_coord(struct nk_text_edit *edit, float x, float y,$/;"	f
nk_textedit_makeundo_delete	include/nuklear.h	/^nk_textedit_makeundo_delete(struct nk_text_edit *state, int where, int length)$/;"	f
nk_textedit_makeundo_insert	include/nuklear.h	/^nk_textedit_makeundo_insert(struct nk_text_edit *state, int where, int length)$/;"	f
nk_textedit_makeundo_replace	include/nuklear.h	/^nk_textedit_makeundo_replace(struct nk_text_edit *state, int where,$/;"	f
nk_textedit_move_to_first	include/nuklear.h	/^nk_textedit_move_to_first(struct nk_text_edit *state)$/;"	f
nk_textedit_move_to_last	include/nuklear.h	/^nk_textedit_move_to_last(struct nk_text_edit *state)$/;"	f
nk_textedit_move_to_word_next	include/nuklear.h	/^nk_textedit_move_to_word_next(struct nk_text_edit *state)$/;"	f
nk_textedit_move_to_word_previous	include/nuklear.h	/^nk_textedit_move_to_word_previous(struct nk_text_edit *state)$/;"	f
nk_textedit_paste	include/nuklear.h	/^nk_textedit_paste(struct nk_text_edit *state, char const *ctext, int len)$/;"	f
nk_textedit_prep_selection_at_cursor	include/nuklear.h	/^nk_textedit_prep_selection_at_cursor(struct nk_text_edit *state)$/;"	f
nk_textedit_redo	include/nuklear.h	/^nk_textedit_redo(struct nk_text_edit *state)$/;"	f
nk_textedit_select_all	include/nuklear.h	/^nk_textedit_select_all(struct nk_text_edit *state)$/;"	f
nk_textedit_sortselection	include/nuklear.h	/^nk_textedit_sortselection(struct nk_text_edit *state)$/;"	f
nk_textedit_text	include/nuklear.h	/^nk_textedit_text(struct nk_text_edit *state, const char *text, int total_len)$/;"	f
nk_textedit_undo	include/nuklear.h	/^nk_textedit_undo(struct nk_text_edit *state)$/;"	f
nk_to_lower	include/nuklear.h	/^NK_LIB int nk_to_lower(int c) {return (c >= 'A' && c <= 'Z') ? (c - ('a' + 'A')) : c;}$/;"	f
nk_to_upper	include/nuklear.h	/^NK_LIB int nk_to_upper(int c) {return (c >= 'a' && c <= 'z') ? (c - ('a' - 'A')) : c;}$/;"	f
nk_toggle_behavior	include/nuklear.h	/^nk_toggle_behavior(const struct nk_input *in, struct nk_rect select,$/;"	f
nk_toggle_type	include/nuklear.h	/^enum nk_toggle_type {$/;"	g
nk_tooltip	include/nuklear.h	/^nk_tooltip(struct nk_context *ctx, const char *text)$/;"	f
nk_tooltip_begin	include/nuklear.h	/^nk_tooltip_begin(struct nk_context *ctx, float width)$/;"	f
nk_tooltip_end	include/nuklear.h	/^nk_tooltip_end(struct nk_context *ctx)$/;"	f
nk_tooltipf	include/nuklear.h	/^nk_tooltipf(struct nk_context *ctx, const char *fmt, ...)$/;"	f
nk_tooltipfv	include/nuklear.h	/^nk_tooltipfv(struct nk_context *ctx, const char *fmt, va_list args)$/;"	f
nk_tree_base	include/nuklear.h	/^nk_tree_base(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_element_base	include/nuklear.h	/^nk_tree_element_base(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_element_image_push_hashed	include/nuklear.h	/^nk_tree_element_image_push_hashed(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_element_image_push_hashed_base	include/nuklear.h	/^nk_tree_element_image_push_hashed_base(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_element_pop	include/nuklear.h	/^nk_tree_element_pop(struct nk_context *ctx)$/;"	f
nk_tree_element_push	include/nuklear.h	/^#define nk_tree_element_push(/;"	d
nk_tree_element_push_hashed	include/nuklear.h	/^nk_tree_element_push_hashed(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_element_push_id	include/nuklear.h	/^#define nk_tree_element_push_id(/;"	d
nk_tree_image_push	include/nuklear.h	/^#define nk_tree_image_push(/;"	d
nk_tree_image_push_hashed	include/nuklear.h	/^nk_tree_image_push_hashed(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_image_push_id	include/nuklear.h	/^#define nk_tree_image_push_id(/;"	d
nk_tree_pop	include/nuklear.h	/^nk_tree_pop(struct nk_context *ctx)$/;"	f
nk_tree_push	include/nuklear.h	/^#define nk_tree_push(/;"	d
nk_tree_push_hashed	include/nuklear.h	/^nk_tree_push_hashed(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_push_id	include/nuklear.h	/^#define nk_tree_push_id(/;"	d
nk_tree_state_base	include/nuklear.h	/^nk_tree_state_base(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_state_image_push	include/nuklear.h	/^nk_tree_state_image_push(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_state_pop	include/nuklear.h	/^nk_tree_state_pop(struct nk_context *ctx)$/;"	f
nk_tree_state_push	include/nuklear.h	/^nk_tree_state_push(struct nk_context *ctx, enum nk_tree_type type,$/;"	f
nk_tree_type	include/nuklear.h	/^enum nk_tree_type       {NK_TREE_NODE, NK_TREE_TAB};$/;"	g
nk_triangle_from_direction	include/nuklear.h	/^nk_triangle_from_direction(struct nk_vec2 *result, struct nk_rect r,$/;"	f
nk_true	include/nuklear.h	/^enum {nk_false, nk_true};$/;"	e	enum:__anon1
nk_ttBYTE	include/nuklear.h	/^#define nk_ttBYTE(/;"	d
nk_ttCHAR	include/nuklear.h	/^#define nk_ttCHAR(/;"	d
nk_ttLONG	include/nuklear.h	/^   #define nk_ttLONG(/;"	d
nk_ttSHORT	include/nuklear.h	/^    static nk_short nk_ttSHORT(const nk_byte *p)   { return (nk_short)(p[0]*256 + p[1]); }$/;"	f
nk_ttSHORT	include/nuklear.h	/^   #define nk_ttSHORT(/;"	d
nk_ttULONG	include/nuklear.h	/^    static nk_uint nk_ttULONG(const nk_byte *p)  { return (nk_uint)((p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]); }$/;"	f
nk_ttULONG	include/nuklear.h	/^   #define nk_ttULONG(/;"	d
nk_ttUSHORT	include/nuklear.h	/^    static nk_ushort nk_ttUSHORT(const nk_byte *p) { return (nk_ushort)(p[0]*256 + p[1]); }$/;"	f
nk_ttUSHORT	include/nuklear.h	/^   #define nk_ttUSHORT(/;"	d
nk_tt_FindGlyphIndex	include/nuklear.h	/^nk_tt_FindGlyphIndex(const struct nk_tt_fontinfo *info, int unicode_codepoint)$/;"	f
nk_tt_FlattenCurves	include/nuklear.h	/^nk_tt_FlattenCurves(struct nk_tt_vertex *vertices, int num_verts,$/;"	f
nk_tt_GetFontVMetrics	include/nuklear.h	/^nk_tt_GetFontVMetrics(const struct nk_tt_fontinfo *info,$/;"	f
nk_tt_GetGlyphBitmapBox	include/nuklear.h	/^nk_tt_GetGlyphBitmapBox(const struct nk_tt_fontinfo *font, int glyph,$/;"	f
nk_tt_GetGlyphBitmapBoxSubpixel	include/nuklear.h	/^nk_tt_GetGlyphBitmapBoxSubpixel(const struct nk_tt_fontinfo *font,$/;"	f
nk_tt_GetGlyphBox	include/nuklear.h	/^nk_tt_GetGlyphBox(const struct nk_tt_fontinfo *info, int glyph_index,$/;"	f
nk_tt_GetGlyphHMetrics	include/nuklear.h	/^nk_tt_GetGlyphHMetrics(const struct nk_tt_fontinfo *info, int glyph_index,$/;"	f
nk_tt_GetGlyphShape	include/nuklear.h	/^nk_tt_GetGlyphShape(const struct nk_tt_fontinfo *info, struct nk_allocator *alloc,$/;"	f
nk_tt_GetPackedQuad	include/nuklear.h	/^nk_tt_GetPackedQuad(struct nk_tt_packedchar *chardata, int pw, int ph,$/;"	f
nk_tt_InitFont	include/nuklear.h	/^nk_tt_InitFont(struct nk_tt_fontinfo *info, const unsigned char *data2, int fontstart)$/;"	f
nk_tt_MakeGlyphBitmapSubpixel	include/nuklear.h	/^nk_tt_MakeGlyphBitmapSubpixel(const struct nk_tt_fontinfo *info, unsigned char *output,$/;"	f
nk_tt_PackBegin	include/nuklear.h	/^nk_tt_PackBegin(struct nk_tt_pack_context *spc, unsigned char *pixels,$/;"	f
nk_tt_PackEnd	include/nuklear.h	/^nk_tt_PackEnd(struct nk_tt_pack_context *spc, struct nk_allocator *alloc)$/;"	f
nk_tt_PackFontRangesGatherRects	include/nuklear.h	/^nk_tt_PackFontRangesGatherRects(struct nk_tt_pack_context *spc,$/;"	f
nk_tt_PackFontRangesRenderIntoRects	include/nuklear.h	/^nk_tt_PackFontRangesRenderIntoRects(struct nk_tt_pack_context *spc,$/;"	f
nk_tt_PackSetOversampling	include/nuklear.h	/^nk_tt_PackSetOversampling(struct nk_tt_pack_context *spc,$/;"	f
nk_tt_Rasterize	include/nuklear.h	/^nk_tt_Rasterize(struct nk_tt__bitmap *result, float flatness_in_pixels,$/;"	f
nk_tt_ScaleForMappingEmToPixels	include/nuklear.h	/^nk_tt_ScaleForMappingEmToPixels(const struct nk_tt_fontinfo *info, float pixels)$/;"	f
nk_tt_ScaleForPixelHeight	include/nuklear.h	/^nk_tt_ScaleForPixelHeight(const struct nk_tt_fontinfo *info, float height)$/;"	f
nk_tt__GetGlyfOffset	include/nuklear.h	/^nk_tt__GetGlyfOffset(const struct nk_tt_fontinfo *info, int glyph_index)$/;"	f
nk_tt__active_edge	include/nuklear.h	/^struct nk_tt__active_edge {$/;"	s
nk_tt__add_point	include/nuklear.h	/^nk_tt__add_point(struct nk_tt__point *points, int n, float x, float y)$/;"	f
nk_tt__bitmap	include/nuklear.h	/^struct nk_tt__bitmap{$/;"	s
nk_tt__close_shape	include/nuklear.h	/^nk_tt__close_shape(struct nk_tt_vertex *vertices, int num_vertices, int was_off,$/;"	f
nk_tt__edge	include/nuklear.h	/^struct nk_tt__edge {$/;"	s
nk_tt__fill_active_edges_new	include/nuklear.h	/^nk_tt__fill_active_edges_new(float *scanline, float *scanline_fill, int len,$/;"	f
nk_tt__find_table	include/nuklear.h	/^nk_tt__find_table(const nk_byte *data, nk_uint fontstart, const char *tag)$/;"	f
nk_tt__h_prefilter	include/nuklear.h	/^nk_tt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes,$/;"	f
nk_tt__handle_clipped_edge	include/nuklear.h	/^nk_tt__handle_clipped_edge(float *scanline, int x, struct nk_tt__active_edge *e,$/;"	f
nk_tt__hheap	include/nuklear.h	/^struct nk_tt__hheap {$/;"	s
nk_tt__hheap_alloc	include/nuklear.h	/^nk_tt__hheap_alloc(struct nk_tt__hheap *hh, nk_size size)$/;"	f
nk_tt__hheap_chunk	include/nuklear.h	/^struct nk_tt__hheap_chunk {$/;"	s
nk_tt__hheap_cleanup	include/nuklear.h	/^nk_tt__hheap_cleanup(struct nk_tt__hheap *hh)$/;"	f
nk_tt__hheap_free	include/nuklear.h	/^nk_tt__hheap_free(struct nk_tt__hheap *hh, void *p)$/;"	f
nk_tt__new_active	include/nuklear.h	/^nk_tt__new_active(struct nk_tt__hheap *hh, struct nk_tt__edge *e,$/;"	f
nk_tt__oversample_shift	include/nuklear.h	/^nk_tt__oversample_shift(int oversample)$/;"	f
nk_tt__point	include/nuklear.h	/^struct nk_tt__point {float x,y;};$/;"	s
nk_tt__rasterize	include/nuklear.h	/^nk_tt__rasterize(struct nk_tt__bitmap *result, struct nk_tt__point *pts,$/;"	f
nk_tt__rasterize_sorted_edges	include/nuklear.h	/^nk_tt__rasterize_sorted_edges(struct nk_tt__bitmap *result, struct nk_tt__edge *e,$/;"	f
nk_tt__sort_edges	include/nuklear.h	/^nk_tt__sort_edges(struct nk_tt__edge *p, int n)$/;"	f
nk_tt__sort_edges_ins_sort	include/nuklear.h	/^nk_tt__sort_edges_ins_sort(struct nk_tt__edge *p, int n)$/;"	f
nk_tt__sort_edges_quicksort	include/nuklear.h	/^nk_tt__sort_edges_quicksort(struct nk_tt__edge *p, int n)$/;"	f
nk_tt__tesselate_curve	include/nuklear.h	/^nk_tt__tesselate_curve(struct nk_tt__point *points, int *num_points,$/;"	f
nk_tt__v_prefilter	include/nuklear.h	/^nk_tt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes,$/;"	f
nk_tt_aligned_quad	include/nuklear.h	/^struct nk_tt_aligned_quad{$/;"	s
nk_tt_bakedchar	include/nuklear.h	/^struct nk_tt_bakedchar {$/;"	s
nk_tt_fontinfo	include/nuklear.h	/^struct nk_tt_fontinfo {$/;"	s
nk_tt_pack_context	include/nuklear.h	/^struct nk_tt_pack_context {$/;"	s
nk_tt_pack_range	include/nuklear.h	/^struct nk_tt_pack_range {$/;"	s
nk_tt_packedchar	include/nuklear.h	/^struct nk_tt_packedchar {$/;"	s
nk_tt_setvertex	include/nuklear.h	/^nk_tt_setvertex(struct nk_tt_vertex *v, nk_byte type, nk_int x, nk_int y, nk_int cx, nk_int cy)$/;"	f
nk_tt_tag	include/nuklear.h	/^#define nk_tt_tag(/;"	d
nk_tt_tag4	include/nuklear.h	/^#define nk_tt_tag4(/;"	d
nk_tt_vertex	include/nuklear.h	/^struct nk_tt_vertex {$/;"	s
nk_uchar	include/nuklear.h	/^typedef NK_UINT8 nk_uchar;$/;"	t
nk_uint	include/nuklear.h	/^typedef NK_UINT32 nk_uint;$/;"	t
nk_unify	include/nuklear.h	/^nk_unify(struct nk_rect *clip, const struct nk_rect *a, float x0, float y0,$/;"	f
nk_user_font	include/nuklear.h	/^struct nk_user_font {$/;"	s
nk_user_font_glyph	include/nuklear.h	/^struct nk_user_font_glyph {$/;"	s
nk_ushort	include/nuklear.h	/^typedef NK_UINT16 nk_ushort;$/;"	t
nk_utf_at	include/nuklear.h	/^nk_utf_at(const char *buffer, int length, int index,$/;"	f
nk_utf_decode	include/nuklear.h	/^nk_utf_decode(const char *c, nk_rune *u, int clen)$/;"	f
nk_utf_decode_byte	include/nuklear.h	/^nk_utf_decode_byte(char c, int *i)$/;"	f
nk_utf_encode	include/nuklear.h	/^nk_utf_encode(nk_rune u, char *c, int clen)$/;"	f
nk_utf_encode_byte	include/nuklear.h	/^nk_utf_encode_byte(nk_rune u, int i)$/;"	f
nk_utf_len	include/nuklear.h	/^nk_utf_len(const char *str, int len)$/;"	f
nk_utf_validate	include/nuklear.h	/^nk_utf_validate(nk_rune *u, int i)$/;"	f
nk_utfbyte	include/nuklear.h	/^NK_GLOBAL const nk_byte nk_utfbyte[NK_UTF_SIZE+1] = {0x80, 0, 0xC0, 0xE0, 0xF0};$/;"	v
nk_utfmask	include/nuklear.h	/^NK_GLOBAL const nk_byte nk_utfmask[NK_UTF_SIZE+1] = {0xC0, 0x80, 0xE0, 0xF0, 0xF8};$/;"	v
nk_utfmax	include/nuklear.h	/^NK_GLOBAL const nk_uint nk_utfmax[NK_UTF_SIZE+1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF, 0x10FFFF};$/;"	v
nk_utfmin	include/nuklear.h	/^NK_GLOBAL const nk_uint nk_utfmin[NK_UTF_SIZE+1] = {0, 0, 0x80, 0x800, 0x10000};$/;"	v
nk_value_bool	include/nuklear.h	/^nk_value_bool(struct nk_context *ctx, const char *prefix, int value)$/;"	f
nk_value_color_byte	include/nuklear.h	/^nk_value_color_byte(struct nk_context *ctx, const char *p, struct nk_color c)$/;"	f
nk_value_color_float	include/nuklear.h	/^nk_value_color_float(struct nk_context *ctx, const char *p, struct nk_color color)$/;"	f
nk_value_color_hex	include/nuklear.h	/^nk_value_color_hex(struct nk_context *ctx, const char *prefix, struct nk_color color)$/;"	f
nk_value_float	include/nuklear.h	/^nk_value_float(struct nk_context *ctx, const char *prefix, float value)$/;"	f
nk_value_int	include/nuklear.h	/^nk_value_int(struct nk_context *ctx, const char *prefix, int value)$/;"	f
nk_value_uint	include/nuklear.h	/^nk_value_uint(struct nk_context *ctx, const char *prefix, unsigned int value)$/;"	f
nk_vec2	include/nuklear.h	/^nk_vec2(float x, float y)$/;"	f
nk_vec2	include/nuklear.h	/^struct nk_vec2 {float x,y;};$/;"	s
nk_vec2_add	include/nuklear.h	/^#define nk_vec2_add(/;"	d
nk_vec2_len_sqr	include/nuklear.h	/^#define nk_vec2_len_sqr(/;"	d
nk_vec2_muls	include/nuklear.h	/^#define nk_vec2_muls(/;"	d
nk_vec2_sub	include/nuklear.h	/^#define nk_vec2_sub(/;"	d
nk_vec2i	include/nuklear.h	/^nk_vec2i(int x, int y)$/;"	f
nk_vec2i	include/nuklear.h	/^struct nk_vec2i {short x, y;};$/;"	s
nk_vec2iv	include/nuklear.h	/^nk_vec2iv(const int *v)$/;"	f
nk_vec2v	include/nuklear.h	/^nk_vec2v(const float *v)$/;"	f
nk_vsnprintf	include/nuklear.h	/^nk_vsnprintf(char *buf, int buf_size, const char *fmt, va_list args)$/;"	f
nk_white	include/nuklear.h	/^NK_GLOBAL const struct nk_color nk_white = {255,255,255,255};$/;"	v	typeref:struct:nk_color
nk_widget	include/nuklear.h	/^nk_widget(struct nk_rect *bounds, const struct nk_context *ctx)$/;"	f
nk_widget_bounds	include/nuklear.h	/^nk_widget_bounds(struct nk_context *ctx)$/;"	f
nk_widget_fitting	include/nuklear.h	/^nk_widget_fitting(struct nk_rect *bounds, struct nk_context *ctx,$/;"	f
nk_widget_has_mouse_click_down	include/nuklear.h	/^nk_widget_has_mouse_click_down(struct nk_context *ctx, enum nk_buttons btn, int down)$/;"	f
nk_widget_height	include/nuklear.h	/^nk_widget_height(struct nk_context *ctx)$/;"	f
nk_widget_is_hovered	include/nuklear.h	/^nk_widget_is_hovered(struct nk_context *ctx)$/;"	f
nk_widget_is_mouse_clicked	include/nuklear.h	/^nk_widget_is_mouse_clicked(struct nk_context *ctx, enum nk_buttons btn)$/;"	f
nk_widget_layout_states	include/nuklear.h	/^enum nk_widget_layout_states {$/;"	g
nk_widget_position	include/nuklear.h	/^nk_widget_position(struct nk_context *ctx)$/;"	f
nk_widget_size	include/nuklear.h	/^nk_widget_size(struct nk_context *ctx)$/;"	f
nk_widget_state_reset	include/nuklear.h	/^#define nk_widget_state_reset(/;"	d
nk_widget_states	include/nuklear.h	/^enum nk_widget_states {$/;"	g
nk_widget_text	include/nuklear.h	/^nk_widget_text(struct nk_command_buffer *o, struct nk_rect b,$/;"	f
nk_widget_text_wrap	include/nuklear.h	/^nk_widget_text_wrap(struct nk_command_buffer *o, struct nk_rect b,$/;"	f
nk_widget_width	include/nuklear.h	/^nk_widget_width(struct nk_context *ctx)$/;"	f
nk_window	include/nuklear.h	/^struct nk_window {$/;"	s
nk_window_close	include/nuklear.h	/^nk_window_close(struct nk_context *ctx, const char *name)$/;"	f
nk_window_collapse	include/nuklear.h	/^nk_window_collapse(struct nk_context *ctx, const char *name,$/;"	f
nk_window_collapse_if	include/nuklear.h	/^nk_window_collapse_if(struct nk_context *ctx, const char *name,$/;"	f
nk_window_find	include/nuklear.h	/^nk_window_find(struct nk_context *ctx, const char *name)$/;"	f
nk_window_flags	include/nuklear.h	/^enum nk_window_flags {$/;"	g
nk_window_get_bounds	include/nuklear.h	/^nk_window_get_bounds(const struct nk_context *ctx)$/;"	f
nk_window_get_canvas	include/nuklear.h	/^nk_window_get_canvas(struct nk_context *ctx)$/;"	f
nk_window_get_content_region	include/nuklear.h	/^nk_window_get_content_region(struct nk_context *ctx)$/;"	f
nk_window_get_content_region_max	include/nuklear.h	/^nk_window_get_content_region_max(struct nk_context *ctx)$/;"	f
nk_window_get_content_region_min	include/nuklear.h	/^nk_window_get_content_region_min(struct nk_context *ctx)$/;"	f
nk_window_get_content_region_size	include/nuklear.h	/^nk_window_get_content_region_size(struct nk_context *ctx)$/;"	f
nk_window_get_height	include/nuklear.h	/^nk_window_get_height(const struct nk_context *ctx)$/;"	f
nk_window_get_panel	include/nuklear.h	/^nk_window_get_panel(struct nk_context *ctx)$/;"	f
nk_window_get_position	include/nuklear.h	/^nk_window_get_position(const struct nk_context *ctx)$/;"	f
nk_window_get_scroll	include/nuklear.h	/^nk_window_get_scroll(struct nk_context *ctx, nk_uint *offset_x, nk_uint *offset_y)$/;"	f
nk_window_get_size	include/nuklear.h	/^nk_window_get_size(const struct nk_context *ctx)$/;"	f
nk_window_get_width	include/nuklear.h	/^nk_window_get_width(const struct nk_context *ctx)$/;"	f
nk_window_has_focus	include/nuklear.h	/^nk_window_has_focus(const struct nk_context *ctx)$/;"	f
nk_window_insert_location	include/nuklear.h	/^enum nk_window_insert_location {$/;"	g
nk_window_is_active	include/nuklear.h	/^nk_window_is_active(struct nk_context *ctx, const char *name)$/;"	f
nk_window_is_any_hovered	include/nuklear.h	/^nk_window_is_any_hovered(struct nk_context *ctx)$/;"	f
nk_window_is_closed	include/nuklear.h	/^nk_window_is_closed(struct nk_context *ctx, const char *name)$/;"	f
nk_window_is_collapsed	include/nuklear.h	/^nk_window_is_collapsed(struct nk_context *ctx, const char *name)$/;"	f
nk_window_is_hidden	include/nuklear.h	/^nk_window_is_hidden(struct nk_context *ctx, const char *name)$/;"	f
nk_window_is_hovered	include/nuklear.h	/^nk_window_is_hovered(struct nk_context *ctx)$/;"	f
nk_window_set_bounds	include/nuklear.h	/^nk_window_set_bounds(struct nk_context *ctx,$/;"	f
nk_window_set_focus	include/nuklear.h	/^nk_window_set_focus(struct nk_context *ctx, const char *name)$/;"	f
nk_window_set_position	include/nuklear.h	/^nk_window_set_position(struct nk_context *ctx,$/;"	f
nk_window_set_scroll	include/nuklear.h	/^nk_window_set_scroll(struct nk_context *ctx, nk_uint offset_x, nk_uint offset_y)$/;"	f
nk_window_set_size	include/nuklear.h	/^nk_window_set_size(struct nk_context *ctx,$/;"	f
nk_window_show	include/nuklear.h	/^nk_window_show(struct nk_context *ctx, const char *name, enum nk_show_states s)$/;"	f
nk_window_show_if	include/nuklear.h	/^nk_window_show_if(struct nk_context *ctx, const char *name,$/;"	f
nk_wmask	include/nuklear.h	/^    #define nk_wmask /;"	d
nk_wmask	include/nuklear.h	/^    #undef nk_wmask$/;"	d
nk_word	include/nuklear.h	/^    #define nk_word /;"	d
nk_word	include/nuklear.h	/^    #undef nk_word$/;"	d
nk_wsize	include/nuklear.h	/^    #define nk_wsize /;"	d
nk_wsize	include/nuklear.h	/^    #undef nk_wsize$/;"	d
nk_yellow	include/nuklear.h	/^NK_GLOBAL const struct nk_color nk_yellow = {255,255,0,255};$/;"	v	typeref:struct:nk_color
nk_zero	include/nuklear.h	/^nk_zero(void *ptr, nk_size size)$/;"	f
nk_zero_struct	include/nuklear.h	/^#define nk_zero_struct(/;"	d
nodeCount	src/utils.h	/^    u64 nodeCount;$/;"	m	struct:Str8List
node_maximize_button	include/nuklear.h	/^    struct nk_style_button node_maximize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_style_button
node_minimize_button	include/nuklear.h	/^    struct nk_style_button node_minimize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_style_button
nodes	include/nuklear.h	/^    void  *nodes;$/;"	m	struct:nk_tt_pack_context
nodes	include/stb_truetype.h	/^    void  *nodes;$/;"	m	struct:stbtt_pack_context
normal	include/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_style_item
normal	include/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_style_item
normal	include/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_style_item
normal	include/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_style_item
normal	include/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_style_item
normal	include/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_style_item
normal	include/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
normal	include/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_style_item
normal	include/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_style_item
normal	include/nuklear.h	/^    struct nk_style_item normal;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_style_item
normal_active	include/nuklear.h	/^    struct nk_style_item normal_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
null	include/nuklear.h	/^    struct nk_draw_null_texture null; \/* handle to texture with a white pixel for shape drawing *\/$/;"	m	struct:nk_convert_config	typeref:struct:nk_convert_config::nk_draw_null_texture
numGlyphs	include/nuklear.h	/^    int numGlyphs;\/* number of glyphs, needed for range checking *\/$/;"	m	struct:nk_tt_fontinfo
numGlyphs	include/stb_truetype.h	/^    int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo
num_chars	include/nuklear.h	/^    int num_chars;$/;"	m	struct:nk_tt_pack_range
num_chars	include/nuklear.h	/^   int num_chars;$/;"	m	struct:nk_text_edit_row
num_chars	include/stb_truetype.h	/^    int num_chars;$/;"	m	struct:__anon18
num_nodes	include/nuklear.h	/^    int num_nodes;$/;"	m	struct:nk_rp_context
num_remaining_in_head_chunk	include/nuklear.h	/^    int    num_remaining_in_head_chunk;$/;"	m	struct:nk_tt__hheap
num_remaining_in_head_chunk	include/stb_truetype.h	/^    int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap
num_vertices	include/stb_truetype.h	/^    int num_vertices;$/;"	m	struct:__anon28
offset	include/nuklear.h	/^    nk_size offset;$/;"	m	struct:nk_buffer_marker
offset	include/nuklear.h	/^    nk_size offset;$/;"	m	struct:nk_draw_vertex_layout_element
offset	include/nuklear.h	/^    struct nk_scroll offset;$/;"	m	struct:nk_menu_state	typeref:struct:nk_menu_state::nk_scroll
offset	include/nuklear.h	/^    struct nk_vec2 offset;$/;"	m	struct:nk_user_font_glyph	typeref:struct:nk_user_font_glyph::nk_vec2
offset	include/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	m	struct:nk_cursor	typeref:struct:nk_cursor::
offset_x	include/nuklear.h	/^    nk_uint *offset_x;$/;"	m	struct:nk_panel
offset_y	include/nuklear.h	/^    nk_uint *offset_y;$/;"	m	struct:nk_panel
ogAlloc_arena_alignForward	src/og_allocators.h	/^ogAlloc_arena_alignForward(uintptr ptr,$/;"	f
ogAlloc_arena_alloc	src/og_allocators.h	/^ogAlloc_arena_alloc(Arena* arena,$/;"	f
ogAlloc_arena_allocAlign	src/og_allocators.h	/^ogAlloc_arena_allocAlign(Arena* arena,$/;"	f
ogAlloc_arena_free	src/og_allocators.h	/^ogAlloc_arena_free(Arena* arena) {$/;"	f
ogAlloc_arena_initialize	src/og_allocators.h	/^ogAlloc_arena_initialize(Arena* arena,$/;"	f
ogAlloc_arena_resize	src/og_allocators.h	/^ogAlloc_arena_resize(Arena* arena,$/;"	f
ogAlloc_arena_resizeAlign	src/og_allocators.h	/^ogAlloc_arena_resizeAlign(Arena* arena,$/;"	f
old	include/nuklear.h	/^    unsigned int old;$/;"	m	struct:nk_edit_state
old	include/nuklear.h	/^    unsigned int old;$/;"	m	struct:nk_property_state
operatinSystemFromContext	src/utils.h	/^operatinSystemFromContext(void) {$/;"	f
operatingSystem_String	src/utils.h	/^global char operatingSystem_String[3][8] = {$/;"	v
option	include/nuklear.h	/^    struct nk_style_toggle option;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_toggle
overlay	include/nuklear.h	/^    struct nk_command_buffer overlay;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_command_buffer
oversample_h	include/nuklear.h	/^    unsigned char oversample_v, oversample_h;$/;"	m	struct:nk_font_config
oversample_v	include/nuklear.h	/^    unsigned char oversample_v, oversample_h;$/;"	m	struct:nk_font_config
p	include/nuklear.h	/^    struct nk_font_config *p;$/;"	m	struct:nk_font_config	typeref:struct:nk_font_config::nk_font_config
pack_info	include/nuklear.h	/^    void *pack_info;$/;"	m	struct:nk_tt_pack_context
pack_info	include/stb_truetype.h	/^    void *pack_info;$/;"	m	struct:stbtt_pack_context
packed_chars	include/nuklear.h	/^    struct nk_tt_packedchar *packed_chars;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_tt_packedchar
padding	include/nuklear.h	/^    int   padding;$/;"	m	struct:nk_tt_pack_context
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_chart::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_progress	typeref:struct:nk_style_progress::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_property	typeref:struct:nk_style_property::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_scrollbar	typeref:struct:nk_style_scrollbar::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_text	typeref:struct:nk_style_text::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_vec2
padding	include/nuklear.h	/^    struct nk_vec2 padding;$/;"	m	struct:nk_text	typeref:struct:nk_text::nk_vec2
padding	include/nuklear.h	/^    unsigned char padding[3];$/;"	m	struct:nk_font_config
padding	include/nuklear.h	/^    unsigned char type,padding;$/;"	m	struct:nk_tt_vertex
padding	include/stb_truetype.h	/^    int   padding;$/;"	m	struct:stbtt_pack_context
padding	include/stb_truetype.h	/^    unsigned char type,padding;$/;"	m	struct:__anon20
padding1	include/nuklear.h	/^    unsigned char padding1;$/;"	m	struct:nk_text_edit
page_count	include/nuklear.h	/^    unsigned int page_count;$/;"	m	struct:nk_pool
pages	include/nuklear.h	/^    struct nk_page *pages;$/;"	m	struct:nk_pool	typeref:struct:nk_pool::nk_page
pan	include/nuklear.h	/^    struct nk_panel pan;$/;"	m	union:nk_page_data	typeref:struct:nk_page_data::nk_panel
parent	include/nuklear.h	/^    nk_size parent;$/;"	m	struct:nk_popup_buffer
parent	include/nuklear.h	/^    struct nk_panel *parent;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_panel
parent	include/nuklear.h	/^    struct nk_window *parent;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_window
paste	include/nuklear.h	/^    nk_plugin_paste paste;$/;"	m	struct:nk_clipboard
path_count	include/nuklear.h	/^    unsigned int path_count;$/;"	m	struct:nk_draw_list
path_offset	include/nuklear.h	/^    unsigned int path_offset;$/;"	m	struct:nk_draw_list
permanent	include/nuklear.h	/^    struct nk_allocator permanent;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_allocator
pi_f32	src/utils.h	/^global f32 pi_f32 = 3.14159265359f;$/;"	v
pi_f64	src/utils.h	/^global f64 pi_f64 = 3.14159265359;$/;"	v
pixel	include/nuklear.h	/^    void *pixel;$/;"	m	struct:nk_font_atlas
pixel_snap	include/nuklear.h	/^    unsigned char pixel_snap;$/;"	m	struct:nk_font_config
pixels	include/nuklear.h	/^    unsigned char *pixels;$/;"	m	struct:nk_tt_pack_context
pixels	include/nuklear.h	/^   unsigned char *pixels;$/;"	m	struct:nk_tt__bitmap
pixels	include/stb_truetype.h	/^    unsigned char *pixels;$/;"	m	struct:__anon21
pixels	include/stb_truetype.h	/^    unsigned char *pixels;$/;"	m	struct:stbtt_pack_context
point_count	include/nuklear.h	/^    unsigned short point_count;$/;"	m	struct:nk_command_polygon
point_count	include/nuklear.h	/^    unsigned short point_count;$/;"	m	struct:nk_command_polygon_filled
point_count	include/nuklear.h	/^    unsigned short point_count;$/;"	m	struct:nk_command_polyline
points	include/nuklear.h	/^    struct nk_vec2i points[1];$/;"	m	struct:nk_command_polygon	typeref:struct:nk_command_polygon::nk_vec2i
points	include/nuklear.h	/^    struct nk_vec2i points[1];$/;"	m	struct:nk_command_polygon_filled	typeref:struct:nk_command_polygon_filled::nk_vec2i
points	include/nuklear.h	/^    struct nk_vec2i points[1];$/;"	m	struct:nk_command_polyline	typeref:struct:nk_command_polyline::nk_vec2i
pool	include/nuklear.h	/^    struct nk_allocator pool;$/;"	m	struct:nk_buffer	typeref:struct:nk_buffer::nk_allocator
pool	include/nuklear.h	/^    struct nk_pool pool;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_pool
popup	include/nuklear.h	/^    struct nk_popup_state popup;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_popup_state
popup_border	include/nuklear.h	/^    float popup_border;$/;"	m	struct:nk_style_window
popup_border_color	include/nuklear.h	/^    struct nk_color popup_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
popup_padding	include/nuklear.h	/^    struct nk_vec2 popup_padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
pos	include/nuklear.h	/^    struct nk_vec2 pos;$/;"	m	struct:nk_mouse	typeref:struct:nk_mouse::nk_vec2
preferred_x	include/nuklear.h	/^    float preferred_x;$/;"	m	struct:nk_text_edit
pressed	include/nuklear.h	/^    struct nk_style_item pressed;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
pressed_active	include/nuklear.h	/^    struct nk_style_item pressed_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_style_item
prev	include/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_edit_state
prev	include/nuklear.h	/^    int active, prev;$/;"	m	struct:nk_property_state
prev	include/nuklear.h	/^    struct nk_page_element *prev;$/;"	m	struct:nk_page_element	typeref:struct:nk_page_element::nk_page_element
prev	include/nuklear.h	/^    struct nk_table *next, *prev;$/;"	m	struct:nk_table	typeref:struct:nk_table::
prev	include/nuklear.h	/^    struct nk_vec2 prev;$/;"	m	struct:nk_mouse	typeref:struct:nk_mouse::nk_vec2
prev	include/nuklear.h	/^    struct nk_window *prev;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_window
prev_first	include/nuklear.h	/^   int prev_first;  \/*_ first char of previous row *\/$/;"	m	struct:nk_text_find
prev_link	include/nuklear.h	/^    struct nk_rp_node **prev_link;$/;"	m	struct:nk_rp__findresult	typeref:struct:nk_rp__findresult::nk_rp_node
progress	include/nuklear.h	/^    struct nk_style_progress progress;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_progress
property	include/nuklear.h	/^    struct nk_property_state property;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_property_state
property	include/nuklear.h	/^    struct nk_style_property property;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_property
ptr	include/nuklear.h	/^struct nk_memory {void *ptr;nk_size size;};$/;"	m	struct:nk_memory
ptr	include/nuklear.h	/^typedef union {void *ptr; int id;} nk_handle;$/;"	m	union:__anon2
pvertices	include/stb_truetype.h	/^    stbtt_vertex *pvertices;$/;"	m	struct:__anon28
query	include/nuklear.h	/^    nk_query_font_glyph_f query;$/;"	m	struct:nk_user_font
r	include/nuklear.h	/^    unsigned short r;$/;"	m	struct:nk_command_arc
r	include/nuklear.h	/^    unsigned short r;$/;"	m	struct:nk_command_arc_filled
r	include/nuklear.h	/^struct nk_color {nk_byte r,g,b,a;};$/;"	m	struct:nk_color
r	include/nuklear.h	/^struct nk_colorf {float r,g,b,a;};$/;"	m	struct:nk_colorf
range	include/nuklear.h	/^    const nk_rune *range;$/;"	m	struct:nk_font_config
range	include/nuklear.h	/^    float min, max, range;$/;"	m	struct:nk_chart_slot
range_count	include/nuklear.h	/^    nk_rune range_count;$/;"	m	struct:nk_font_bake_data
ranges	include/nuklear.h	/^    const nk_rune *ranges;$/;"	m	struct:nk_baked_font
ranges	include/nuklear.h	/^    struct nk_tt_pack_range *ranges;$/;"	m	struct:nk_font_bake_data	typeref:struct:nk_font_bake_data::nk_tt_pack_range
ranges	include/nuklear.h	/^    struct nk_tt_pack_range *ranges;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_tt_pack_range
ratio	include/nuklear.h	/^    const float *ratio;$/;"	m	struct:nk_row_layout
readOnly	src/utils.h	/^#define readOnly /;"	d
rects	include/nuklear.h	/^    struct nk_rp_rect *rects;$/;"	m	struct:nk_font_bake_data	typeref:struct:nk_font_bake_data::nk_rp_rect
rects	include/nuklear.h	/^    struct nk_rp_rect *rects;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_rp_rect
redo_char_point	include/nuklear.h	/^   short redo_char_point;$/;"	m	struct:nk_text_undo_state
redo_point	include/nuklear.h	/^   short redo_point;$/;"	m	struct:nk_text_undo_state
region	include/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image
rgba_to_hex	src/utils.h	/^rgba_to_hex(u32 red, u32 green, u32 blue, u32 alpha) {$/;"	f
right	include/nuklear.h	/^    struct nk_color right;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command_rect_multi_color::nk_color
round_floatToI32	src/utils.h	/^round_floatToI32(f32 number) {$/;"	f
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_button
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_chart
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_combo
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_edit
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_progress
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_property
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_scrollbar
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_selectable
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_slider
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_tab
rounding	include/nuklear.h	/^    float rounding;$/;"	m	struct:nk_style_window
rounding	include/nuklear.h	/^    unsigned short rounding;$/;"	m	struct:nk_command_rect
rounding	include/nuklear.h	/^    unsigned short rounding;$/;"	m	struct:nk_command_rect_filled
rounding_cursor	include/nuklear.h	/^    float rounding_cursor;$/;"	m	struct:nk_style_scrollbar
row	include/nuklear.h	/^    struct nk_row_layout row;$/;"	m	struct:nk_panel	typeref:struct:nk_panel::nk_row_layout
row_padding	include/nuklear.h	/^    float row_padding;$/;"	m	struct:nk_style_edit
running	src/sdl2_main.c	/^global b32 running = true;$/;"	v
s0	include/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad
s0	include/stb_truetype.h	/^    float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon16
s1	include/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad
s1	include/stb_truetype.h	/^    float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon16
scale	include/nuklear.h	/^    float scale;$/;"	m	struct:nk_font
scaler	include/nuklear.h	/^    struct nk_style_item scaler;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_style_item
scroll_delta	include/nuklear.h	/^    struct nk_vec2 scroll_delta;$/;"	m	struct:nk_mouse	typeref:struct:nk_mouse::nk_vec2
scroll_pointer	include/nuklear.h	/^    nk_uint *scroll_pointer;$/;"	m	struct:nk_list_view
scroll_value	include/nuklear.h	/^    nk_uint scroll_value;$/;"	m	struct:nk_list_view
scrollbar	include/nuklear.h	/^    struct nk_scroll scrollbar;$/;"	m	struct:nk_edit_state	typeref:struct:nk_edit_state::nk_scroll
scrollbar	include/nuklear.h	/^    struct nk_scroll scrollbar;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_scroll
scrollbar	include/nuklear.h	/^    struct nk_style_scrollbar scrollbar;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_style_scrollbar
scrollbar	include/nuklear.h	/^    struct nk_vec2 scrollbar;$/;"	m	struct:nk_text_edit	typeref:struct:nk_text_edit::nk_vec2
scrollbar_hiding_timer	include/nuklear.h	/^    float scrollbar_hiding_timer;$/;"	m	struct:nk_window
scrollbar_size	include/nuklear.h	/^    struct nk_vec2 scrollbar_size;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_vec2
scrollbar_size	include/nuklear.h	/^    struct nk_vec2 scrollbar_size;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
scrolled	include/nuklear.h	/^    unsigned int scrolled;$/;"	m	struct:nk_window
scrollh	include/nuklear.h	/^    struct nk_style_scrollbar scrollh;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_scrollbar
scrollv	include/nuklear.h	/^    struct nk_style_scrollbar scrollv;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_scrollbar
sdl2_processInput	src/sdl2_main.c	/^sdl2_processInput() {$/;"	f
sel_end	include/nuklear.h	/^    int sel_end;$/;"	m	struct:nk_edit_state
sel_start	include/nuklear.h	/^    int sel_start;$/;"	m	struct:nk_edit_state
select_end	include/nuklear.h	/^    int select_end;$/;"	m	struct:nk_property_state
select_end	include/nuklear.h	/^    int select_end;$/;"	m	struct:nk_text_edit
select_start	include/nuklear.h	/^    int select_start;$/;"	m	struct:nk_property_state
select_start	include/nuklear.h	/^    int select_start;$/;"	m	struct:nk_text_edit
selectable	include/nuklear.h	/^    struct nk_style_selectable selectable;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_selectable
selected_color	include/nuklear.h	/^    struct nk_color selected_color;$/;"	m	struct:nk_style_chart	typeref:struct:nk_style_chart::nk_color
selected_hover	include/nuklear.h	/^    struct nk_color selected_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
selected_normal	include/nuklear.h	/^    struct nk_color selected_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
selected_text_hover	include/nuklear.h	/^    struct nk_color selected_text_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
selected_text_normal	include/nuklear.h	/^    struct nk_color selected_text_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
seq	include/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_context
seq	include/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_edit_state
seq	include/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_property_state
seq	include/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_table
seq	include/nuklear.h	/^    unsigned int seq;$/;"	m	struct:nk_window
shape_AA	include/nuklear.h	/^    enum nk_anti_aliasing shape_AA; \/* shape anti-aliasing flag can be turned off if you are tight on memory *\/$/;"	m	struct:nk_convert_config	typeref:enum:nk_convert_config::nk_anti_aliasing
shape_AA	include/nuklear.h	/^    enum nk_anti_aliasing shape_AA;$/;"	m	struct:nk_draw_list	typeref:enum:nk_draw_list::nk_anti_aliasing
show_buttons	include/nuklear.h	/^    int show_buttons;$/;"	m	struct:nk_style_scrollbar
show_buttons	include/nuklear.h	/^    int show_buttons;$/;"	m	struct:nk_style_slider
single_line	include/nuklear.h	/^    unsigned char single_line;$/;"	m	struct:nk_edit_state
single_line	include/nuklear.h	/^    unsigned char single_line;$/;"	m	struct:nk_text_edit
size	include/nuklear.h	/^    float size;$/;"	m	struct:nk_font_config
size	include/nuklear.h	/^    nk_size size;$/;"	m	struct:nk_buffer
size	include/nuklear.h	/^    nk_size size;$/;"	m	struct:nk_memory_status
size	include/nuklear.h	/^    nk_size size;$/;"	m	struct:nk_pool
size	include/nuklear.h	/^    unsigned int size;$/;"	m	struct:nk_page
size	include/nuklear.h	/^    unsigned int size;$/;"	m	struct:nk_table
size	include/nuklear.h	/^struct nk_cursor {struct nk_image img; struct nk_vec2 size, offset;};$/;"	m	struct:nk_cursor	typeref:struct:nk_cursor::nk_vec2
size	include/nuklear.h	/^struct nk_memory {void *ptr;nk_size size;};$/;"	m	struct:nk_memory
size	include/stb_truetype.h	/^    int size;$/;"	m	struct:__anon14
sizeof	include/nuklear.h	/^NK_STATIC_ASSERT(sizeof(nk_ptr) == sizeof(void*));$/;"	v
skip_missing	include/stb_truetype.h	/^    int   skip_missing;$/;"	m	struct:stbtt_pack_context
slider	include/nuklear.h	/^    struct nk_style_slider slider;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_slider
slot	include/nuklear.h	/^    int slot;$/;"	m	struct:nk_chart
slots	include/nuklear.h	/^    struct nk_chart_slot slots[NK_CHART_MAX_SLOT];$/;"	m	struct:nk_chart	typeref:struct:nk_chart::nk_chart_slot
spacing	include/nuklear.h	/^    float spacing;$/;"	m	struct:nk_style_toggle
spacing	include/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_font_config	typeref:struct:nk_font_config::nk_vec2
spacing	include/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_vec2
spacing	include/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_slider	typeref:struct:nk_style_slider::nk_vec2
spacing	include/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_vec2
spacing	include/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
spacing	include/nuklear.h	/^    struct nk_vec2 spacing;$/;"	m	struct:nk_style_window_header	typeref:struct:nk_style_window_header::nk_vec2
spc	include/nuklear.h	/^    struct nk_tt_pack_context spc;$/;"	m	struct:nk_font_baker	typeref:struct:nk_font_baker::nk_tt_pack_context
stacks	include/nuklear.h	/^    struct nk_configuration_stacks stacks;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_configuration_stacks
started	include/stb_truetype.h	/^    int started;$/;"	m	struct:__anon28
state	include/nuklear.h	/^    int state;$/;"	m	struct:nk_property_state
stbrp_context	include/stb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anon30
stbrp_coord	include/stb_truetype.h	/^typedef int stbrp_coord;$/;"	t
stbrp_init_target	include/stb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nodes)$/;"	f
stbrp_node	include/stb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anon31
stbrp_pack_rects	include/stb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f
stbrp_rect	include/stb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	include/stb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbtt_BakeFontBitmap	include/stb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f
stbtt_BakeFontBitmap_internal	include/stb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (use offset=0 for plain .ttf)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian	include/stb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int len2)$/;"	f
stbtt_CompareUTF8toUTF16_bigendian_internal	include/stb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2)$/;"	f
stbtt_FindGlyphIndex	include/stb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f
stbtt_FindMatchingFont	include/stb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f
stbtt_FindMatchingFont_internal	include/stb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbtt_int32 flags)$/;"	f
stbtt_FindSVGDoc	include/stb_truetype.h	/^STBTT_DEF stbtt_uint8 *stbtt_FindSVGDoc(const stbtt_fontinfo *info, int gl)$/;"	f
stbtt_FlattenCurves	include/stb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_flatness, int **contour_lengths, int *num_contours, void *userdata)$/;"	f
stbtt_FreeBitmap	include/stb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeSDF	include/stb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f
stbtt_FreeShape	include/stb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f
stbtt_GetBakedQuad	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int opengl_fillrule)$/;"	f
stbtt_GetCodepointBitmap	include/stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBitmapBox	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapBoxSubpixel	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, float scale_x, float scale_y, float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetCodepointBitmapSubpixel	include/stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointBox	include/stb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetCodepointHMetrics	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetCodepointKernAdvance	include/stb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f
stbtt_GetCodepointSDF	include/stb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int codepoint, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetCodepointSVG	include/stb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointSVG(const stbtt_fontinfo *info, int unicode_codepoint, const char **svg)$/;"	f
stbtt_GetCodepointShape	include/stb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_vertex **vertices)$/;"	f
stbtt_GetFontBoundingBox	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetFontNameString	include/stb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platformID, int encodingID, int languageID, int nameID)$/;"	f
stbtt_GetFontOffsetForIndex	include/stb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f
stbtt_GetFontOffsetForIndex_internal	include/stb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f
stbtt_GetFontVMetrics	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int *lineGap)$/;"	f
stbtt_GetFontVMetricsOS2	include/stb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDescent, int *typoLineGap)$/;"	f
stbtt_GetGlyphBitmap	include/stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float scale_y, int glyph, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphBitmapBox	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapBoxSubpixel	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scale_x, float scale_y,float shift_x, float shift_y, int *ix0, int *iy0, int *ix1, int *iy1)$/;"	f
stbtt_GetGlyphBitmapSubpixel	include/stb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info,$/;"	f
stbtt_GetGlyphBox	include/stb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt_GetGlyphHMetrics	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceWidth, int *leftSideBearing)$/;"	f
stbtt_GetGlyphKernAdvance	include/stb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f
stbtt_GetGlyphSDF	include/stb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, int padding, unsigned char onedge_value, float pixel_dist_scale, int *width, int *height, int *xoff, int *yoff)$/;"	f
stbtt_GetGlyphSVG	include/stb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphSVG(const stbtt_fontinfo *info, int gl, const char **svg)$/;"	f
stbtt_GetGlyphShape	include/stb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt_GetKerningTable	include/stb_truetype.h	/^STBTT_DEF int stbtt_GetKerningTable(const stbtt_fontinfo *info, stbtt_kerningentry* table, int table_length)$/;"	f
stbtt_GetKerningTableLength	include/stb_truetype.h	/^STBTT_DEF int  stbtt_GetKerningTableLength(const stbtt_fontinfo *info)$/;"	f
stbtt_GetNumberOfFonts	include/stb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f
stbtt_GetNumberOfFonts_internal	include/stb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f
stbtt_GetPackedQuad	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_index, float *xpos, float *ypos, stbtt_aligned_quad *q, int align_to_integer)$/;"	f
stbtt_GetScaledFontVMetrics	include/stb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size, float *ascent, float *descent, float *lineGap)$/;"	f
stbtt_InitFont	include/stb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f
stbtt_InitFont_internal	include/stb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f
stbtt_IsGlyphEmpty	include/stb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt_MakeCodepointBitmap	include/stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixel	include/stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int codepoint)$/;"	f
stbtt_MakeCodepointBitmapSubpixelPrefilter	include/stb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int oversample_x, int oversample_y, float *sub_x, float *sub_y, int codepoint)$/;"	f
stbtt_MakeGlyphBitmap	include/stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixel	include/stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int glyph)$/;"	f
stbtt_MakeGlyphBitmapSubpixelPrefilter	include/stb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char *output, int out_w, int out_h, int out_stride, float scale_x, float scale_y, float shift_x, float shift_y, int prefilter_x, int prefilter_y, float *sub_x, float *sub_y, int glyph)$/;"	f
stbtt_PackBegin	include/stb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, int stride_in_bytes, int padding, void *alloc_context)$/;"	f
stbtt_PackEnd	include/stb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f
stbtt_PackFontRange	include/stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, float font_size,$/;"	f
stbtt_PackFontRanges	include/stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int font_index, stbtt_pack_range *ranges, int num_ranges)$/;"	f
stbtt_PackFontRangesGatherRects	include/stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackFontRangesPackRects	include/stb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num_rects)$/;"	f
stbtt_PackFontRangesRenderIntoRects	include/stb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo *info, stbtt_pack_range *ranges, int num_ranges, stbrp_rect *rects)$/;"	f
stbtt_PackSetOversampling	include/stb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, unsigned int v_oversample)$/;"	f
stbtt_PackSetSkipMissingCodepoints	include/stb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f
stbtt_Rasterize	include/stb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *vertices, int num_verts, float scale_x, float scale_y, float shift_x, float shift_y, int x_off, int y_off, int invert, void *userdata)$/;"	f
stbtt_ScaleForMappingEmToPixels	include/stb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f
stbtt_ScaleForPixelHeight	include/stb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f
stbtt__CompareUTF8toUTF16_bigendian_prefix	include/stb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1, stbtt_uint8 *s2, stbtt_int32 len2)$/;"	f
stbtt__GetCoverageIndex	include/stb_truetype.h	/^static stbtt_int32 stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f
stbtt__GetGlyfOffset	include/stb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__GetGlyphClass	include/stb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f
stbtt__GetGlyphGPOSInfoAdvance	include/stb_truetype.h	/^static stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt__GetGlyphInfoT2	include/stb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, int *x1, int *y1)$/;"	f
stbtt__GetGlyphKernInfoAdvance	include/stb_truetype.h	/^static int stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f
stbtt__GetGlyphShapeT2	include/stb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt__GetGlyphShapeTT	include/stb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pvertices)$/;"	f
stbtt__active_edge	include/stb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	include/stb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	include/stb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f
stbtt__bitmap	include/stb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anon21
stbtt__buf	include/stb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anon14
stbtt__buf_get	include/stb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f
stbtt__buf_get16	include/stb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	include/stb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	include/stb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f
stbtt__buf_peek8	include/stb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f
stbtt__buf_range	include/stb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f
stbtt__buf_seek	include/stb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f
stbtt__buf_skip	include/stb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f
stbtt__cff_get_index	include/stb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f
stbtt__cff_index_count	include/stb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f
stbtt__cff_index_get	include/stb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f
stbtt__cff_int	include/stb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f
stbtt__cff_skip_operand	include/stb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f
stbtt__check_size16	include/stb_truetype.h	/^typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t
stbtt__check_size32	include/stb_truetype.h	/^typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t
stbtt__cid_get_glyph_subrs	include/stb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f
stbtt__close_shape	include/stb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_off,$/;"	f
stbtt__compute_crossings_x	include/stb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f
stbtt__csctx	include/stb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anon28
stbtt__csctx_close_shape	include/stb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f
stbtt__csctx_rccurve_to	include/stb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy2, float dx3, float dy3)$/;"	f
stbtt__csctx_rline_to	include/stb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f
stbtt__csctx_rmove_to	include/stb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f
stbtt__csctx_v	include/stb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy, stbtt_int32 cx1, stbtt_int32 cy1)$/;"	f
stbtt__cuberoot	include/stb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f
stbtt__dict_get	include/stb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f
stbtt__dict_get_ints	include/stb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f
stbtt__edge	include/stb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	include/stb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	include/stb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, int max_weight)$/;"	f
stbtt__fill_active_edges_new	include/stb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__active_edge *e, float y_top)$/;"	f
stbtt__find_table	include/stb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag)$/;"	f
stbtt__get_subr	include/stb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f
stbtt__get_subrs	include/stb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f
stbtt__get_svg	include/stb_truetype.h	/^static int stbtt__get_svg(stbtt_fontinfo *info)$/;"	f
stbtt__h_prefilter	include/stb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt__handle_clipped_edge	include/stb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, float y0, float x1, float y1)$/;"	f
stbtt__hheap	include/stb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	include/stb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	include/stb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f
stbtt__hheap_chunk	include/stb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	include/stb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	include/stb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f
stbtt__hheap_free	include/stb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f
stbtt__isfont	include/stb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f
stbtt__matches	include/stb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 flags)$/;"	f
stbtt__matchpair	include/stb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nlen, stbtt_int32 target_id, stbtt_int32 next_id)$/;"	f
stbtt__new_active	include/stb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float start_point, void *userdata)$/;"	f
stbtt__new_buf	include/stb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f
stbtt__oversample_shift	include/stb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f
stbtt__point	include/stb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anon29
stbtt__position_trapezoid_area	include/stb_truetype.h	/^static float stbtt__position_trapezoid_area(float height, float tx0, float tx1, float bx0, float bx1)$/;"	f
stbtt__rasterize	include/stb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings, float scale_x, float scale_y, float shift_x, float shift_y, int off_x, int off_y, int invert, void *userdata)$/;"	f
stbtt__rasterize_sorted_edges	include/stb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsubsample, int off_x, int off_y, void *userdata)$/;"	f
stbtt__ray_intersect_bezier	include/stb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], float q2[2], float hits[2][2])$/;"	f
stbtt__run_charstring	include/stb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f
stbtt__sized_trapezoid_area	include/stb_truetype.h	/^static float stbtt__sized_trapezoid_area(float height, float top_width, float bottom_width)$/;"	f
stbtt__sized_triangle_area	include/stb_truetype.h	/^static float stbtt__sized_triangle_area(float height, float width)$/;"	f
stbtt__solve_cubic	include/stb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f
stbtt__sort_edges	include/stb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_ins_sort	include/stb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f
stbtt__sort_edges_quicksort	include/stb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f
stbtt__tesselate_cubic	include/stb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float x3, float y3, float objspace_flatness_squared, int n)$/;"	f
stbtt__tesselate_curve	include/stb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, float x1, float y1, float x2, float y2, float objspace_flatness_squared, int n)$/;"	f
stbtt__test_oversample_pow2	include/stb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ? 1 : -1];$/;"	t
stbtt__track_vertex	include/stb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f
stbtt__v_prefilter	include/stb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigned int kernel_width)$/;"	f
stbtt_aligned_quad	include/stb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anon16
stbtt_bakedchar	include/stb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anon15
stbtt_fontinfo	include/stb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	include/stb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	include/stb_truetype.h	/^typedef signed   short  stbtt_int16;$/;"	t
stbtt_int32	include/stb_truetype.h	/^typedef signed   int    stbtt_int32;$/;"	t
stbtt_int8	include/stb_truetype.h	/^typedef signed   char   stbtt_int8;$/;"	t
stbtt_kerningentry	include/stb_truetype.h	/^typedef struct stbtt_kerningentry$/;"	s
stbtt_kerningentry	include/stb_truetype.h	/^} stbtt_kerningentry;$/;"	t	typeref:struct:stbtt_kerningentry
stbtt_pack_context	include/stb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	include/stb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	include/stb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anon18
stbtt_packedchar	include/stb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anon17
stbtt_setvertex	include/stb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbtt_int32 cx, stbtt_int32 cy)$/;"	f
stbtt_tag	include/stb_truetype.h	/^#define stbtt_tag(/;"	d
stbtt_tag4	include/stb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	include/stb_truetype.h	/^typedef unsigned short  stbtt_uint16;$/;"	t
stbtt_uint32	include/stb_truetype.h	/^typedef unsigned int    stbtt_uint32;$/;"	t
stbtt_uint8	include/stb_truetype.h	/^typedef unsigned char   stbtt_uint8;$/;"	t
stbtt_vertex	include/stb_truetype.h	/^} stbtt_vertex;$/;"	t	typeref:struct:__anon20
stbtt_vertex_type	include/stb_truetype.h	/^#define stbtt_vertex_type /;"	d
step	include/nuklear.h	/^    union nk_property step;$/;"	m	struct:nk_property_variant	typeref:union:nk_property_variant::nk_property
str	src/utils.h	/^    char* str;$/;"	m	struct:Str8
str8_chop	src/utils.h	/^str8_chop(Str8 str, memoryIndex amount) {$/;"	f
str8_init	src/utils.h	/^str8_init(char* str, memoryIndex size) {$/;"	f
str8_postfix	src/utils.h	/^str8_postfix(Str8 str, memoryIndex size) {$/;"	f
str8_prefix	src/utils.h	/^str8_prefix(Str8 str, memoryIndex size) {$/;"	f
str8_skip	src/utils.h	/^str8_skip(Str8 str, memoryIndex amount) {$/;"	f
stride	include/nuklear.h	/^   int w,h,stride;$/;"	m	struct:nk_tt__bitmap
stride	include/stb_truetype.h	/^    int w,h,stride;$/;"	m	struct:__anon21
stride_in_bytes	include/nuklear.h	/^    int   stride_in_bytes;$/;"	m	struct:nk_tt_pack_context
stride_in_bytes	include/stb_truetype.h	/^    int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context
string	include/nuklear.h	/^    char string[1];$/;"	m	struct:nk_command_text
string	include/nuklear.h	/^    struct nk_str string;$/;"	m	struct:nk_text_edit	typeref:struct:nk_text_edit::nk_str
string	src/utils.h	/^    Str8 string;$/;"	m	struct:Str8Node
stringFromArchitecure	src/utils.h	/^stringFromArchitecure(Architecture arch) {$/;"	f
stringFromDayOfWeek	src/utils.h	/^stringFromDayOfWeek(DayOfWeek dayOfWeek) {$/;"	f
stringFromMonth	src/utils.h	/^stringFromMonth(Month month) {$/;"	f
stringFromOperatingSystem	src/utils.h	/^stringFromOperatingSystem(OperatingSystem os) {$/;"	f
stringLength	src/utils.h	/^stringLength(char* string) {$/;"	f
style	include/nuklear.h	/^    struct nk_style style;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_style
style_items	include/nuklear.h	/^    struct nk_config_stack_style_item style_items;$/;"	m	struct:nk_configuration_stacks	typeref:struct:nk_configuration_stacks::nk_config_stack_style_item
subrs	include/stb_truetype.h	/^    stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo
svg	include/stb_truetype.h	/^    int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo
sy	include/nuklear.h	/^    float sy;$/;"	m	struct:nk_tt__active_edge
sy	include/stb_truetype.h	/^    float sy;$/;"	m	struct:stbtt__active_edge
sym_active	include/nuklear.h	/^    enum nk_symbol_type sym_active;$/;"	m	struct:nk_style_combo	typeref:enum:nk_style_combo::nk_symbol_type
sym_hover	include/nuklear.h	/^    enum nk_symbol_type sym_hover;$/;"	m	struct:nk_style_combo	typeref:enum:nk_style_combo::nk_symbol_type
sym_left	include/nuklear.h	/^    enum nk_symbol_type sym_left;$/;"	m	struct:nk_style_property	typeref:enum:nk_style_property::nk_symbol_type
sym_maximize	include/nuklear.h	/^    enum nk_symbol_type sym_maximize;$/;"	m	struct:nk_style_tab	typeref:enum:nk_style_tab::nk_symbol_type
sym_minimize	include/nuklear.h	/^    enum nk_symbol_type sym_minimize;$/;"	m	struct:nk_style_tab	typeref:enum:nk_style_tab::nk_symbol_type
sym_normal	include/nuklear.h	/^    enum nk_symbol_type sym_normal;$/;"	m	struct:nk_style_combo	typeref:enum:nk_style_combo::nk_symbol_type
sym_right	include/nuklear.h	/^    enum nk_symbol_type sym_right;$/;"	m	struct:nk_style_property	typeref:enum:nk_style_property::nk_symbol_type
symbol_active	include/nuklear.h	/^    struct nk_color symbol_active;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
symbol_hover	include/nuklear.h	/^    struct nk_color symbol_hover;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
symbol_normal	include/nuklear.h	/^    struct nk_color symbol_normal;$/;"	m	struct:nk_style_combo	typeref:struct:nk_style_combo::nk_color
t0	include/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad
t0	include/stb_truetype.h	/^    float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon16
t1	include/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad
t1	include/stb_truetype.h	/^    float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon16
tab	include/nuklear.h	/^    struct nk_style_tab tab;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_tab
tab_maximize_button	include/nuklear.h	/^    struct nk_style_button tab_maximize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_style_button
tab_minimize_button	include/nuklear.h	/^    struct nk_style_button tab_minimize_button;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_style_button
table_count	include/nuklear.h	/^    unsigned int table_count;$/;"	m	struct:nk_window
tables	include/nuklear.h	/^    struct nk_table *tables;$/;"	m	struct:nk_window	typeref:struct:nk_window::nk_table
tau_f32	src/utils.h	/^global f32 tau_f32 = 6.28318530718f;$/;"	v
tau_f64	src/utils.h	/^global f64 tau_f64 = 6.28318530718;$/;"	v
tbl	include/nuklear.h	/^    struct nk_table tbl;$/;"	m	union:nk_page_data	typeref:struct:nk_page_data::nk_table
temp_bitmap	include/stb_truetype.h	/^unsigned char temp_bitmap[512*512];$/;"	v
templates	include/nuklear.h	/^    float templates[NK_MAX_LAYOUT_ROW_TEMPLATE_COLUMNS];$/;"	m	struct:nk_row_layout
temporary	include/nuklear.h	/^    struct nk_allocator temporary;$/;"	m	struct:nk_font_atlas	typeref:struct:nk_font_atlas::nk_allocator
tex_height	include/nuklear.h	/^    int tex_height;$/;"	m	struct:nk_font_atlas
tex_width	include/nuklear.h	/^    int tex_width;$/;"	m	struct:nk_font_atlas
text	include/nuklear.h	/^    char text[NK_INPUT_MAX];$/;"	m	struct:nk_keyboard
text	include/nuklear.h	/^    struct nk_color text;$/;"	m	struct:nk_style_tab	typeref:struct:nk_style_tab::nk_color
text	include/nuklear.h	/^    struct nk_color text;$/;"	m	struct:nk_text	typeref:struct:nk_text::nk_color
text	include/nuklear.h	/^    struct nk_style_text text;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_text
text_active	include/nuklear.h	/^    struct nk_color text_active;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_color
text_active	include/nuklear.h	/^    struct nk_color text_active;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
text_active	include/nuklear.h	/^    struct nk_color text_active;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_color
text_alignment	include/nuklear.h	/^    nk_flags text_alignment;$/;"	m	struct:nk_style_button
text_alignment	include/nuklear.h	/^    nk_flags text_alignment;$/;"	m	struct:nk_style_selectable
text_alignment	include/nuklear.h	/^    nk_flags text_alignment;$/;"	m	struct:nk_style_toggle
text_background	include/nuklear.h	/^    struct nk_color text_background;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_color
text_background	include/nuklear.h	/^    struct nk_color text_background;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_background	include/nuklear.h	/^    struct nk_color text_background;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_color
text_edit	include/nuklear.h	/^    struct nk_text_edit text_edit;$/;"	m	struct:nk_context	typeref:struct:nk_context::nk_text_edit
text_hover	include/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_color
text_hover	include/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
text_hover	include/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_hover	include/nuklear.h	/^    struct nk_color text_hover;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_color
text_hover_active	include/nuklear.h	/^    struct nk_color text_hover_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_len	include/nuklear.h	/^    int text_len;$/;"	m	struct:nk_keyboard
text_normal	include/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_color
text_normal	include/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_edit	typeref:struct:nk_style_edit::nk_color
text_normal	include/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_normal	include/nuklear.h	/^    struct nk_color text_normal;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_color
text_normal_active	include/nuklear.h	/^    struct nk_color text_normal_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_pressed	include/nuklear.h	/^    struct nk_color text_pressed;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
text_pressed_active	include/nuklear.h	/^    struct nk_color text_pressed_active;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_color
texture	include/nuklear.h	/^    nk_handle texture; \/* texture handle to a texture with a white pixel *\/$/;"	m	struct:nk_draw_null_texture
texture	include/nuklear.h	/^    nk_handle texture;$/;"	m	struct:nk_draw_command
texture	include/nuklear.h	/^    nk_handle texture;$/;"	m	struct:nk_font
texture	include/nuklear.h	/^    nk_handle texture;$/;"	m	struct:nk_user_font
tooltip_border	include/nuklear.h	/^    float tooltip_border;$/;"	m	struct:nk_style_window
tooltip_border_color	include/nuklear.h	/^    struct nk_color tooltip_border_color;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_color
tooltip_padding	include/nuklear.h	/^    struct nk_vec2 tooltip_padding;$/;"	m	struct:nk_style_window	typeref:struct:nk_style_window::nk_vec2
top	include/nuklear.h	/^    struct nk_color top;$/;"	m	struct:nk_command_rect_multi_color	typeref:struct:nk_command_rect_multi_color::nk_color
totalSize	src/utils.h	/^    u64 totalSize;$/;"	m	struct:Str8List
total_height	include/nuklear.h	/^    int total_height;$/;"	m	struct:nk_list_view
touch_padding	include/nuklear.h	/^    struct nk_vec2 touch_padding;$/;"	m	struct:nk_style_button	typeref:struct:nk_style_button::nk_vec2
touch_padding	include/nuklear.h	/^    struct nk_vec2 touch_padding;$/;"	m	struct:nk_style_selectable	typeref:struct:nk_style_selectable::nk_vec2
touch_padding	include/nuklear.h	/^    struct nk_vec2 touch_padding;$/;"	m	struct:nk_style_toggle	typeref:struct:nk_style_toggle::nk_vec2
tree_depth	include/nuklear.h	/^    int tree_depth;$/;"	m	struct:nk_row_layout
true	src/utils.h	/^#define true /;"	d
truncate_floatToI32	src/utils.h	/^truncate_floatToI32(f32 number) {$/;"	f
truncate_safe_i64	src/utils.h	/^truncate_safe_i64(i64 value) {$/;"	f
ttBYTE	include/stb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	include/stb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	include/stb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	include/stb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttSHORT	include/stb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f
ttULONG	include/stb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]; }$/;"	f
ttUSHORT	include/stb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f
ttf_blob	include/nuklear.h	/^    void *ttf_blob;$/;"	m	struct:nk_font_config
ttf_buffer	include/stb_truetype.h	/^char ttf_buffer[1<<25];$/;"	v
ttf_buffer	include/stb_truetype.h	/^unsigned char ttf_buffer[1<<20];$/;"	v
ttf_data_owned_by_atlas	include/nuklear.h	/^    unsigned char ttf_data_owned_by_atlas;$/;"	m	struct:nk_font_config
ttf_size	include/nuklear.h	/^    nk_size ttf_size;$/;"	m	struct:nk_font_config
type	include/nuklear.h	/^    enum nk_allocation_type type;$/;"	m	struct:nk_buffer	typeref:enum:nk_buffer::nk_allocation_type
type	include/nuklear.h	/^    enum nk_allocation_type type;$/;"	m	struct:nk_pool	typeref:enum:nk_pool::nk_allocation_type
type	include/nuklear.h	/^    enum nk_chart_type type;$/;"	m	struct:nk_chart_slot	typeref:enum:nk_chart_slot::nk_chart_type
type	include/nuklear.h	/^    enum nk_command_type type;$/;"	m	struct:nk_command	typeref:enum:nk_command::nk_command_type
type	include/nuklear.h	/^    enum nk_panel_row_layout_type type;$/;"	m	struct:nk_row_layout	typeref:enum:nk_row_layout::nk_panel_row_layout_type
type	include/nuklear.h	/^    enum nk_panel_type type;$/;"	m	struct:nk_panel	typeref:enum:nk_panel::nk_panel_type
type	include/nuklear.h	/^    enum nk_panel_type type;$/;"	m	struct:nk_popup_state	typeref:enum:nk_popup_state::nk_panel_type
type	include/nuklear.h	/^    enum nk_style_item_type type;$/;"	m	struct:nk_style_item	typeref:enum:nk_style_item::nk_style_item_type
type	include/nuklear.h	/^    unsigned char type,padding;$/;"	m	struct:nk_tt_vertex
type	include/nuklear.h	/^    unsigned int type;$/;"	m	struct:nk_memory_status
type	include/stb_truetype.h	/^    unsigned char type,padding;$/;"	m	struct:__anon20
u0	include/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph
u1	include/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph
u16	src/utils.h	/^typedef uint16_t u16;$/;"	t
u16_min	src/utils.h	/^global u16 u16_min = (u16)0xffff;$/;"	v
u32	src/utils.h	/^typedef uint32_t u32;$/;"	t
u32_min	src/utils.h	/^global u32 u32_min = (u32)0xffffffff;$/;"	v
u64	src/utils.h	/^typedef uint64_t u64;$/;"	t
u64_min	src/utils.h	/^global u64 u64_min = (u64)0xffffffffffffffffllu;$/;"	v
u8	src/utils.h	/^typedef uint8_t u8;$/;"	t
u8_min	src/utils.h	/^global u8 u8_min = (u8)0xff;$/;"	v
uint	src/utils.h	/^typedef unsigned int uint;$/;"	t
uintptr	src/utils.h	/^typedef uintptr_t uintptr;$/;"	t
uintptr_t	src/utils.h	/^typedef u64 uintptr_t;$/;"	t
undo	include/nuklear.h	/^    struct nk_text_undo_state undo;$/;"	m	struct:nk_text_edit	typeref:struct:nk_text_edit::nk_text_undo_state
undo_char	include/nuklear.h	/^   nk_rune undo_char[NK_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:nk_text_undo_state
undo_char_point	include/nuklear.h	/^   short undo_char_point;$/;"	m	struct:nk_text_undo_state
undo_point	include/nuklear.h	/^   short undo_point;$/;"	m	struct:nk_text_undo_state
undo_rec	include/nuklear.h	/^   struct nk_text_undo_record undo_rec[NK_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:nk_text_undo_state	typeref:struct:nk_text_undo_state::nk_text_undo_record
ungrab	include/nuklear.h	/^    unsigned char ungrab;$/;"	m	struct:nk_mouse
use_clipping	include/nuklear.h	/^    int use_clipping;$/;"	m	struct:nk_command_buffer
use_pool	include/nuklear.h	/^    int use_pool;$/;"	m	struct:nk_context
user_allocator_context	include/stb_truetype.h	/^    void *user_allocator_context;$/;"	m	struct:stbtt_pack_context
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_allocator
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_clipboard
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_command
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_command_buffer
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_context
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_draw_command
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_draw_list
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_button
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_progress
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_property
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_scrollbar
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_selectable
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_slider
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_style_toggle
userdata	include/nuklear.h	/^    nk_handle userdata;$/;"	m	struct:nk_user_font
userdata	include/stb_truetype.h	/^    void           * userdata;$/;"	m	struct:stbtt_fontinfo
uv	include/nuklear.h	/^    struct nk_vec2 uv; \/* coordinates to a white pixel in the texture  *\/$/;"	m	struct:nk_draw_null_texture	typeref:struct:nk_draw_null_texture::nk_vec2
uv	include/nuklear.h	/^    struct nk_vec2 uv[2];$/;"	m	struct:nk_user_font_glyph	typeref:struct:nk_user_font_glyph::nk_vec2
v0	include/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph
v1	include/nuklear.h	/^    float u0, v0, u1, v1;$/;"	m	struct:nk_font_glyph
v_oversample	include/nuklear.h	/^    unsigned char h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_range
v_oversample	include/nuklear.h	/^    unsigned int   h_oversample, v_oversample;$/;"	m	struct:nk_tt_pack_context
v_oversample	include/stb_truetype.h	/^    unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anon18
v_oversample	include/stb_truetype.h	/^    unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context
value	include/nuklear.h	/^    diff = sizeof(Big) - sizeof(T), value = nk_helper<Big, diff>::value};};$/;"	e	enum:nk_alignof::__anon5
value	include/nuklear.h	/^    union nk_property value;$/;"	m	struct:nk_property_variant	typeref:union:nk_property_variant::nk_property
value	include/nuklear.h	/^template<typename T, int size_diff> struct nk_helper{enum {value = size_diff};};$/;"	e	enum:nk_helper::__anon3
value	include/nuklear.h	/^template<typename T> struct nk_helper<T,0>{enum {value = nk_alignof<T>::value};};$/;"	e	enum:nk_helper::__anon4
values	include/nuklear.h	/^    nk_uint values[NK_VALUE_PAGE_CAPACITY];$/;"	m	struct:nk_table
vectors	include/nuklear.h	/^    struct nk_config_stack_vec2 vectors;$/;"	m	struct:nk_configuration_stacks	typeref:struct:nk_configuration_stacks::nk_config_stack_vec2
vertex_alignment	include/nuklear.h	/^    nk_size vertex_alignment; \/* vertex alignment: Can be obtained by NK_ALIGNOF *\/$/;"	m	struct:nk_convert_config
vertex_count	include/nuklear.h	/^    unsigned int vertex_count;$/;"	m	struct:nk_draw_list
vertex_layout	include/nuklear.h	/^    const struct nk_draw_vertex_layout_element *vertex_layout; \/* describes the vertex output format and packing *\/$/;"	m	struct:nk_convert_config	typeref:struct:nk_convert_config::nk_draw_vertex_layout_element
vertex_size	include/nuklear.h	/^    nk_size vertex_size; \/* sizeof one vertex for vertex packing *\/$/;"	m	struct:nk_convert_config
vertices	include/nuklear.h	/^    struct nk_buffer *vertices;$/;"	m	struct:nk_draw_list	typeref:struct:nk_draw_list::nk_buffer
void_function	src/utils.h	/^typedef void void_function(void);$/;"	t
w	include/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart
w	include/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state
w	include/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
w	include/nuklear.h	/^    nk_rp_coord w, h;$/;"	m	struct:nk_rp_rect
w	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle
w	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_circle_filled
w	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_custom
w	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_image
w	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect
w	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_filled
w	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_rect_multi_color
w	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_scissor
w	include/nuklear.h	/^    unsigned short w, h;$/;"	m	struct:nk_command_text
w	include/nuklear.h	/^   int w,h,stride;$/;"	m	struct:nk_tt__bitmap
w	include/nuklear.h	/^struct nk_image {nk_handle handle;unsigned short w,h;unsigned short region[4];};$/;"	m	struct:nk_image
w	include/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect
w	include/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti
w	include/stb_truetype.h	/^    int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
w	include/stb_truetype.h	/^    int w,h,stride;$/;"	m	struct:__anon21
was_packed	include/nuklear.h	/^    int was_packed;$/;"	m	struct:nk_rp_rect
was_packed	include/stb_truetype.h	/^    int id,w,h,was_packed;$/;"	m	struct:stbrp_rect
where	include/nuklear.h	/^   int where;$/;"	m	struct:nk_text_undo_record
width	include/nuklear.h	/^    float width, height;$/;"	m	struct:nk_user_font_glyph
width	include/nuklear.h	/^    int   width;$/;"	m	struct:nk_tt_pack_context
width	include/nuklear.h	/^    int width;$/;"	m	struct:nk_rp_context
width	include/nuklear.h	/^    nk_text_width_f width;$/;"	m	struct:nk_user_font
width	include/stb_truetype.h	/^    int   width;$/;"	m	struct:stbtt_pack_context
width	include/stb_truetype.h	/^    int width,height;$/;"	m	struct:__anon30
win	include/nuklear.h	/^    struct nk_page_element win[1];$/;"	m	struct:nk_page	typeref:struct:nk_page::nk_page_element
win	include/nuklear.h	/^    struct nk_window *win;$/;"	m	struct:nk_popup_state	typeref:struct:nk_popup_state::nk_window
win	include/nuklear.h	/^    struct nk_window win;$/;"	m	union:nk_page_data	typeref:struct:nk_page_data::nk_window
window	include/nuklear.h	/^    struct nk_style_window window;$/;"	m	struct:nk_style	typeref:struct:nk_style::nk_style_window
x	include/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart
x	include/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state
x	include/nuklear.h	/^    int x,y;$/;"	m	struct:nk_rp__findresult
x	include/nuklear.h	/^    nk_rp_coord  x,y;$/;"	m	struct:nk_rp_node
x	include/nuklear.h	/^    nk_rp_coord x, y;$/;"	m	struct:nk_rp_rect
x	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle
x	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle_filled
x	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_custom
x	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_image
x	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect
x	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_filled
x	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_multi_color
x	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_scissor
x	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_text
x	include/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex
x	include/nuklear.h	/^   float x,y;    \/* position of n'th character *\/$/;"	m	struct:nk_text_find
x	include/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect
x	include/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti
x	include/nuklear.h	/^struct nk_scroll {nk_uint x, y;};$/;"	m	struct:nk_scroll
x	include/nuklear.h	/^struct nk_tt__point {float x,y;};$/;"	m	struct:nk_tt__point
x	include/nuklear.h	/^struct nk_vec2 {float x,y;};$/;"	m	struct:nk_vec2
x	include/nuklear.h	/^struct nk_vec2i {short x, y;};$/;"	m	struct:nk_vec2i
x	include/nuklear.h	/^template<typename T> struct nk_alignof{struct Big {T x; char c;}; enum {$/;"	m	struct:nk_alignof::Big
x	include/stb_truetype.h	/^    float x, y;$/;"	m	struct:__anon28
x	include/stb_truetype.h	/^    float x,y;$/;"	m	struct:__anon29
x	include/stb_truetype.h	/^    int x,dx;$/;"	m	struct:stbtt__active_edge
x	include/stb_truetype.h	/^    int x,y,bottom_y;$/;"	m	struct:__anon30
x	include/stb_truetype.h	/^    stbrp_coord x,y;$/;"	m	struct:stbrp_rect
x	include/stb_truetype.h	/^    stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon20
x	include/stb_truetype.h	/^    unsigned char x;$/;"	m	struct:__anon31
x0	include/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
x0	include/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge
x0	include/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad
x0	include/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar
x0	include/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar
x0	include/nuklear.h	/^   float x0,x1;$/;"	m	struct:nk_text_edit_row
x0	include/stb_truetype.h	/^    float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x0	include/stb_truetype.h	/^    float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon16
x0	include/stb_truetype.h	/^    unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon15
x0	include/stb_truetype.h	/^    unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon17
x1	include/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
x1	include/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge
x1	include/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad
x1	include/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar
x1	include/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar
x1	include/nuklear.h	/^   float x0,x1;$/;"	m	struct:nk_text_edit_row
x1	include/stb_truetype.h	/^    float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
x1	include/stb_truetype.h	/^    float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon16
x1	include/stb_truetype.h	/^    unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon15
x1	include/stb_truetype.h	/^    unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon17
xadvance	include/nuklear.h	/^    float xadvance;$/;"	m	struct:nk_font_glyph
xadvance	include/nuklear.h	/^    float xadvance;$/;"	m	struct:nk_user_font_glyph
xadvance	include/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_bakedchar
xadvance	include/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_packedchar
xadvance	include/stb_truetype.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:__anon15
xadvance	include/stb_truetype.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:__anon17
xoff	include/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_bakedchar
xoff	include/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_packedchar
xoff	include/stb_truetype.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:__anon15
xoff	include/stb_truetype.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:__anon17
xoff2	include/nuklear.h	/^    float xoff2,yoff2;$/;"	m	struct:nk_tt_packedchar
xoff2	include/stb_truetype.h	/^    float xoff2,yoff2;$/;"	m	struct:__anon17
y	include/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_chart
y	include/nuklear.h	/^    float x, y, w, h;$/;"	m	struct:nk_menu_state
y	include/nuklear.h	/^    int x,y;$/;"	m	struct:nk_rp__findresult
y	include/nuklear.h	/^    nk_rp_coord  x,y;$/;"	m	struct:nk_rp_node
y	include/nuklear.h	/^    nk_rp_coord x, y;$/;"	m	struct:nk_rp_rect
y	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle
y	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_circle_filled
y	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_custom
y	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_image
y	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect
y	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_filled
y	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_rect_multi_color
y	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_scissor
y	include/nuklear.h	/^    short x, y;$/;"	m	struct:nk_command_text
y	include/nuklear.h	/^    short x,y,cx,cy;$/;"	m	struct:nk_tt_vertex
y	include/nuklear.h	/^   float x,y;    \/* position of n'th character *\/$/;"	m	struct:nk_text_find
y	include/nuklear.h	/^struct nk_rect {float x,y,w,h;};$/;"	m	struct:nk_rect
y	include/nuklear.h	/^struct nk_recti {short x,y,w,h;};$/;"	m	struct:nk_recti
y	include/nuklear.h	/^struct nk_scroll {nk_uint x, y;};$/;"	m	struct:nk_scroll
y	include/nuklear.h	/^struct nk_tt__point {float x,y;};$/;"	m	struct:nk_tt__point
y	include/nuklear.h	/^struct nk_vec2 {float x,y;};$/;"	m	struct:nk_vec2
y	include/nuklear.h	/^struct nk_vec2i {short x, y;};$/;"	m	struct:nk_vec2i
y	include/stb_truetype.h	/^    float x, y;$/;"	m	struct:__anon28
y	include/stb_truetype.h	/^    float x,y;$/;"	m	struct:__anon29
y	include/stb_truetype.h	/^    int x,y,bottom_y;$/;"	m	struct:__anon30
y	include/stb_truetype.h	/^    stbrp_coord x,y;$/;"	m	struct:stbrp_rect
y	include/stb_truetype.h	/^    stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anon20
y0	include/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
y0	include/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge
y0	include/nuklear.h	/^    float x0,y0,s0,t0; \/* top-left *\/$/;"	m	struct:nk_tt_aligned_quad
y0	include/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar
y0	include/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar
y0	include/stb_truetype.h	/^    float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y0	include/stb_truetype.h	/^    float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anon16
y0	include/stb_truetype.h	/^    unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon15
y0	include/stb_truetype.h	/^    unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon17
y1	include/nuklear.h	/^    float x0, y0, x1, y1, w, h;$/;"	m	struct:nk_font_glyph
y1	include/nuklear.h	/^    float x0,y0, x1,y1;$/;"	m	struct:nk_tt__edge
y1	include/nuklear.h	/^    float x1,y1,s1,t1; \/* bottom-right *\/$/;"	m	struct:nk_tt_aligned_quad
y1	include/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_bakedchar
y1	include/nuklear.h	/^    unsigned short x0,y0,x1,y1;$/;"	m	struct:nk_tt_packedchar
y1	include/stb_truetype.h	/^    float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge
y1	include/stb_truetype.h	/^    float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anon16
y1	include/stb_truetype.h	/^    unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon15
y1	include/stb_truetype.h	/^    unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anon17
ymax	include/nuklear.h	/^   float ymin,ymax;$/;"	m	struct:nk_text_edit_row
ymin	include/nuklear.h	/^   float ymin,ymax;$/;"	m	struct:nk_text_edit_row
yoff	include/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_bakedchar
yoff	include/nuklear.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:nk_tt_packedchar
yoff	include/stb_truetype.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:__anon15
yoff	include/stb_truetype.h	/^    float xoff,yoff,xadvance;$/;"	m	struct:__anon17
yoff2	include/nuklear.h	/^    float xoff2,yoff2;$/;"	m	struct:nk_tt_packedchar
yoff2	include/stb_truetype.h	/^    float xoff2,yoff2;$/;"	m	struct:__anon17
